

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Sat May 17 17:34:54 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	psect	text17,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  000E                     	;# 
    43  000F                     	;# 
    44  0010                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0014                     	;# 
    49  0015                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  001D                     	;# 
    60  001E                     	;# 
    61  001F                     	;# 
    62  0081                     	;# 
    63  0085                     	;# 
    64  0086                     	;# 
    65  0087                     	;# 
    66  0088                     	;# 
    67  0089                     	;# 
    68  008C                     	;# 
    69  008D                     	;# 
    70  008E                     	;# 
    71  008F                     	;# 
    72  0090                     	;# 
    73  0091                     	;# 
    74  0092                     	;# 
    75  0093                     	;# 
    76  0093                     	;# 
    77  0093                     	;# 
    78  0094                     	;# 
    79  0095                     	;# 
    80  0096                     	;# 
    81  0097                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009E                     	;# 
    89  009F                     	;# 
    90  0105                     	;# 
    91  0107                     	;# 
    92  0108                     	;# 
    93  0109                     	;# 
    94  010C                     	;# 
    95  010C                     	;# 
    96  010D                     	;# 
    97  010E                     	;# 
    98  010F                     	;# 
    99  0185                     	;# 
   100  0187                     	;# 
   101  0188                     	;# 
   102  0189                     	;# 
   103  018C                     	;# 
   104  018D                     	;# 
   105  0017                     _CCP1CON	set	23
   106  001D                     _CCP2CON	set	29
   107  0015                     _CCPR1L	set	21
   108  001B                     _CCPR2L	set	27
   109  0005                     _PORTA	set	5
   110  0006                     _PORTB	set	6
   111  0007                     _PORTC	set	7
   112  0008                     _PORTD	set	8
   113  0009                     _PORTE	set	9
   114  001A                     _RCREG	set	26
   115  0012                     _T2CON	set	18
   116  0019                     _TXREG	set	25
   117  00C4                     _CREN	set	196
   118  00C1                     _OERR	set	193
   119  002B                     _RA3	set	43
   120  002C                     _RA4	set	44
   121  002D                     _RA5	set	45
   122  0030                     _RB0	set	48
   123  0031                     _RB1	set	49
   124  0032                     _RB2	set	50
   125  0033                     _RB3	set	51
   126  0034                     _RB4	set	52
   127  0035                     _RB5	set	53
   128  0036                     _RB6	set	54
   129  0037                     _RB7	set	55
   130  0065                     _RCIF	set	101
   131  0048                     _RE0	set	72
   132  0049                     _RE1	set	73
   133  004A                     _RE2	set	74
   134  00C6                     _RX9	set	198
   135  00C7                     _SPEN	set	199
   136  0064                     _TXIF	set	100
   137  0092                     _PR2	set	146
   138  0099                     _SPBRG	set	153
   139  0085                     _TRISA	set	133
   140  0086                     _TRISB	set	134
   141  0087                     _TRISC	set	135
   142  0088                     _TRISD	set	136
   143  0089                     _TRISE	set	137
   144  04C2                     _BRGH	set	1218
   145  047C                     _IRCF0	set	1148
   146  047D                     _IRCF1	set	1149
   147  047E                     _IRCF2	set	1150
   148  04C6                     _TX9	set	1222
   149  04C5                     _TXEN	set	1221
   150  0188                     _ANSEL	set	392
   151  0189                     _ANSELH	set	393
   152                           
   153                           	psect	strings
   154  0800                     __pstrings:	
   155  0800                     stringtab:	
   156  0800                     __stringtab:	
   157  0800                     stringcode:	
   158                           ;	String table - string pointers are 1 byte each
   159                           
   160  0800                     stringdir:	
   161  0800  3008               	movlw	high stringdir
   162  0801  008A               	movwf	10
   163  0802  0804               	movf	4,w
   164  0803  0A84               	incf	4,f
   165  0804  0782               	addwf	2,f
   166  0805                     __stringbase:	
   167  0805  3400               	retlw	0
   168  0806                     __end_of__stringtab:	
   169  0806                     __stringdata:	
   170  0806                     STR_6:	
   171  0806  344C               	retlw	76	;'L'
   172  0807  3469               	retlw	105	;'i'
   173  0808  346E               	retlw	110	;'n'
   174  0809  3465               	retlw	101	;'e'
   175  080A  3420               	retlw	32	;' '
   176  080B  3420               	retlw	32	;' '
   177  080C  3420               	retlw	32	;' '
   178  080D  3420               	retlw	32	;' '
   179  080E  3400               	retlw	0
   180  080F                     STR_5:	
   181  080F  3450               	retlw	80	;'P'
   182  0810  3461               	retlw	97	;'a'
   183  0811  3474               	retlw	116	;'t'
   184  0812  3468               	retlw	104	;'h'
   185  0813  343A               	retlw	58	;':'
   186  0814  3420               	retlw	32	;' '
   187  0815  3420               	retlw	32	;' '
   188  0816  3420               	retlw	32	;' '
   189  0817  3400               	retlw	0
   190  0818                     STR_3:	
   191  0818  3420               	retlw	32	;' '
   192  0819  3420               	retlw	32	;' '
   193  081A  344D               	retlw	77	;'M'
   194  081B  3461               	retlw	97	;'a'
   195  081C  347A               	retlw	122	;'z'
   196  081D  3465               	retlw	101	;'e'
   197  081E  3420               	retlw	32	;' '
   198  081F  3420               	retlw	32	;' '
   199  0820  3400               	retlw	0
   200  0821                     STR_4:	
   201  0821  3453               	retlw	83	;'S'
   202  0822  346F               	retlw	111	;'o'
   203  0823  346C               	retlw	108	;'l'
   204  0824  3476               	retlw	118	;'v'
   205  0825  3469               	retlw	105	;'i'
   206  0826  346E               	retlw	110	;'n'
   207  0827  3467               	retlw	103	;'g'
   208  0828  342E               	retlw	46	;'.'
   209  0829  3400               	retlw	0
   210  082A                     STR_2:	
   211  082A  3453               	retlw	83	;'S'
   212  082B  3457               	retlw	87	;'W'
   213  082C  3432               	retlw	50	;'2'
   214  082D  343A               	retlw	58	;':'
   215  082E  344C               	retlw	76	;'L'
   216  082F  3469               	retlw	105	;'i'
   217  0830  346E               	retlw	110	;'n'
   218  0831  3465               	retlw	101	;'e'
   219  0832  3400               	retlw	0
   220  0833                     STR_1:	
   221  0833  3453               	retlw	83	;'S'
   222  0834  3457               	retlw	87	;'W'
   223  0835  3431               	retlw	49	;'1'
   224  0836  343A               	retlw	58	;':'
   225  0837  344D               	retlw	77	;'M'
   226  0838  3461               	retlw	97	;'a'
   227  0839  347A               	retlw	122	;'z'
   228  083A  3465               	retlw	101	;'e'
   229  083B  3400               	retlw	0
   230  083C                     STR_7:	
   231  083C  3446               	retlw	70	;'F'
   232  083D  346F               	retlw	111	;'o'
   233  083E  346C               	retlw	108	;'l'
   234  083F  346C               	retlw	108	;'l'
   235  0840  346F               	retlw	111	;'o'
   236  0841  3477               	retlw	119	;'w'
   237  0842  3465               	retlw	101	;'e'
   238  0843  3472               	retlw	114	;'r'
   239  0844  3400               	retlw	0
   240  0845                     STR_8:	
   241  0845  344C               	retlw	76	;'L'
   242  0846  3442               	retlw	66	;'B'
   243  0847  344C               	retlw	76	;'L'
   244  0848  3400               	retlw	0
   245  0849                     STR_11:	
   246  0849  3452               	retlw	82	;'R'
   247  084A  3442               	retlw	66	;'B'
   248  084B  344C               	retlw	76	;'L'
   249  084C  3400               	retlw	0
   250  084D                     STR_12:	
   251  084D  3453               	retlw	83	;'S'
   252  084E  3442               	retlw	66	;'B'
   253  084F  344C               	retlw	76	;'L'
   254  0850  3400               	retlw	0
   255  0851                     STR_9:	
   256  0851  344C               	retlw	76	;'L'
   257  0852  3442               	retlw	66	;'B'
   258  0853  3452               	retlw	82	;'R'
   259  0854  3400               	retlw	0
   260  0855                     STR_10:	
   261  0855  344C               	retlw	76	;'L'
   262  0856  3442               	retlw	66	;'B'
   263  0857  3453               	retlw	83	;'S'
   264  0858  3400               	retlw	0
   265  0859                     STR_13:	
   266  0859  3453               	retlw	83	;'S'
   267  085A  3442               	retlw	66	;'B'
   268  085B  3453               	retlw	83	;'S'
   269  085C  3400               	retlw	0
   270  085D                     __end_of__stringdata:	
   271                           
   272                           ; #config settings
   273  0000                     
   274                           	psect	cinit
   275  07FC                     start_initialization:	
   276  07FC                     __initialization:	
   277  07FC                     end_of_initialization:	
   278                           ;End of C runtime variable initialization code
   279                           
   280  07FC                     __end_of__initialization:	
   281  07FC  0183               	clrf	3
   282  07FD  120A  118A  29DB   	ljmp	_main	;jump to C main() function
   283                           
   284                           	psect	cstackCOMMON
   285  0070                     __pcstackCOMMON:	
   286  0070                     ?_lcdWrite:	
   287  0070                     ?_picInit:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ??_picInit:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_beep:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ?_lcdInit:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_lcdPutstr:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0070                     ?_main:	
   303                           ; 0 bytes @ 0x0
   304                           
   305  0070                     ?___bmul:	
   306                           ; 0 bytes @ 0x0
   307                           
   308  0070                     ?_memcmp:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ?___lwdiv:	
   312                           ; 2 bytes @ 0x0
   313                           
   314  0070                     ?___lwmod:	
   315                           ; 2 bytes @ 0x0
   316                           
   317  0070                     ?___wmul:	
   318                           ; 2 bytes @ 0x0
   319                           
   320  0070                     ?___aldiv:	
   321                           ; 2 bytes @ 0x0
   322                           
   323  0070                     lcdWrite@data:	
   324                           ; 4 bytes @ 0x0
   325                           
   326  0070                     ___bmul@multiplicand:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     memcmp@s2:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     beep@delayMs:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ___lwdiv@divisor:	
   336                           ; 2 bytes @ 0x0
   337                           
   338  0070                     ___lwmod@divisor:	
   339                           ; 2 bytes @ 0x0
   340                           
   341  0070                     ___wmul@multiplier:	
   342                           ; 2 bytes @ 0x0
   343                           
   344  0070                     ___aldiv@divisor:	
   345                           ; 2 bytes @ 0x0
   346                           
   347                           
   348                           ; 4 bytes @ 0x0
   349  0070                     	ds	1
   350  0071                     ??_lcdWrite:	
   351  0071                     ??___bmul:	
   352                           ; 0 bytes @ 0x1
   353                           
   354  0071                     memcmp@n:	
   355                           ; 0 bytes @ 0x1
   356                           
   357                           
   358                           ; 2 bytes @ 0x1
   359  0071                     	ds	1
   360  0072                     ??_beep:	
   361  0072                     lcdWrite@rs:	
   362                           ; 0 bytes @ 0x2
   363                           
   364  0072                     ___bmul@product:	
   365                           ; 1 bytes @ 0x2
   366                           
   367  0072                     ___lwdiv@dividend:	
   368                           ; 1 bytes @ 0x2
   369                           
   370  0072                     ___lwmod@dividend:	
   371                           ; 2 bytes @ 0x2
   372                           
   373  0072                     ___wmul@multiplicand:	
   374                           ; 2 bytes @ 0x2
   375                           
   376                           
   377                           ; 2 bytes @ 0x2
   378  0072                     	ds	1
   379  0073                     ??_memcmp:	
   380  0073                     ??_lcdInit:	
   381                           ; 0 bytes @ 0x3
   382                           
   383  0073                     ?_lcdGoto:	
   384                           ; 0 bytes @ 0x3
   385                           
   386  0073                     ??_lcdPutstr:	
   387                           ; 0 bytes @ 0x3
   388                           
   389  0073                     lcdGoto@col:	
   390                           ; 0 bytes @ 0x3
   391                           
   392  0073                     ___bmul@multiplier:	
   393                           ; 1 bytes @ 0x3
   394                           
   395                           
   396                           ; 1 bytes @ 0x3
   397  0073                     	ds	1
   398  0074                     ??_lcdGoto:	
   399  0074                     ??___lwdiv:	
   400                           ; 0 bytes @ 0x4
   401                           
   402  0074                     ??___lwmod:	
   403                           ; 0 bytes @ 0x4
   404                           
   405  0074                     ??___wmul:	
   406                           ; 0 bytes @ 0x4
   407                           
   408  0074                     lcdPutstr@s:	
   409                           ; 0 bytes @ 0x4
   410                           
   411  0074                     beep@times:	
   412                           ; 1 bytes @ 0x4
   413                           
   414  0074                     ___wmul@product:	
   415                           ; 1 bytes @ 0x4
   416                           
   417  0074                     ___aldiv@dividend:	
   418                           ; 2 bytes @ 0x4
   419                           
   420                           
   421                           ; 4 bytes @ 0x4
   422  0074                     	ds	1
   423  0075                     lcdGoto@row:	
   424  0075                     ___lwmod@counter:	
   425                           ; 1 bytes @ 0x5
   426                           
   427  0075                     memcmp@s1:	
   428                           ; 1 bytes @ 0x5
   429                           
   430  0075                     beep@loop:	
   431                           ; 1 bytes @ 0x5
   432                           
   433  0075                     ___lwdiv@quotient:	
   434                           ; 2 bytes @ 0x5
   435                           
   436                           
   437                           ; 2 bytes @ 0x5
   438  0075                     	ds	1
   439  0076                     ?___awdiv:	
   440  0076                     ___awdiv@divisor:	
   441                           ; 2 bytes @ 0x6
   442                           
   443                           
   444                           ; 2 bytes @ 0x6
   445  0076                     	ds	1
   446  0077                     ___lwdiv@counter:	
   447                           
   448                           ; 1 bytes @ 0x7
   449  0077                     	ds	1
   450  0078                     ?_lcdNumber:	
   451  0078                     ??___aldiv:	
   452                           ; 0 bytes @ 0x8
   453                           
   454  0078                     lcdNumber@no:	
   455                           ; 0 bytes @ 0x8
   456                           
   457  0078                     ___awdiv@dividend:	
   458                           ; 2 bytes @ 0x8
   459                           
   460                           
   461                           ; 2 bytes @ 0x8
   462  0078                     	ds	2
   463  007A                     ??___awdiv:	
   464  007A                     lcdNumber@base:	
   465                           ; 0 bytes @ 0xA
   466                           
   467                           
   468                           ; 1 bytes @ 0xA
   469  007A                     	ds	1
   470  007B                     ??_setPwmRC1:	
   471  007B                     ??_setPwmRC2:	
   472                           ; 0 bytes @ 0xB
   473                           
   474  007B                     lcdNumber@digit:	
   475                           ; 0 bytes @ 0xB
   476                           
   477                           
   478                           ; 1 bytes @ 0xB
   479  007B                     	ds	1
   480  007C                     setPwmRC1@a:	
   481  007C                     setPwmRC2@a:	
   482                           ; 2 bytes @ 0xC
   483                           
   484                           
   485                           ; 2 bytes @ 0xC
   486  007C                     	ds	2
   487                           
   488                           	psect	cstackBANK0
   489  0020                     __pcstackBANK0:	
   490  0020                     ??_lcdNumber:	
   491  0020                     ___aldiv@counter:	
   492                           ; 0 bytes @ 0x0
   493                           
   494  0020                     ___awdiv@counter:	
   495                           ; 1 bytes @ 0x0
   496                           
   497                           
   498                           ; 1 bytes @ 0x0
   499  0020                     	ds	1
   500  0021                     ___aldiv@sign:	
   501  0021                     ___awdiv@sign:	
   502                           ; 1 bytes @ 0x1
   503                           
   504                           
   505                           ; 1 bytes @ 0x1
   506  0021                     	ds	1
   507  0022                     ___awdiv@quotient:	
   508  0022                     ___aldiv@quotient:	
   509                           ; 2 bytes @ 0x2
   510                           
   511                           
   512                           ; 4 bytes @ 0x2
   513  0022                     	ds	1
   514  0023                     lcdNumber@di:	
   515                           
   516                           ; 10 bytes @ 0x3
   517  0023                     	ds	3
   518  0026                     ?_setPwmRC1:	
   519  0026                     ?_setPwmRC2:	
   520                           ; 0 bytes @ 0x6
   521                           
   522  0026                     setPwmRC1@freq:	
   523                           ; 0 bytes @ 0x6
   524                           
   525  0026                     setPwmRC2@freq:	
   526                           ; 2 bytes @ 0x6
   527                           
   528                           
   529                           ; 2 bytes @ 0x6
   530  0026                     	ds	2
   531  0028                     setPwmRC1@duty:	
   532  0028                     setPwmRC2@duty:	
   533                           ; 2 bytes @ 0x8
   534                           
   535                           
   536                           ; 2 bytes @ 0x8
   537  0028                     	ds	2
   538  002A                     ?_motor:	
   539  002A                     motor@speedRM:	
   540                           ; 0 bytes @ 0xA
   541                           
   542                           
   543                           ; 1 bytes @ 0xA
   544  002A                     	ds	1
   545  002B                     ??_motor:	
   546                           
   547                           ; 0 bytes @ 0xB
   548  002B                     	ds	2
   549  002D                     lcdNumber@i:	
   550  002D                     motor@maxSpeed:	
   551                           ; 1 bytes @ 0xD
   552                           
   553                           
   554                           ; 1 bytes @ 0xD
   555  002D                     	ds	1
   556  002E                     lcdNumber@j:	
   557  002E                     motor@speedLM:	
   558                           ; 1 bytes @ 0xE
   559                           
   560                           
   561                           ; 1 bytes @ 0xE
   562  002E                     	ds	1
   563  002F                     motor@speed:	
   564                           
   565                           ; 1 bytes @ 0xF
   566  002F                     	ds	1
   567  0030                     ??_main:	
   568                           
   569                           ; 0 bytes @ 0x10
   570  0030                     	ds	4
   571  0034                     main@path:	
   572                           
   573                           ; 20 bytes @ 0x14
   574  0034                     	ds	20
   575  0048                     main@i:	
   576                           
   577                           ; 2 bytes @ 0x28
   578  0048                     	ds	2
   579  004A                     main@pathTotal:	
   580                           
   581                           ; 1 bytes @ 0x2A
   582  004A                     	ds	1
   583  004B                     main@simplified:	
   584                           
   585                           ; 1 bytes @ 0x2B
   586  004B                     	ds	1
   587  004C                     main@string:	
   588                           
   589                           ; 3 bytes @ 0x2C
   590  004C                     	ds	3
   591  004F                     main@buzzerCount:	
   592                           
   593                           ; 4 bytes @ 0x2F
   594  004F                     	ds	4
   595  0053                     main@dir:	
   596                           
   597                           ; 1 bytes @ 0x33
   598  0053                     	ds	1
   599  0054                     main@pathLength:	
   600                           
   601                           ; 1 bytes @ 0x34
   602  0054                     	ds	1
   603                           
   604                           	psect	maintext
   605  01DB                     __pmaintext:	
   606 ;;
   607 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   608 ;;
   609 ;; *************** function _main *****************
   610 ;; Defined at:
   611 ;;		line 38 in file "main.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;		None
   614 ;; Auto vars:     Size  Location     Type
   615 ;;  path           20   20[BANK0 ] unsigned char [20]
   616 ;;  buzzerCount     4   47[BANK0 ] unsigned long 
   617 ;;  string          3   44[BANK0 ] unsigned char [3]
   618 ;;  i               2   40[BANK0 ] unsigned int 
   619 ;;  pathLength      1   52[BANK0 ] unsigned char 
   620 ;;  dir             1   51[BANK0 ] unsigned char 
   621 ;;  simplified      1   43[BANK0 ] unsigned char 
   622 ;;  pathTotal       1   42[BANK0 ] unsigned char 
   623 ;; Return value:  Size  Location     Type
   624 ;;		None               void
   625 ;; Registers used:
   626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : 17F/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   632 ;;      Params:         0       0       0       0       0
   633 ;;      Locals:         0      33       0       0       0
   634 ;;      Temps:          0       4       0       0       0
   635 ;;      Totals:         0      37       0       0       0
   636 ;;Total ram usage:       37 bytes
   637 ;; Hardware stack levels required when called:    3
   638 ;; This function calls:
   639 ;;		_beep
   640 ;;		_lcdGoto
   641 ;;		_lcdInit
   642 ;;		_lcdNumber
   643 ;;		_lcdPutstr
   644 ;;		_lcdWrite
   645 ;;		_memcmp
   646 ;;		_motor
   647 ;;		_picInit
   648 ;; This function is called by:
   649 ;;		Startup code after reset
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           
   654                           ;psect for function _main
   655  01DB                     _main:	
   656                           
   657                           ;main.c: 40: uInt i;
   658                           ;main.c: 41: uChar path[20], pathLength = 0, pathTotal, dir = 0;
   659                           
   660                           ;incstack = 0
   661                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   662  01DB  1283               	bcf	3,5	;RP0=0, select bank0
   663  01DC  1303               	bcf	3,6	;RP1=0, select bank0
   664  01DD  01D4               	clrf	main@pathLength
   665  01DE  01D3               	clrf	main@dir
   666                           
   667                           ;main.c: 42: uChar simplified = 0, string[3];
   668  01DF  01CB               	clrf	main@simplified
   669                           
   670                           ;main.c: 43: uLong buzzerCount = 0;
   671  01E0  3000               	movlw	0
   672  01E1  00D2               	movwf	main@buzzerCount+3
   673  01E2  3000               	movlw	0
   674  01E3  00D1               	movwf	main@buzzerCount+2
   675  01E4  3000               	movlw	0
   676  01E5  00D0               	movwf	main@buzzerCount+1
   677  01E6  3000               	movlw	0
   678  01E7  00CF               	movwf	main@buzzerCount
   679                           
   680                           ;main.c: 45: picInit();
   681  01E8  120A  158A  2514   	fcall	_picInit
      +       120A  118A         
   682                           
   683                           ;main.c: 46: lcdInit();
   684  01ED  120A  158A  26C9   	fcall	_lcdInit
      +       120A  118A         
   685                           
   686                           ;main.c: 47: beep(2, 50);
   687  01F2  3032               	movlw	50
   688  01F3  00F0               	movwf	beep@delayMs
   689  01F4  3000               	movlw	0
   690  01F5  00F1               	movwf	beep@delayMs+1
   691  01F6  3002               	movlw	2
   692  01F7  120A  118A  2008   	fcall	_beep
      +       120A  118A         
   693                           
   694                           ;main.c: 49: (lcdWrite(0, 1), _delay((unsigned long)((2)*(8000000/4000.0))));
   695  01FC  01F0               	clrf	lcdWrite@data
   696  01FD  0AF0               	incf	lcdWrite@data,f
   697  01FE  3000               	movlw	0
   698  01FF  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
   699  0204  3006               	movlw	6
   700  0205  1283               	bcf	3,5	;RP0=0, select bank0
   701  0206  1303               	bcf	3,6	;RP1=0, select bank0
   702  0207  00B1               	movwf	??_main+1
   703  0208  3030               	movlw	48
   704  0209  00B0               	movwf	??_main
   705  020A                     u4197:	
   706  020A  0BB0               	decfsz	??_main,f
   707  020B  2A0A               	goto	u4197
   708  020C  0BB1               	decfsz	??_main+1,f
   709  020D  2A0A               	goto	u4197
   710  020E  0000               	nop
   711                           
   712                           ;main.c: 50: lcdPutstr("SW1:Maze");
   713  020F  302E               	movlw	(STR_1-__stringbase)& (0+255)
   714  0210  120A  158A  2553   	fcall	_lcdPutstr
      +       120A  118A         
   715                           
   716                           ;main.c: 51: lcdGoto(2,1);
   717  0215  01F3               	clrf	lcdGoto@col
   718  0216  0AF3               	incf	lcdGoto@col,f
   719  0217  3002               	movlw	2
   720  0218  120A  158A  25B5   	fcall	_lcdGoto
      +       120A  118A         
   721                           
   722                           ;main.c: 52: lcdPutstr("SW2:Line");
   723  021D  3025               	movlw	(STR_2-__stringbase)& (0+255)
   724  021E  120A  158A  2553   	fcall	_lcdPutstr
      +       120A  118A         
   725  0223  2A7E               	goto	l2527
   726  0224                     l2529:	
   727                           
   728                           ;main.c: 57: {
   729                           ;main.c: 58: (lcdWrite(0, 1), _delay((unsigned long)((2)*(8000000/4000.0))));
   730  0224  01F0               	clrf	lcdWrite@data
   731  0225  0AF0               	incf	lcdWrite@data,f
   732  0226  3000               	movlw	0
   733  0227  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
   734  022C  3006               	movlw	6
   735  022D  1283               	bcf	3,5	;RP0=0, select bank0
   736  022E  1303               	bcf	3,6	;RP1=0, select bank0
   737  022F  00B1               	movwf	??_main+1
   738  0230  3030               	movlw	48
   739  0231  00B0               	movwf	??_main
   740  0232                     u4207:	
   741  0232  0BB0               	decfsz	??_main,f
   742  0233  2A32               	goto	u4207
   743  0234  0BB1               	decfsz	??_main+1,f
   744  0235  2A32               	goto	u4207
   745  0236  0000               	nop
   746                           
   747                           ;main.c: 59: lcdPutstr("  Maze  ");
   748  0237  3013               	movlw	(STR_3-__stringbase)& (0+255)
   749  0238  120A  158A  2553   	fcall	_lcdPutstr
      +       120A  118A         
   750                           
   751                           ;main.c: 60: lcdGoto(2,1);
   752  023D  01F3               	clrf	lcdGoto@col
   753  023E  0AF3               	incf	lcdGoto@col,f
   754  023F  3002               	movlw	2
   755  0240  120A  158A  25B5   	fcall	_lcdGoto
      +       120A  118A         
   756                           
   757                           ;main.c: 61: lcdPutstr("Solving.");
   758  0245  301C               	movlw	(STR_4-__stringbase)& (0+255)
   759  0246  120A  158A  2553   	fcall	_lcdPutstr
      +       120A  118A         
   760                           
   761                           ;main.c: 62: _delay((unsigned long)((1000)*(8000000/4000.0)));
   762  024B  300B               	movlw	11
   763  024C  1283               	bcf	3,5	;RP0=0, select bank0
   764  024D  1303               	bcf	3,6	;RP1=0, select bank0
   765  024E  00B2               	movwf	??_main+2
   766  024F  3026               	movlw	38
   767  0250  00B1               	movwf	??_main+1
   768  0251  3066               	movlw	102
   769  0252  00B0               	movwf	??_main
   770  0253                     u4217:	
   771  0253  0BB0               	decfsz	??_main,f
   772  0254  2A53               	goto	u4217
   773  0255  0BB1               	decfsz	??_main+1,f
   774  0256  2A53               	goto	u4217
   775  0257  0BB2               	decfsz	??_main+2,f
   776  0258  2A53               	goto	u4217
   777  0259  2A5A               	nop2
   778                           
   779                           ;main.c: 63: (lcdWrite(0, 1), _delay((unsigned long)((2)*(8000000/4000.0))));
   780  025A  01F0               	clrf	lcdWrite@data
   781  025B  0AF0               	incf	lcdWrite@data,f
   782  025C  3000               	movlw	0
   783  025D  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
   784  0262  3006               	movlw	6
   785  0263  1283               	bcf	3,5	;RP0=0, select bank0
   786  0264  1303               	bcf	3,6	;RP1=0, select bank0
   787  0265  00B1               	movwf	??_main+1
   788  0266  3030               	movlw	48
   789  0267  00B0               	movwf	??_main
   790  0268                     u4227:	
   791  0268  0BB0               	decfsz	??_main,f
   792  0269  2A68               	goto	u4227
   793  026A  0BB1               	decfsz	??_main+1,f
   794  026B  2A68               	goto	u4227
   795  026C  0000               	nop
   796                           
   797                           ;main.c: 64: lcdPutstr("Path:   ");
   798  026D  300A               	movlw	(STR_5-__stringbase)& (0+255)
   799  026E  120A  158A  2553   	fcall	_lcdPutstr
      +       120A  118A         
   800                           
   801                           ;main.c: 65: beep(1, 50);
   802  0273  3032               	movlw	50
   803  0274  00F0               	movwf	beep@delayMs
   804  0275  3000               	movlw	0
   805  0276  00F1               	movwf	beep@delayMs+1
   806  0277  3001               	movlw	1
   807  0278  120A  118A  2008   	fcall	_beep
      +       120A  118A         
   808                           
   809                           ;main.c: 66: break;
   810  027D  2BC8               	goto	l220
   811  027E                     l2527:	
   812                           ;main.c: 54: while(1)
   813                           
   814                           ;main.c: 67: }
   815                           
   816                           
   817                           ;main.c: 55: {
   818                           ;main.c: 56: if(!RB0)
   819  027E  1283               	bcf	3,5	;RP0=0, select bank0
   820  027F  1303               	bcf	3,6	;RP1=0, select bank0
   821  0280  1C06               	btfss	6,0	;volatile
   822  0281  2A24               	goto	l2529
   823                           
   824                           ;main.c: 68: else if(!RB1)
   825  0282  1886               	btfsc	6,1	;volatile
   826  0283  2A7E               	goto	l2527
   827                           
   828                           ;main.c: 69: {
   829                           ;main.c: 70: (lcdWrite(0, 1), _delay((unsigned long)((2)*(8000000/4000.0))));
   830  0284  01F0               	clrf	lcdWrite@data
   831  0285  0AF0               	incf	lcdWrite@data,f
   832  0286  3000               	movlw	0
   833  0287  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
   834  028C  3006               	movlw	6
   835  028D  1283               	bcf	3,5	;RP0=0, select bank0
   836  028E  1303               	bcf	3,6	;RP1=0, select bank0
   837  028F  00B1               	movwf	??_main+1
   838  0290  3030               	movlw	48
   839  0291  00B0               	movwf	??_main
   840  0292                     u4237:	
   841  0292  0BB0               	decfsz	??_main,f
   842  0293  2A92               	goto	u4237
   843  0294  0BB1               	decfsz	??_main+1,f
   844  0295  2A92               	goto	u4237
   845  0296  0000               	nop
   846                           
   847                           ;main.c: 71: lcdPutstr("Line    ");
   848  0297  3001               	movlw	(STR_6-__stringbase)& (0+255)
   849  0298  120A  158A  2553   	fcall	_lcdPutstr
      +       120A  118A         
   850                           
   851                           ;main.c: 72: lcdGoto(2,1);
   852  029D  01F3               	clrf	lcdGoto@col
   853  029E  0AF3               	incf	lcdGoto@col,f
   854  029F  3002               	movlw	2
   855  02A0  120A  158A  25B5   	fcall	_lcdGoto
      +       120A  118A         
   856                           
   857                           ;main.c: 73: lcdPutstr("Follower");
   858  02A5  3037               	movlw	(STR_7-__stringbase)& (0+255)
   859  02A6  120A  158A  2553   	fcall	_lcdPutstr
      +       120A  118A         
   860                           
   861                           ;main.c: 74: beep(1, 50);
   862  02AB  3032               	movlw	50
   863  02AC  00F0               	movwf	beep@delayMs
   864  02AD  3000               	movlw	0
   865  02AE  00F1               	movwf	beep@delayMs+1
   866  02AF  3001               	movlw	1
   867  02B0  120A  118A  2008   	fcall	_beep
      +       120A  118A         
   868  02B5                     l2563:	
   869                           ;main.c: 75: while(1)
   870                           
   871                           
   872                           ;main.c: 76: {
   873                           ;main.c: 77: buzzerCount++;
   874  02B5  3001               	movlw	1
   875  02B6  1283               	bcf	3,5	;RP0=0, select bank0
   876  02B7  1303               	bcf	3,6	;RP1=0, select bank0
   877  02B8  07CF               	addwf	main@buzzerCount,f
   878  02B9  3000               	movlw	0
   879  02BA  1803               	skipnc
   880  02BB  3001               	movlw	1
   881  02BC  07D0               	addwf	main@buzzerCount+1,f
   882  02BD  3000               	movlw	0
   883  02BE  1803               	skipnc
   884  02BF  3001               	movlw	1
   885  02C0  07D1               	addwf	main@buzzerCount+2,f
   886  02C1  3000               	movlw	0
   887  02C2  1803               	skipnc
   888  02C3  3001               	movlw	1
   889  02C4  07D2               	addwf	main@buzzerCount+3,f
   890                           
   891                           ;main.c: 78: if(buzzerCount > 50000) buzzerCount = 0;
   892  02C5  3000               	movlw	0
   893  02C6  0252               	subwf	main@buzzerCount+3,w
   894  02C7  1D03               	skipz
   895  02C8  2AD3               	goto	u2865
   896  02C9  3000               	movlw	0
   897  02CA  0251               	subwf	main@buzzerCount+2,w
   898  02CB  1D03               	skipz
   899  02CC  2AD3               	goto	u2865
   900  02CD  30C3               	movlw	195
   901  02CE  0250               	subwf	main@buzzerCount+1,w
   902  02CF  1D03               	skipz
   903  02D0  2AD3               	goto	u2865
   904  02D1  3051               	movlw	81
   905  02D2  024F               	subwf	main@buzzerCount,w
   906  02D3                     u2865:	
   907  02D3  1C03               	skipc
   908  02D4  2ADE               	goto	l2569
   909  02D5  3000               	movlw	0
   910  02D6  00D2               	movwf	main@buzzerCount+3
   911  02D7  3000               	movlw	0
   912  02D8  00D1               	movwf	main@buzzerCount+2
   913  02D9  3000               	movlw	0
   914  02DA  00D0               	movwf	main@buzzerCount+1
   915  02DB  3000               	movlw	0
   916  02DC  00CF               	movwf	main@buzzerCount
   917  02DD  2B20               	goto	l192
   918  02DE                     l2569:	
   919                           
   920                           ;main.c: 79: else if(buzzerCount > 10000) RB7 = 0;
   921  02DE  3000               	movlw	0
   922  02DF  0252               	subwf	main@buzzerCount+3,w
   923  02E0  1D03               	skipz
   924  02E1  2AEC               	goto	u2875
   925  02E2  3000               	movlw	0
   926  02E3  0251               	subwf	main@buzzerCount+2,w
   927  02E4  1D03               	skipz
   928  02E5  2AEC               	goto	u2875
   929  02E6  3027               	movlw	39
   930  02E7  0250               	subwf	main@buzzerCount+1,w
   931  02E8  1D03               	skipz
   932  02E9  2AEC               	goto	u2875
   933  02EA  3011               	movlw	17
   934  02EB  024F               	subwf	main@buzzerCount,w
   935  02EC                     u2875:	
   936  02EC  1803               	btfsc	3,0
   937  02ED  2B0E               	goto	l2579
   938                           
   939                           ;main.c: 80: else if(buzzerCount > 5000) RB7 = 1;
   940  02EE  3000               	movlw	0
   941  02EF  0252               	subwf	main@buzzerCount+3,w
   942  02F0  1D03               	skipz
   943  02F1  2AFC               	goto	u2885
   944  02F2  3000               	movlw	0
   945  02F3  0251               	subwf	main@buzzerCount+2,w
   946  02F4  1D03               	skipz
   947  02F5  2AFC               	goto	u2885
   948  02F6  3013               	movlw	19
   949  02F7  0250               	subwf	main@buzzerCount+1,w
   950  02F8  1D03               	skipz
   951  02F9  2AFC               	goto	u2885
   952  02FA  3089               	movlw	137
   953  02FB  024F               	subwf	main@buzzerCount,w
   954  02FC                     u2885:	
   955  02FC  1803               	btfsc	3,0
   956  02FD  2B1F               	goto	l2583
   957                           
   958                           ;main.c: 81: else if(buzzerCount > 2000) RB7 = 0;
   959  02FE  3000               	movlw	0
   960  02FF  0252               	subwf	main@buzzerCount+3,w
   961  0300  1D03               	skipz
   962  0301  2B0C               	goto	u2895
   963  0302  3000               	movlw	0
   964  0303  0251               	subwf	main@buzzerCount+2,w
   965  0304  1D03               	skipz
   966  0305  2B0C               	goto	u2895
   967  0306  3007               	movlw	7
   968  0307  0250               	subwf	main@buzzerCount+1,w
   969  0308  1D03               	skipz
   970  0309  2B0C               	goto	u2895
   971  030A  30D1               	movlw	209
   972  030B  024F               	subwf	main@buzzerCount,w
   973  030C                     u2895:	
   974  030C  1C03               	skipc
   975  030D  2B10               	goto	l2581
   976  030E                     l2579:	
   977  030E  1386               	bcf	6,7	;volatile
   978  030F  2B20               	goto	l192
   979  0310                     l2581:	
   980                           
   981                           ;main.c: 82: else if(buzzerCount > 1000) RB7 = 1;
   982  0310  3000               	movlw	0
   983  0311  0252               	subwf	main@buzzerCount+3,w
   984  0312  1D03               	skipz
   985  0313  2B1E               	goto	u2905
   986  0314  3000               	movlw	0
   987  0315  0251               	subwf	main@buzzerCount+2,w
   988  0316  1D03               	skipz
   989  0317  2B1E               	goto	u2905
   990  0318  3003               	movlw	3
   991  0319  0250               	subwf	main@buzzerCount+1,w
   992  031A  1D03               	skipz
   993  031B  2B1E               	goto	u2905
   994  031C  30E9               	movlw	233
   995  031D  024F               	subwf	main@buzzerCount,w
   996  031E                     u2905:	
   997  031E  1803               	btfsc	3,0
   998  031F                     l2583:	
   999  031F  1786               	bsf	6,7	;volatile
  1000  0320                     l192:	
  1001                           
  1002                           ;main.c: 84: if(!RA3 && !RA4 && RA5 && !RE0 && !RE1)
  1003  0320  1D85               	btfss	5,3	;volatile
  1004  0321  1A05               	btfsc	5,4	;volatile
  1005  0322  2B33               	goto	l200
  1006  0323  1A85               	btfsc	5,5	;volatile
  1007  0324  1809               	btfsc	9,0	;volatile
  1008  0325  2B33               	goto	l200
  1009  0326  1889               	btfsc	9,1	;volatile
  1010  0327  2B33               	goto	l200
  1011                           
  1012                           ;main.c: 85: {
  1013                           ;main.c: 86: motor(80, 80);
  1014  0328  3050               	movlw	80
  1015  0329  00B0               	movwf	??_main
  1016  032A  0830               	movf	??_main,w
  1017  032B  00AA               	movwf	motor@speedRM
  1018  032C  3050               	movlw	80
  1019  032D  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1020                           
  1021                           ;main.c: 87: }
  1022  0332  2AB5               	goto	l2563
  1023  0333                     l200:	
  1024                           
  1025                           ;main.c: 88: else if(!RA3 && RA4 && RA5 && !RE0 && !RE1)
  1026  0333  1D85               	btfss	5,3	;volatile
  1027  0334  1E05               	btfss	5,4	;volatile
  1028  0335  2B46               	goto	l202
  1029  0336  1A85               	btfsc	5,5	;volatile
  1030  0337  1809               	btfsc	9,0	;volatile
  1031  0338  2B46               	goto	l202
  1032  0339  1889               	btfsc	9,1	;volatile
  1033  033A  2B46               	goto	l202
  1034                           
  1035                           ;main.c: 89: {
  1036                           ;main.c: 90: motor(40, 80);
  1037  033B  3050               	movlw	80
  1038  033C  00B0               	movwf	??_main
  1039  033D  0830               	movf	??_main,w
  1040  033E  00AA               	movwf	motor@speedRM
  1041  033F  3028               	movlw	40
  1042  0340  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1043                           
  1044                           ;main.c: 91: }
  1045  0345  2AB5               	goto	l2563
  1046  0346                     l202:	
  1047                           
  1048                           ;main.c: 92: else if(!RA3 && !RA4 && RA5 && RE0 && !RE1)
  1049  0346  1D85               	btfss	5,3	;volatile
  1050  0347  1A05               	btfsc	5,4	;volatile
  1051  0348  2B59               	goto	l204
  1052  0349  1A85               	btfsc	5,5	;volatile
  1053  034A  1C09               	btfss	9,0	;volatile
  1054  034B  2B59               	goto	l204
  1055  034C  1889               	btfsc	9,1	;volatile
  1056  034D  2B59               	goto	l204
  1057                           
  1058                           ;main.c: 93: {
  1059                           ;main.c: 94: motor(80, 40);
  1060  034E  3028               	movlw	40
  1061  034F  00B0               	movwf	??_main
  1062  0350  0830               	movf	??_main,w
  1063  0351  00AA               	movwf	motor@speedRM
  1064  0352  3050               	movlw	80
  1065  0353  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1066                           
  1067                           ;main.c: 95: }
  1068  0358  2AB5               	goto	l2563
  1069  0359                     l204:	
  1070                           
  1071                           ;main.c: 96: else if(!RA3 && RA4 && !RA5 && !RE0 && !RE1)
  1072  0359  1D85               	btfss	5,3	;volatile
  1073  035A  1E05               	btfss	5,4	;volatile
  1074  035B  2B6C               	goto	l206
  1075  035C  1E85               	btfss	5,5	;volatile
  1076  035D  1809               	btfsc	9,0	;volatile
  1077  035E  2B6C               	goto	l206
  1078  035F  1889               	btfsc	9,1	;volatile
  1079  0360  2B6C               	goto	l206
  1080                           
  1081                           ;main.c: 97: {
  1082                           ;main.c: 98: motor(30, 80);
  1083  0361  3050               	movlw	80
  1084  0362  00B0               	movwf	??_main
  1085  0363  0830               	movf	??_main,w
  1086  0364  00AA               	movwf	motor@speedRM
  1087  0365  301E               	movlw	30
  1088  0366  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1089                           
  1090                           ;main.c: 99: }
  1091  036B  2AB5               	goto	l2563
  1092  036C                     l206:	
  1093                           
  1094                           ;main.c: 100: else if(!RA3 && !RA4 && !RA5 && RE0 && !RE1)
  1095  036C  1D85               	btfss	5,3	;volatile
  1096  036D  1A05               	btfsc	5,4	;volatile
  1097  036E  2B7F               	goto	l208
  1098  036F  1E85               	btfss	5,5	;volatile
  1099  0370  1C09               	btfss	9,0	;volatile
  1100  0371  2B7F               	goto	l208
  1101  0372  1889               	btfsc	9,1	;volatile
  1102  0373  2B7F               	goto	l208
  1103                           
  1104                           ;main.c: 101: {
  1105                           ;main.c: 102: motor(80, 30);
  1106  0374  301E               	movlw	30
  1107  0375  00B0               	movwf	??_main
  1108  0376  0830               	movf	??_main,w
  1109  0377  00AA               	movwf	motor@speedRM
  1110  0378  3050               	movlw	80
  1111  0379  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1112                           
  1113                           ;main.c: 103: }
  1114  037E  2AB5               	goto	l2563
  1115  037F                     l208:	
  1116                           
  1117                           ;main.c: 104: else if(RA3 && RA4 && !RA5 && !RE0 && !RE1)
  1118  037F  1985               	btfsc	5,3	;volatile
  1119  0380  1E05               	btfss	5,4	;volatile
  1120  0381  2B92               	goto	l210
  1121  0382  1E85               	btfss	5,5	;volatile
  1122  0383  1809               	btfsc	9,0	;volatile
  1123  0384  2B92               	goto	l210
  1124  0385  1889               	btfsc	9,1	;volatile
  1125  0386  2B92               	goto	l210
  1126                           
  1127                           ;main.c: 105: {
  1128                           ;main.c: 106: motor(10, 80);
  1129  0387  3050               	movlw	80
  1130  0388  00B0               	movwf	??_main
  1131  0389  0830               	movf	??_main,w
  1132  038A  00AA               	movwf	motor@speedRM
  1133  038B  300A               	movlw	10
  1134  038C  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1135                           
  1136                           ;main.c: 107: }
  1137  0391  2AB5               	goto	l2563
  1138  0392                     l210:	
  1139                           
  1140                           ;main.c: 108: else if(!RA3 && !RA4 && !RA5 && RE0 && RE1)
  1141  0392  1D85               	btfss	5,3	;volatile
  1142  0393  1A05               	btfsc	5,4	;volatile
  1143  0394  2BA5               	goto	l212
  1144  0395  1E85               	btfss	5,5	;volatile
  1145  0396  1C09               	btfss	9,0	;volatile
  1146  0397  2BA5               	goto	l212
  1147  0398  1C89               	btfss	9,1	;volatile
  1148  0399  2BA5               	goto	l212
  1149                           
  1150                           ;main.c: 109: {
  1151                           ;main.c: 110: motor(80, 10);
  1152  039A  300A               	movlw	10
  1153  039B  00B0               	movwf	??_main
  1154  039C  0830               	movf	??_main,w
  1155  039D  00AA               	movwf	motor@speedRM
  1156  039E  3050               	movlw	80
  1157  039F  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1158                           
  1159                           ;main.c: 111: }
  1160  03A4  2AB5               	goto	l2563
  1161  03A5                     l212:	
  1162                           
  1163                           ;main.c: 112: else if(RA3 && !RA4 && !RA5 && !RE0 && !RE1)
  1164  03A5  1985               	btfsc	5,3	;volatile
  1165  03A6  1A05               	btfsc	5,4	;volatile
  1166  03A7  2BB8               	goto	l214
  1167  03A8  1E85               	btfss	5,5	;volatile
  1168  03A9  1809               	btfsc	9,0	;volatile
  1169  03AA  2BB8               	goto	l214
  1170  03AB  1889               	btfsc	9,1	;volatile
  1171  03AC  2BB8               	goto	l214
  1172                           
  1173                           ;main.c: 113: {
  1174                           ;main.c: 114: motor(0, 80);
  1175  03AD  3050               	movlw	80
  1176  03AE  00B0               	movwf	??_main
  1177  03AF  0830               	movf	??_main,w
  1178  03B0  00AA               	movwf	motor@speedRM
  1179  03B1  3000               	movlw	0
  1180  03B2  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1181                           
  1182                           ;main.c: 115: }
  1183  03B7  2AB5               	goto	l2563
  1184  03B8                     l214:	
  1185                           
  1186                           ;main.c: 116: else if(!RA3 && !RA4 && !RA5 && !RE0 && RE1)
  1187  03B8  1D85               	btfss	5,3	;volatile
  1188  03B9  1A05               	btfsc	5,4	;volatile
  1189  03BA  2AB5               	goto	l2563
  1190  03BB  1E85               	btfss	5,5	;volatile
  1191  03BC  1809               	btfsc	9,0	;volatile
  1192  03BD  2AB5               	goto	l2563
  1193  03BE  1C89               	btfss	9,1	;volatile
  1194  03BF  2AB5               	goto	l2563
  1195                           
  1196                           ;main.c: 117: {
  1197                           ;main.c: 118: motor(80, 0);
  1198  03C0  01AA               	clrf	motor@speedRM
  1199  03C1  3050               	movlw	80
  1200  03C2  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1201  03C7  2AB5               	goto	l2563
  1202  03C8                     l220:	
  1203                           ;main.c: 119: }
  1204                           ;main.c: 120: }
  1205                           ;main.c: 121: }
  1206                           ;main.c: 122: }
  1207                           ;main.c: 124: while(1)
  1208                           
  1209                           
  1210                           ;main.c: 125: {
  1211                           ;main.c: 126: if(!RA4 && RA5 && !RE0)
  1212  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  1213  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  1214  03CA  1E05               	btfss	5,4	;volatile
  1215  03CB  1E85               	btfss	5,5	;volatile
  1216  03CC  2BD1               	goto	l221
  1217  03CD  1809               	btfsc	9,0	;volatile
  1218  03CE  2BD1               	goto	l221
  1219                           
  1220                           ;main.c: 127: {
  1221                           ;main.c: 128: motor(70, 70);
  1222  03CF  3046               	movlw	70
  1223  03D0  2BF4               	goto	L6
  1224  03D1                     l221:	
  1225                           ;main.c: 129: }
  1226                           
  1227                           
  1228                           ;main.c: 130: else if(RA4 && RA5 && !RE0)
  1229  03D1  1A05               	btfsc	5,4	;volatile
  1230  03D2  1E85               	btfss	5,5	;volatile
  1231  03D3  2BDC               	goto	l223
  1232  03D4  1809               	btfsc	9,0	;volatile
  1233  03D5  2BDC               	goto	l223
  1234                           
  1235                           ;main.c: 131: {
  1236                           ;main.c: 132: motor(40, 70);
  1237  03D6  3046               	movlw	70
  1238  03D7  00B0               	movwf	??_main
  1239  03D8  0830               	movf	??_main,w
  1240  03D9  00AA               	movwf	motor@speedRM
  1241  03DA  3028               	movlw	40
  1242  03DB  2BF8               	goto	L7
  1243  03DC                     l223:	
  1244                           ;main.c: 133: }
  1245                           
  1246                           
  1247                           ;main.c: 134: else if(!RA4 && RA5 && RE0)
  1248  03DC  1E05               	btfss	5,4	;volatile
  1249  03DD  1E85               	btfss	5,5	;volatile
  1250  03DE  2BE3               	goto	l225
  1251  03DF  1C09               	btfss	9,0	;volatile
  1252  03E0  2BE3               	goto	l225
  1253                           
  1254                           ;main.c: 135: {
  1255                           ;main.c: 136: motor(70, 40);
  1256  03E1  3028               	movlw	40
  1257  03E2  2BF4               	goto	L6
  1258  03E3                     l225:	
  1259                           ;main.c: 137: }
  1260                           
  1261                           
  1262                           ;main.c: 138: else if(RA4 && !RA5 && !RE0)
  1263  03E3  1A05               	btfsc	5,4	;volatile
  1264  03E4  1A85               	btfsc	5,5	;volatile
  1265  03E5  2BEE               	goto	l227
  1266  03E6  1809               	btfsc	9,0	;volatile
  1267  03E7  2BEE               	goto	l227
  1268                           
  1269                           ;main.c: 139: {
  1270                           ;main.c: 140: motor(30, 70);
  1271  03E8  3046               	movlw	70
  1272  03E9  00B0               	movwf	??_main
  1273  03EA  0830               	movf	??_main,w
  1274  03EB  00AA               	movwf	motor@speedRM
  1275  03EC  301E               	movlw	30
  1276  03ED  2BF8               	goto	L7
  1277  03EE                     l227:	
  1278                           ;main.c: 141: }
  1279                           
  1280                           
  1281                           ;main.c: 142: else if(!RA4 && !RA5 && RE0)
  1282  03EE  1E05               	btfss	5,4	;volatile
  1283  03EF  1A85               	btfsc	5,5	;volatile
  1284  03F0  2BFD               	goto	l2705
  1285  03F1  1C09               	btfss	9,0	;volatile
  1286  03F2  2BFD               	goto	l2705
  1287                           
  1288                           ;main.c: 143: {
  1289                           ;main.c: 144: motor(70, 30);
  1290  03F3  301E               	movlw	30
  1291  03F4                     L6:	
  1292  03F4  00B0               	movwf	??_main
  1293  03F5  0830               	movf	??_main,w
  1294  03F6  00AA               	movwf	motor@speedRM
  1295  03F7  3046               	movlw	70
  1296  03F8                     L7:	
  1297  03F8  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1298  03FD                     l2705:	
  1299                           
  1300                           ;main.c: 145: }
  1301                           ;main.c: 147: if(RE1 && !RA3)
  1302  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  1303  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  1304  03FF  1889               	btfsc	9,1	;volatile
  1305  0400  1985               	btfsc	5,3	;volatile
  1306  0401  2C7C               	goto	l2737
  1307                           
  1308                           ;main.c: 148: {
  1309                           ;main.c: 149: motor(30, 30);
  1310  0402  301E               	movlw	30
  1311  0403  00B0               	movwf	??_main
  1312  0404  0830               	movf	??_main,w
  1313  0405  00AA               	movwf	motor@speedRM
  1314  0406  301E               	movlw	30
  1315  0407  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1316                           
  1317                           ;main.c: 150: for(i = 0; i < 200; i++)
  1318  040C  1283               	bcf	3,5	;RP0=0, select bank0
  1319  040D  1303               	bcf	3,6	;RP1=0, select bank0
  1320  040E  01C8               	clrf	main@i
  1321  040F  01C9               	clrf	main@i+1
  1322  0410  3000               	movlw	0
  1323  0411  0249               	subwf	main@i+1,w
  1324  0412  30C8               	movlw	200
  1325  0413  1903               	skipnz
  1326  0414  0248               	subwf	main@i,w
  1327  0415  1803               	btfsc	3,0
  1328  0416  2C31               	goto	l232
  1329  0417                     l231:	
  1330                           
  1331                           ;main.c: 151: {
  1332                           ;main.c: 152: if(RA3) break;
  1333  0417  1985               	btfsc	5,3	;volatile
  1334  0418  2C31               	goto	l232
  1335                           
  1336                           ;main.c: 153: _delay((unsigned long)((1)*(8000000/4000.0)));
  1337  0419  3003               	movlw	3
  1338  041A  00B1               	movwf	??_main+1
  1339  041B  3097               	movlw	151
  1340  041C  00B0               	movwf	??_main
  1341  041D                     u4247:	
  1342  041D  0BB0               	decfsz	??_main,f
  1343  041E  2C1D               	goto	u4247
  1344  041F  0BB1               	decfsz	??_main+1,f
  1345  0420  2C1D               	goto	u4247
  1346  0421  2C22               	nop2
  1347  0422  3001               	movlw	1
  1348  0423  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0424  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0425  07C8               	addwf	main@i,f
  1351  0426  1803               	skipnc
  1352  0427  0AC9               	incf	main@i+1,f
  1353  0428  3000               	movlw	0
  1354  0429  07C9               	addwf	main@i+1,f
  1355  042A  3000               	movlw	0
  1356  042B  0249               	subwf	main@i+1,w
  1357  042C  30C8               	movlw	200
  1358  042D  1903               	skipnz
  1359  042E  0248               	subwf	main@i,w
  1360  042F  1C03               	skipc
  1361  0430  2C17               	goto	l231
  1362  0431                     l232:	
  1363                           
  1364                           ;main.c: 154: }
  1365                           ;main.c: 155: if(!RA3)
  1366  0431  1985               	btfsc	5,3	;volatile
  1367  0432  2C7C               	goto	l2737
  1368                           
  1369                           ;main.c: 156: {
  1370                           ;main.c: 157: motor(0, 0);
  1371  0433  01AA               	clrf	motor@speedRM
  1372  0434  3000               	movlw	0
  1373  0435  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1374                           
  1375                           ;main.c: 158: _delay((unsigned long)((200)*(8000000/4000.0)));
  1376  043A  3003               	movlw	3
  1377  043B  1283               	bcf	3,5	;RP0=0, select bank0
  1378  043C  1303               	bcf	3,6	;RP1=0, select bank0
  1379  043D  00B2               	movwf	??_main+2
  1380  043E  3008               	movlw	8
  1381  043F  00B1               	movwf	??_main+1
  1382  0440  3078               	movlw	120
  1383  0441  00B0               	movwf	??_main
  1384  0442                     u4257:	
  1385  0442  0BB0               	decfsz	??_main,f
  1386  0443  2C42               	goto	u4257
  1387  0444  0BB1               	decfsz	??_main+1,f
  1388  0445  2C42               	goto	u4257
  1389  0446  0BB2               	decfsz	??_main+2,f
  1390  0447  2C42               	goto	u4257
  1391                           
  1392                           ;main.c: 159: if(!RA5)
  1393  0448  1283               	bcf	3,5	;RP0=0, select bank0
  1394  0449  1303               	bcf	3,6	;RP1=0, select bank0
  1395  044A  1A85               	btfsc	5,5	;volatile
  1396  044B  2C76               	goto	l2735
  1397                           
  1398                           ;main.c: 160: {
  1399                           ;main.c: 161: dir = 'R';
  1400  044C  3052               	movlw	82
  1401  044D  00B0               	movwf	??_main
  1402  044E  0830               	movf	??_main,w
  1403  044F  00D3               	movwf	main@dir
  1404                           
  1405                           ;main.c: 162: motor(30, -30);
  1406  0450  30E2               	movlw	-30
  1407  0451  00B0               	movwf	??_main
  1408  0452  0830               	movf	??_main,w
  1409  0453  00AA               	movwf	motor@speedRM
  1410  0454  301E               	movlw	30
  1411  0455  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1412  045A                     l236:	
  1413                           ;main.c: 163: while(!RE1);
  1414                           
  1415  045A  1283               	bcf	3,5	;RP0=0, select bank0
  1416  045B  1303               	bcf	3,6	;RP1=0, select bank0
  1417  045C  1C89               	btfss	9,1	;volatile
  1418  045D  2C5A               	goto	l236
  1419  045E                     l239:	
  1420                           ;main.c: 165: while(!RE0);
  1421                           
  1422  045E  1C09               	btfss	9,0	;volatile
  1423  045F  2C5E               	goto	l239
  1424                           
  1425                           ;main.c: 166: motor(0, 0);
  1426  0460  01AA               	clrf	motor@speedRM
  1427  0461  3000               	movlw	0
  1428  0462  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1429                           
  1430                           ;main.c: 167: _delay((unsigned long)((200)*(8000000/4000.0)));
  1431  0467  3003               	movlw	3
  1432  0468  1283               	bcf	3,5	;RP0=0, select bank0
  1433  0469  1303               	bcf	3,6	;RP1=0, select bank0
  1434  046A  00B2               	movwf	??_main+2
  1435  046B  3008               	movlw	8
  1436  046C  00B1               	movwf	??_main+1
  1437  046D  3078               	movlw	120
  1438  046E  00B0               	movwf	??_main
  1439  046F                     u4267:	
  1440  046F  0BB0               	decfsz	??_main,f
  1441  0470  2C6F               	goto	u4267
  1442  0471  0BB1               	decfsz	??_main+1,f
  1443  0472  2C6F               	goto	u4267
  1444  0473  0BB2               	decfsz	??_main+2,f
  1445  0474  2C6F               	goto	u4267
  1446                           
  1447                           ;main.c: 168: }
  1448  0475  2C7C               	goto	l2737
  1449  0476                     l2735:	
  1450                           
  1451                           ;main.c: 169: else dir = 'S';
  1452  0476  3053               	movlw	83
  1453  0477  1283               	bcf	3,5	;RP0=0, select bank0
  1454  0478  1303               	bcf	3,6	;RP1=0, select bank0
  1455  0479  00B0               	movwf	??_main
  1456  047A  0830               	movf	??_main,w
  1457  047B  00D3               	movwf	main@dir
  1458  047C                     l2737:	
  1459                           
  1460                           ;main.c: 170: }
  1461                           ;main.c: 171: }
  1462                           ;main.c: 172: if(RA3)
  1463  047C  1283               	bcf	3,5	;RP0=0, select bank0
  1464  047D  1303               	bcf	3,6	;RP1=0, select bank0
  1465  047E  1D85               	btfss	5,3	;volatile
  1466  047F  2CDA               	goto	l2751
  1467                           
  1468                           ;main.c: 173: {
  1469                           ;main.c: 174: motor(30, 30);
  1470  0480  301E               	movlw	30
  1471  0481  00B0               	movwf	??_main
  1472  0482  0830               	movf	??_main,w
  1473  0483  00AA               	movwf	motor@speedRM
  1474  0484  301E               	movlw	30
  1475  0485  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1476                           
  1477                           ;main.c: 175: _delay((unsigned long)((200)*(8000000/4000.0)));
  1478  048A  3003               	movlw	3
  1479  048B  1283               	bcf	3,5	;RP0=0, select bank0
  1480  048C  1303               	bcf	3,6	;RP1=0, select bank0
  1481  048D  00B2               	movwf	??_main+2
  1482  048E  3008               	movlw	8
  1483  048F  00B1               	movwf	??_main+1
  1484  0490  3078               	movlw	120
  1485  0491  00B0               	movwf	??_main
  1486  0492                     u4277:	
  1487  0492  0BB0               	decfsz	??_main,f
  1488  0493  2C92               	goto	u4277
  1489  0494  0BB1               	decfsz	??_main+1,f
  1490  0495  2C92               	goto	u4277
  1491  0496  0BB2               	decfsz	??_main+2,f
  1492  0497  2C92               	goto	u4277
  1493                           
  1494                           ;main.c: 176: motor(0, 0);
  1495  0498  1283               	bcf	3,5	;RP0=0, select bank0
  1496  0499  1303               	bcf	3,6	;RP1=0, select bank0
  1497  049A  01AA               	clrf	motor@speedRM
  1498  049B  3000               	movlw	0
  1499  049C  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1500                           
  1501                           ;main.c: 177: _delay((unsigned long)((200)*(8000000/4000.0)));
  1502  04A1  3003               	movlw	3
  1503  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  1504  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  1505  04A4  00B2               	movwf	??_main+2
  1506  04A5  3008               	movlw	8
  1507  04A6  00B1               	movwf	??_main+1
  1508  04A7  3078               	movlw	120
  1509  04A8  00B0               	movwf	??_main
  1510  04A9                     u4287:	
  1511  04A9  0BB0               	decfsz	??_main,f
  1512  04AA  2CA9               	goto	u4287
  1513  04AB  0BB1               	decfsz	??_main+1,f
  1514  04AC  2CA9               	goto	u4287
  1515  04AD  0BB2               	decfsz	??_main+2,f
  1516  04AE  2CA9               	goto	u4287
  1517                           
  1518                           ;main.c: 178: dir = 'L';
  1519  04AF  304C               	movlw	76
  1520  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  1521  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  1522  04B2  00B0               	movwf	??_main
  1523  04B3  0830               	movf	??_main,w
  1524  04B4  00D3               	movwf	main@dir
  1525                           
  1526                           ;main.c: 179: motor(-30, 30);
  1527  04B5  301E               	movlw	30
  1528  04B6  00B0               	movwf	??_main
  1529  04B7  0830               	movf	??_main,w
  1530  04B8  00AA               	movwf	motor@speedRM
  1531  04B9  30E2               	movlw	-30
  1532  04BA  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1533  04BF                     l244:	
  1534                           ;main.c: 180: while(!RA3);
  1535                           
  1536  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  1537  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  1538  04C1  1D85               	btfss	5,3	;volatile
  1539  04C2  2CBF               	goto	l244
  1540  04C3                     l247:	
  1541                           ;main.c: 182: while(!RA4);
  1542                           
  1543  04C3  1E05               	btfss	5,4	;volatile
  1544  04C4  2CC3               	goto	l247
  1545                           
  1546                           ;main.c: 183: motor(0, 0);
  1547  04C5  01AA               	clrf	motor@speedRM
  1548  04C6  3000               	movlw	0
  1549  04C7  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1550                           
  1551                           ;main.c: 184: _delay((unsigned long)((200)*(8000000/4000.0)));
  1552  04CC  3003               	movlw	3
  1553  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  1554  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  1555  04CF  00B2               	movwf	??_main+2
  1556  04D0  3008               	movlw	8
  1557  04D1  00B1               	movwf	??_main+1
  1558  04D2  3078               	movlw	120
  1559  04D3  00B0               	movwf	??_main
  1560  04D4                     u4297:	
  1561  04D4  0BB0               	decfsz	??_main,f
  1562  04D5  2CD4               	goto	u4297
  1563  04D6  0BB1               	decfsz	??_main+1,f
  1564  04D7  2CD4               	goto	u4297
  1565  04D8  0BB2               	decfsz	??_main+2,f
  1566  04D9  2CD4               	goto	u4297
  1567  04DA                     l2751:	
  1568                           
  1569                           ;main.c: 185: }
  1570                           ;main.c: 187: if(!RA3 && !RA4 && !RA5 && !RE0 && !RE1)
  1571  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1572  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1573  04DC  1D85               	btfss	5,3	;volatile
  1574  04DD  1A05               	btfsc	5,4	;volatile
  1575  04DE  2D24               	goto	l2771
  1576  04DF  1E85               	btfss	5,5	;volatile
  1577  04E0  1809               	btfsc	9,0	;volatile
  1578  04E1  2D24               	goto	l2771
  1579  04E2  1889               	btfsc	9,1	;volatile
  1580  04E3  2D24               	goto	l2771
  1581                           
  1582                           ;main.c: 188: {
  1583                           ;main.c: 189: motor(0, 0);
  1584  04E4  01AA               	clrf	motor@speedRM
  1585  04E5  3000               	movlw	0
  1586  04E6  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1587                           
  1588                           ;main.c: 190: _delay((unsigned long)((200)*(8000000/4000.0)));
  1589  04EB  3003               	movlw	3
  1590  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  1591  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  1592  04EE  00B2               	movwf	??_main+2
  1593  04EF  3008               	movlw	8
  1594  04F0  00B1               	movwf	??_main+1
  1595  04F1  3078               	movlw	120
  1596  04F2  00B0               	movwf	??_main
  1597  04F3                     u4307:	
  1598  04F3  0BB0               	decfsz	??_main,f
  1599  04F4  2CF3               	goto	u4307
  1600  04F5  0BB1               	decfsz	??_main+1,f
  1601  04F6  2CF3               	goto	u4307
  1602  04F7  0BB2               	decfsz	??_main+2,f
  1603  04F8  2CF3               	goto	u4307
  1604                           
  1605                           ;main.c: 191: dir = 'B';
  1606  04F9  3042               	movlw	66
  1607  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1608  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  1609  04FC  00B0               	movwf	??_main
  1610  04FD  0830               	movf	??_main,w
  1611  04FE  00D3               	movwf	main@dir
  1612                           
  1613                           ;main.c: 192: motor(30, -30);
  1614  04FF  30E2               	movlw	-30
  1615  0500  00B0               	movwf	??_main
  1616  0501  0830               	movf	??_main,w
  1617  0502  00AA               	movwf	motor@speedRM
  1618  0503  301E               	movlw	30
  1619  0504  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1620  0509                     l251:	
  1621                           ;main.c: 193: while(!RE1);
  1622                           
  1623  0509  1283               	bcf	3,5	;RP0=0, select bank0
  1624  050A  1303               	bcf	3,6	;RP1=0, select bank0
  1625  050B  1C89               	btfss	9,1	;volatile
  1626  050C  2D09               	goto	l251
  1627  050D                     l254:	
  1628                           ;main.c: 195: while(!RE0);
  1629                           
  1630  050D  1C09               	btfss	9,0	;volatile
  1631  050E  2D0D               	goto	l254
  1632                           
  1633                           ;main.c: 196: motor(0, 0);
  1634  050F  01AA               	clrf	motor@speedRM
  1635  0510  3000               	movlw	0
  1636  0511  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1637                           
  1638                           ;main.c: 197: _delay((unsigned long)((200)*(8000000/4000.0)));
  1639  0516  3003               	movlw	3
  1640  0517  1283               	bcf	3,5	;RP0=0, select bank0
  1641  0518  1303               	bcf	3,6	;RP1=0, select bank0
  1642  0519  00B2               	movwf	??_main+2
  1643  051A  3008               	movlw	8
  1644  051B  00B1               	movwf	??_main+1
  1645  051C  3078               	movlw	120
  1646  051D  00B0               	movwf	??_main
  1647  051E                     u4317:	
  1648  051E  0BB0               	decfsz	??_main,f
  1649  051F  2D1E               	goto	u4317
  1650  0520  0BB1               	decfsz	??_main+1,f
  1651  0521  2D1E               	goto	u4317
  1652  0522  0BB2               	decfsz	??_main+2,f
  1653  0523  2D1E               	goto	u4317
  1654  0524                     l2771:	
  1655                           
  1656                           ;main.c: 198: }
  1657                           ;main.c: 200: if(RA3 && RA4 && RA5 && RE0 && RE1)
  1658  0524  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0525  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0526  1985               	btfsc	5,3	;volatile
  1661  0527  1E05               	btfss	5,4	;volatile
  1662  0528  2D66               	goto	l2789
  1663  0529  1A85               	btfsc	5,5	;volatile
  1664  052A  1C09               	btfss	9,0	;volatile
  1665  052B  2D66               	goto	l2789
  1666  052C  1C89               	btfss	9,1	;volatile
  1667  052D  2D66               	goto	l2789
  1668                           
  1669                           ;main.c: 201: {
  1670                           ;main.c: 202: motor(0, 0);
  1671  052E  01AA               	clrf	motor@speedRM
  1672  052F  3000               	movlw	0
  1673  0530  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  1674                           
  1675                           ;main.c: 203: beep(3, 300);
  1676  0535  302C               	movlw	44
  1677  0536  00F0               	movwf	beep@delayMs
  1678  0537  3001               	movlw	1
  1679  0538  00F1               	movwf	beep@delayMs+1
  1680  0539  3003               	movlw	3
  1681  053A  120A  118A  2008   	fcall	_beep
      +       120A  118A         
  1682                           
  1683                           ;main.c: 204: pathTotal = pathLength;
  1684  053F  1283               	bcf	3,5	;RP0=0, select bank0
  1685  0540  1303               	bcf	3,6	;RP1=0, select bank0
  1686  0541  0854               	movf	main@pathLength,w
  1687  0542  00B0               	movwf	??_main
  1688  0543  0830               	movf	??_main,w
  1689  0544  00CA               	movwf	main@pathTotal
  1690                           
  1691                           ;main.c: 205: lcdGoto(1, 6);
  1692  0545  3006               	movlw	6
  1693  0546  00B0               	movwf	??_main
  1694  0547  0830               	movf	??_main,w
  1695  0548  00F3               	movwf	lcdGoto@col
  1696  0549  3001               	movlw	1
  1697  054A  120A  158A  25B5   	fcall	_lcdGoto
      +       120A  118A         
  1698                           
  1699                           ;main.c: 206: lcdNumber(pathTotal, 10, 2);
  1700  054F  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0550  1303               	bcf	3,6	;RP1=0, select bank0
  1702  0551  084A               	movf	main@pathTotal,w
  1703  0552  00B0               	movwf	??_main
  1704  0553  01B1               	clrf	??_main+1
  1705  0554  0830               	movf	??_main,w
  1706  0555  00F8               	movwf	lcdNumber@no
  1707  0556  0831               	movf	??_main+1,w
  1708  0557  00F9               	movwf	lcdNumber@no+1
  1709  0558  300A               	movlw	10
  1710  0559  00B2               	movwf	??_main+2
  1711  055A  0832               	movf	??_main+2,w
  1712  055B  00FA               	movwf	lcdNumber@base
  1713  055C  3002               	movlw	2
  1714  055D  00B3               	movwf	??_main+3
  1715  055E  0833               	movf	??_main+3,w
  1716  055F  00FB               	movwf	lcdNumber@digit
  1717  0560  120A  118A  20C9   	fcall	_lcdNumber
      +       120A  118A         
  1718                           
  1719                           ;main.c: 207: break;
  1720  0565  2EA6               	goto	l279
  1721  0566                     l2789:	
  1722                           
  1723                           ;main.c: 208: }
  1724                           ;main.c: 210: if(dir)
  1725  0566  1283               	bcf	3,5	;RP0=0, select bank0
  1726  0567  1303               	bcf	3,6	;RP1=0, select bank0
  1727  0568  0853               	movf	main@dir,w
  1728  0569  1903               	btfsc	3,2
  1729  056A  2BC8               	goto	l220
  1730                           
  1731                           ;main.c: 211: {
  1732                           ;main.c: 212: if(dir == 'B')
  1733  056B  0853               	movf	main@dir,w
  1734  056C  3A42               	xorlw	66
  1735  056D  1D03               	skipz
  1736  056E  2D95               	goto	l2805
  1737                           
  1738                           ;main.c: 213: {
  1739                           ;main.c: 214: simplified = 1;
  1740  056F  01CB               	clrf	main@simplified
  1741  0570  0ACB               	incf	main@simplified,f
  1742                           
  1743                           ;main.c: 215: string[1] = dir;
  1744  0571  0853               	movf	main@dir,w
  1745  0572  00B0               	movwf	??_main
  1746  0573  0830               	movf	??_main,w
  1747  0574  00CD               	movwf	main@string+1
  1748                           
  1749                           ;main.c: 216: lcdGoto(2, pathLength+1);
  1750  0575  0854               	movf	main@pathLength,w
  1751  0576  3E01               	addlw	1
  1752  0577  00B0               	movwf	??_main
  1753  0578  0830               	movf	??_main,w
  1754  0579  00F3               	movwf	lcdGoto@col
  1755  057A  3002               	movlw	2
  1756  057B  120A  158A  25B5   	fcall	_lcdGoto
      +       120A  118A         
  1757                           
  1758                           ;main.c: 217: lcdWrite(1, dir);
  1759  0580  1283               	bcf	3,5	;RP0=0, select bank0
  1760  0581  1303               	bcf	3,6	;RP1=0, select bank0
  1761  0582  0853               	movf	main@dir,w
  1762  0583  00B0               	movwf	??_main
  1763  0584  0830               	movf	??_main,w
  1764  0585  00F0               	movwf	lcdWrite@data
  1765  0586  3001               	movlw	1
  1766  0587  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
  1767                           
  1768                           ;main.c: 218: string[0] = path[--pathLength];
  1769  058C  3001               	movlw	1
  1770  058D  1283               	bcf	3,5	;RP0=0, select bank0
  1771  058E  1303               	bcf	3,6	;RP1=0, select bank0
  1772  058F  02D4               	subwf	main@pathLength,f
  1773  0590  0854               	movf	main@pathLength,w
  1774  0591  3E34               	addlw	main@path& (0+255)
  1775  0592  0084               	movwf	4
  1776  0593  1383               	bcf	3,7	;select IRP bank0
  1777  0594  2E6C               	goto	L8
  1778  0595                     l2805:	
  1779                           ;main.c: 220: }
  1780                           
  1781                           ;main.c: 219: dir = 0;
  1782                           
  1783                           
  1784                           ;main.c: 221: else if(simplified)
  1785  0595  084B               	movf	main@simplified,w
  1786  0596  1903               	btfsc	3,2
  1787  0597  2E78               	goto	l2851
  1788                           
  1789                           ;main.c: 222: {
  1790                           ;main.c: 223: string[2] = dir;
  1791  0598  0853               	movf	main@dir,w
  1792  0599  00B0               	movwf	??_main
  1793  059A  0830               	movf	??_main,w
  1794  059B  00CE               	movwf	main@string+2
  1795                           
  1796                           ;main.c: 225: if(!memcmp("LBL", &string, 3)) path[pathLength] = 'S';
  1797  059C  304C               	movlw	main@string& (0+255)
  1798  059D  00B0               	movwf	??_main
  1799  059E  0830               	movf	??_main,w
  1800  059F  00F0               	movwf	memcmp@s2
  1801  05A0  3003               	movlw	3
  1802  05A1  00F1               	movwf	memcmp@n
  1803  05A2  3000               	movlw	0
  1804  05A3  00F2               	movwf	memcmp@n+1
  1805  05A4  3040               	movlw	(STR_8-__stringbase)& (0+255)
  1806  05A5  120A  158A  262C   	fcall	_memcmp
      +       120A  118A         
  1807  05AA  0871               	movf	?_memcmp+1,w
  1808  05AB  0470               	iorwf	?_memcmp,w
  1809  05AC  1D03               	skipz
  1810  05AD  2DB0               	goto	l2813
  1811  05AE  3053               	movlw	83
  1812  05AF  2E17               	goto	L5
  1813  05B0                     l2813:	
  1814                           
  1815                           ;main.c: 226: else if(!memcmp("LBR", &string, 3)) path[pathLength] = 'B';
  1816  05B0  304C               	movlw	main@string& (0+255)
  1817  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  1818  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  1819  05B3  00B0               	movwf	??_main
  1820  05B4  0830               	movf	??_main,w
  1821  05B5  00F0               	movwf	memcmp@s2
  1822  05B6  3003               	movlw	3
  1823  05B7  00F1               	movwf	memcmp@n
  1824  05B8  3000               	movlw	0
  1825  05B9  00F2               	movwf	memcmp@n+1
  1826  05BA  304C               	movlw	(STR_9-__stringbase)& (0+255)
  1827  05BB  120A  158A  262C   	fcall	_memcmp
      +       120A  118A         
  1828  05C0  0871               	movf	?_memcmp+1,w
  1829  05C1  0470               	iorwf	?_memcmp,w
  1830  05C2  1903               	btfsc	3,2
  1831  05C3  2E16               	goto	L11
  1832                           
  1833                           ;main.c: 227: else if(!memcmp("LBS", &string, 3)) path[pathLength] = 'R';
  1834  05C4  304C               	movlw	main@string& (0+255)
  1835  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  1836  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  1837  05C7  00B0               	movwf	??_main
  1838  05C8  0830               	movf	??_main,w
  1839  05C9  00F0               	movwf	memcmp@s2
  1840  05CA  3003               	movlw	3
  1841  05CB  00F1               	movwf	memcmp@n
  1842  05CC  3000               	movlw	0
  1843  05CD  00F2               	movwf	memcmp@n+1
  1844  05CE  3050               	movlw	(STR_10-__stringbase)& (0+255)
  1845  05CF  120A  158A  262C   	fcall	_memcmp
      +       120A  118A         
  1846  05D4  0871               	movf	?_memcmp+1,w
  1847  05D5  0470               	iorwf	?_memcmp,w
  1848  05D6  1903               	btfsc	3,2
  1849  05D7  2E00               	goto	L12
  1850                           
  1851                           ;main.c: 228: else if(!memcmp("RBL", &string, 3)) path[pathLength] = 'B';
  1852  05D8  304C               	movlw	main@string& (0+255)
  1853  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  1854  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  1855  05DB  00B0               	movwf	??_main
  1856  05DC  0830               	movf	??_main,w
  1857  05DD  00F0               	movwf	memcmp@s2
  1858  05DE  3003               	movlw	3
  1859  05DF  00F1               	movwf	memcmp@n
  1860  05E0  3000               	movlw	0
  1861  05E1  00F2               	movwf	memcmp@n+1
  1862  05E2  3044               	movlw	(STR_11-__stringbase)& (0+255)
  1863  05E3  120A  158A  262C   	fcall	_memcmp
      +       120A  118A         
  1864  05E8  0871               	movf	?_memcmp+1,w
  1865  05E9  0470               	iorwf	?_memcmp,w
  1866  05EA  1903               	btfsc	3,2
  1867  05EB  2E16               	goto	L11
  1868                           
  1869                           ;main.c: 229: else if(!memcmp("SBL", &string, 3)) path[pathLength] = 'R';
  1870  05EC  304C               	movlw	main@string& (0+255)
  1871  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1872  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1873  05EF  00B0               	movwf	??_main
  1874  05F0  0830               	movf	??_main,w
  1875  05F1  00F0               	movwf	memcmp@s2
  1876  05F2  3003               	movlw	3
  1877  05F3  00F1               	movwf	memcmp@n
  1878  05F4  3000               	movlw	0
  1879  05F5  00F2               	movwf	memcmp@n+1
  1880  05F6  3048               	movlw	(STR_12-__stringbase)& (0+255)
  1881  05F7  120A  158A  262C   	fcall	_memcmp
      +       120A  118A         
  1882  05FC  0871               	movf	?_memcmp+1,w
  1883  05FD  0470               	iorwf	?_memcmp,w
  1884  05FE  1D03               	skipz
  1885  05FF  2E02               	goto	l2829
  1886  0600                     L12:	
  1887  0600  3052               	movlw	82
  1888  0601  2E17               	goto	L5
  1889  0602                     l2829:	
  1890                           
  1891                           ;main.c: 230: else if(!memcmp("SBS", &string, 3)) path[pathLength] = 'B';
  1892  0602  304C               	movlw	main@string& (0+255)
  1893  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1894  0604  1303               	bcf	3,6	;RP1=0, select bank0
  1895  0605  00B0               	movwf	??_main
  1896  0606  0830               	movf	??_main,w
  1897  0607  00F0               	movwf	memcmp@s2
  1898  0608  3003               	movlw	3
  1899  0609  00F1               	movwf	memcmp@n
  1900  060A  3000               	movlw	0
  1901  060B  00F2               	movwf	memcmp@n+1
  1902  060C  3054               	movlw	(STR_13-__stringbase)& (0+255)
  1903  060D  120A  158A  262C   	fcall	_memcmp
      +       120A  118A         
  1904  0612  0871               	movf	?_memcmp+1,w
  1905  0613  0470               	iorwf	?_memcmp,w
  1906  0614  1D03               	skipz
  1907  0615  2E20               	goto	l2833
  1908  0616                     L11:	
  1909  0616  3042               	movlw	66
  1910  0617                     L5:	
  1911  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0619  00B0               	movwf	??_main
  1914  061A  0854               	movf	main@pathLength,w
  1915  061B  3E34               	addlw	main@path& (0+255)
  1916  061C  0084               	movwf	4
  1917  061D  0830               	movf	??_main,w
  1918  061E  1383               	bcf	3,7	;select IRP bank0
  1919  061F  0080               	movwf	0
  1920  0620                     l2833:	
  1921                           
  1922                           ;main.c: 232: lcdGoto(2, pathLength+1);
  1923  0620  1283               	bcf	3,5	;RP0=0, select bank0
  1924  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1925  0622  0854               	movf	main@pathLength,w
  1926  0623  3E01               	addlw	1
  1927  0624  00B0               	movwf	??_main
  1928  0625  0830               	movf	??_main,w
  1929  0626  00F3               	movwf	lcdGoto@col
  1930  0627  3002               	movlw	2
  1931  0628  120A  158A  25B5   	fcall	_lcdGoto
      +       120A  118A         
  1932                           
  1933                           ;main.c: 233: lcdWrite(1, path[pathLength]);
  1934  062D  1283               	bcf	3,5	;RP0=0, select bank0
  1935  062E  1303               	bcf	3,6	;RP1=0, select bank0
  1936  062F  0854               	movf	main@pathLength,w
  1937  0630  3E34               	addlw	main@path& (0+255)
  1938  0631  0084               	movwf	4
  1939  0632  1383               	bcf	3,7	;select IRP bank0
  1940  0633  0800               	movf	0,w
  1941  0634  00B0               	movwf	??_main
  1942  0635  0830               	movf	??_main,w
  1943  0636  00F0               	movwf	lcdWrite@data
  1944  0637  3001               	movlw	1
  1945  0638  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
  1946                           
  1947                           ;main.c: 234: lcdGoto(2, pathLength+2);
  1948  063D  1283               	bcf	3,5	;RP0=0, select bank0
  1949  063E  1303               	bcf	3,6	;RP1=0, select bank0
  1950  063F  0854               	movf	main@pathLength,w
  1951  0640  3E02               	addlw	2
  1952  0641  00B0               	movwf	??_main
  1953  0642  0830               	movf	??_main,w
  1954  0643  00F3               	movwf	lcdGoto@col
  1955  0644  3002               	movlw	2
  1956  0645  120A  158A  25B5   	fcall	_lcdGoto
      +       120A  118A         
  1957                           
  1958                           ;main.c: 235: lcdWrite(1, ' ');
  1959  064A  3020               	movlw	32
  1960  064B  1283               	bcf	3,5	;RP0=0, select bank0
  1961  064C  1303               	bcf	3,6	;RP1=0, select bank0
  1962  064D  00B0               	movwf	??_main
  1963  064E  0830               	movf	??_main,w
  1964  064F  00F0               	movwf	lcdWrite@data
  1965  0650  3001               	movlw	1
  1966  0651  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
  1967                           
  1968                           ;main.c: 237: if(path[pathLength] == 'B')
  1969  0656  1283               	bcf	3,5	;RP0=0, select bank0
  1970  0657  1303               	bcf	3,6	;RP1=0, select bank0
  1971  0658  0854               	movf	main@pathLength,w
  1972  0659  3E34               	addlw	main@path& (0+255)
  1973  065A  0084               	movwf	4
  1974  065B  1383               	bcf	3,7	;select IRP bank0
  1975  065C  0800               	movf	0,w
  1976  065D  3A42               	xorlw	66
  1977  065E  1D03               	skipz
  1978  065F  2E71               	goto	l2845
  1979                           
  1980                           ;main.c: 238: {
  1981                           ;main.c: 239: string[1] = path[pathLength];
  1982  0660  0854               	movf	main@pathLength,w
  1983  0661  3E34               	addlw	main@path& (0+255)
  1984  0662  0084               	movwf	4
  1985  0663  0800               	movf	0,w
  1986  0664  00B0               	movwf	??_main
  1987  0665  0830               	movf	??_main,w
  1988  0666  00CD               	movwf	main@string+1
  1989                           
  1990                           ;main.c: 240: string[0] = path[--pathLength];
  1991  0667  3001               	movlw	1
  1992  0668  02D4               	subwf	main@pathLength,f
  1993  0669  0854               	movf	main@pathLength,w
  1994  066A  3E34               	addlw	main@path& (0+255)
  1995  066B  0084               	movwf	4
  1996  066C                     L8:	
  1997  066C  0800               	movf	0,w
  1998  066D  00B0               	movwf	??_main
  1999  066E  0830               	movf	??_main,w
  2000  066F  00CC               	movwf	main@string
  2001                           
  2002                           ;main.c: 241: }
  2003  0670  2E76               	goto	l2849
  2004  0671                     l2845:	
  2005                           
  2006                           ;main.c: 242: else
  2007                           ;main.c: 243: {
  2008                           ;main.c: 244: simplified = 0;
  2009  0671  01CB               	clrf	main@simplified
  2010                           
  2011                           ;main.c: 245: pathLength++;
  2012  0672  3001               	movlw	1
  2013  0673  00B0               	movwf	??_main
  2014  0674  0830               	movf	??_main,w
  2015  0675  07D4               	addwf	main@pathLength,f
  2016  0676                     l2849:	
  2017                           
  2018                           ;main.c: 246: }
  2019                           ;main.c: 247: dir = 0;
  2020  0676  01D3               	clrf	main@dir
  2021                           
  2022                           ;main.c: 248: }
  2023  0677  2EA4               	goto	l2861
  2024  0678                     l2851:	
  2025                           
  2026                           ;main.c: 249: else if(!simplified)
  2027  0678  08CB               	movf	main@simplified,f
  2028  0679  1D03               	skipz
  2029  067A  2EA4               	goto	l2861
  2030                           
  2031                           ;main.c: 250: {
  2032                           ;main.c: 251: path[pathLength] = dir;
  2033  067B  0853               	movf	main@dir,w
  2034  067C  00B0               	movwf	??_main
  2035  067D  0854               	movf	main@pathLength,w
  2036  067E  3E34               	addlw	main@path& (0+255)
  2037  067F  0084               	movwf	4
  2038  0680  0830               	movf	??_main,w
  2039  0681  1383               	bcf	3,7	;select IRP bank0
  2040  0682  0080               	movwf	0
  2041                           
  2042                           ;main.c: 252: lcdGoto(2, pathLength+1);
  2043  0683  0854               	movf	main@pathLength,w
  2044  0684  3E01               	addlw	1
  2045  0685  00B0               	movwf	??_main
  2046  0686  0830               	movf	??_main,w
  2047  0687  00F3               	movwf	lcdGoto@col
  2048  0688  3002               	movlw	2
  2049  0689  120A  158A  25B5   	fcall	_lcdGoto
      +       120A  118A         
  2050                           
  2051                           ;main.c: 253: lcdWrite(1, path[pathLength]);
  2052  068E  1283               	bcf	3,5	;RP0=0, select bank0
  2053  068F  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0690  0854               	movf	main@pathLength,w
  2055  0691  3E34               	addlw	main@path& (0+255)
  2056  0692  0084               	movwf	4
  2057  0693  1383               	bcf	3,7	;select IRP bank0
  2058  0694  0800               	movf	0,w
  2059  0695  00B0               	movwf	??_main
  2060  0696  0830               	movf	??_main,w
  2061  0697  00F0               	movwf	lcdWrite@data
  2062  0698  3001               	movlw	1
  2063  0699  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
  2064                           
  2065                           ;main.c: 254: pathLength++;
  2066  069E  3001               	movlw	1
  2067  069F  1283               	bcf	3,5	;RP0=0, select bank0
  2068  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  2069  06A1  00B0               	movwf	??_main
  2070  06A2  0830               	movf	??_main,w
  2071  06A3  07D4               	addwf	main@pathLength,f
  2072  06A4                     l2861:	
  2073                           
  2074                           ;main.c: 255: }
  2075                           ;main.c: 256: dir = 0;
  2076  06A4  01D3               	clrf	main@dir
  2077  06A5  2BC8               	goto	l220
  2078  06A6                     l279:	
  2079                           ;main.c: 257: }
  2080                           ;main.c: 258: }
  2081                           ;main.c: 260: while(1)
  2082                           
  2083                           
  2084                           ;main.c: 261: {
  2085                           ;main.c: 262: if(!RB0)
  2086  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  2087  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  2088  06A8  1806               	btfsc	6,0	;volatile
  2089  06A9  2EA6               	goto	l279
  2090                           
  2091                           ;main.c: 263: {
  2092                           ;main.c: 264: pathLength = 0;
  2093  06AA  01D4               	clrf	main@pathLength
  2094                           
  2095                           ;main.c: 265: beep(2, 50);
  2096  06AB  3032               	movlw	50
  2097  06AC  00F0               	movwf	beep@delayMs
  2098  06AD  3000               	movlw	0
  2099  06AE  00F1               	movwf	beep@delayMs+1
  2100  06AF  3002               	movlw	2
  2101  06B0  120A  118A  2008   	fcall	_beep
      +       120A  118A         
  2102                           
  2103                           ;main.c: 266: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2104  06B5  300B               	movlw	11
  2105  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  2106  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  2107  06B8  00B2               	movwf	??_main+2
  2108  06B9  3026               	movlw	38
  2109  06BA  00B1               	movwf	??_main+1
  2110  06BB  3066               	movlw	102
  2111  06BC  00B0               	movwf	??_main
  2112  06BD                     u4327:	
  2113  06BD  0BB0               	decfsz	??_main,f
  2114  06BE  2EBD               	goto	u4327
  2115  06BF  0BB1               	decfsz	??_main+1,f
  2116  06C0  2EBD               	goto	u4327
  2117  06C1  0BB2               	decfsz	??_main+2,f
  2118  06C2  2EBD               	goto	u4327
  2119  06C3  2EC4               	nop2
  2120  06C4                     l2869:	
  2121                           ;main.c: 267: while(1)
  2122                           
  2123                           
  2124                           ;main.c: 268: {
  2125                           ;main.c: 269: if(!RA4 && RA5 && !RE0)
  2126  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  2127  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  2128  06C6  1E05               	btfss	5,4	;volatile
  2129  06C7  1E85               	btfss	5,5	;volatile
  2130  06C8  2ECD               	goto	l282
  2131  06C9  1809               	btfsc	9,0	;volatile
  2132  06CA  2ECD               	goto	l282
  2133                           
  2134                           ;main.c: 270: {
  2135                           ;main.c: 271: motor(70, 70);
  2136  06CB  3046               	movlw	70
  2137  06CC  2EF0               	goto	L9
  2138  06CD                     l282:	
  2139                           ;main.c: 272: }
  2140                           
  2141                           
  2142                           ;main.c: 273: else if(RA4 && RA5 && !RE0)
  2143  06CD  1A05               	btfsc	5,4	;volatile
  2144  06CE  1E85               	btfss	5,5	;volatile
  2145  06CF  2ED8               	goto	l284
  2146  06D0  1809               	btfsc	9,0	;volatile
  2147  06D1  2ED8               	goto	l284
  2148                           
  2149                           ;main.c: 274: {
  2150                           ;main.c: 275: motor(40, 70);
  2151  06D2  3046               	movlw	70
  2152  06D3  00B0               	movwf	??_main
  2153  06D4  0830               	movf	??_main,w
  2154  06D5  00AA               	movwf	motor@speedRM
  2155  06D6  3028               	movlw	40
  2156  06D7  2EF4               	goto	L10
  2157  06D8                     l284:	
  2158                           ;main.c: 276: }
  2159                           
  2160                           
  2161                           ;main.c: 277: else if(!RA4 && RA5 && RE0)
  2162  06D8  1E05               	btfss	5,4	;volatile
  2163  06D9  1E85               	btfss	5,5	;volatile
  2164  06DA  2EDF               	goto	l286
  2165  06DB  1C09               	btfss	9,0	;volatile
  2166  06DC  2EDF               	goto	l286
  2167                           
  2168                           ;main.c: 278: {
  2169                           ;main.c: 279: motor(70, 40);
  2170  06DD  3028               	movlw	40
  2171  06DE  2EF0               	goto	L9
  2172  06DF                     l286:	
  2173                           ;main.c: 280: }
  2174                           
  2175                           
  2176                           ;main.c: 281: else if(RA4 && !RA5 && !RE0)
  2177  06DF  1A05               	btfsc	5,4	;volatile
  2178  06E0  1A85               	btfsc	5,5	;volatile
  2179  06E1  2EEA               	goto	l288
  2180  06E2  1809               	btfsc	9,0	;volatile
  2181  06E3  2EEA               	goto	l288
  2182                           
  2183                           ;main.c: 282: {
  2184                           ;main.c: 283: motor(30, 70);
  2185  06E4  3046               	movlw	70
  2186  06E5  00B0               	movwf	??_main
  2187  06E6  0830               	movf	??_main,w
  2188  06E7  00AA               	movwf	motor@speedRM
  2189  06E8  301E               	movlw	30
  2190  06E9  2EF4               	goto	L10
  2191  06EA                     l288:	
  2192                           ;main.c: 284: }
  2193                           
  2194                           
  2195                           ;main.c: 285: else if(!RA4 && !RA5 && RE0)
  2196  06EA  1E05               	btfss	5,4	;volatile
  2197  06EB  1A85               	btfsc	5,5	;volatile
  2198  06EC  2EF9               	goto	l2901
  2199  06ED  1C09               	btfss	9,0	;volatile
  2200  06EE  2EF9               	goto	l2901
  2201                           
  2202                           ;main.c: 286: {
  2203                           ;main.c: 287: motor(70, 30);
  2204  06EF  301E               	movlw	30
  2205  06F0                     L9:	
  2206  06F0  00B0               	movwf	??_main
  2207  06F1  0830               	movf	??_main,w
  2208  06F2  00AA               	movwf	motor@speedRM
  2209  06F3  3046               	movlw	70
  2210  06F4                     L10:	
  2211  06F4  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2212  06F9                     l2901:	
  2213                           
  2214                           ;main.c: 288: }
  2215                           ;main.c: 290: if(pathLength < pathTotal)
  2216  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  2217  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  2218  06FB  084A               	movf	main@pathTotal,w
  2219  06FC  0254               	subwf	main@pathLength,w
  2220  06FD  1803               	skipnc
  2221  06FE  2FE2               	goto	l2943
  2222                           
  2223                           ;main.c: 291: {
  2224                           ;main.c: 292: if(RA3 || RE1)
  2225  06FF  1985               	btfsc	5,3	;volatile
  2226  0700  2F03               	goto	l2907
  2227  0701  1C89               	btfss	9,1	;volatile
  2228  0702  2FE2               	goto	l2943
  2229  0703                     l2907:	
  2230                           
  2231                           ;main.c: 293: {
  2232                           ;main.c: 294: if(path[pathLength] == 'L')
  2233  0703  0854               	movf	main@pathLength,w
  2234  0704  3E34               	addlw	main@path& (0+255)
  2235  0705  0084               	movwf	4
  2236  0706  1383               	bcf	3,7	;select IRP bank0
  2237  0707  0800               	movf	0,w
  2238  0708  3A4C               	xorlw	76
  2239  0709  1D03               	skipz
  2240  070A  2F62               	goto	l2921
  2241                           
  2242                           ;main.c: 295: {
  2243                           ;main.c: 296: motor(30, 30);
  2244  070B  301E               	movlw	30
  2245  070C  00B0               	movwf	??_main
  2246  070D  0830               	movf	??_main,w
  2247  070E  00AA               	movwf	motor@speedRM
  2248  070F  301E               	movlw	30
  2249  0710  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2250                           
  2251                           ;main.c: 297: _delay((unsigned long)((200)*(8000000/4000.0)));
  2252  0715  3003               	movlw	3
  2253  0716  1283               	bcf	3,5	;RP0=0, select bank0
  2254  0717  1303               	bcf	3,6	;RP1=0, select bank0
  2255  0718  00B2               	movwf	??_main+2
  2256  0719  3008               	movlw	8
  2257  071A  00B1               	movwf	??_main+1
  2258  071B  3078               	movlw	120
  2259  071C  00B0               	movwf	??_main
  2260  071D                     u4337:	
  2261  071D  0BB0               	decfsz	??_main,f
  2262  071E  2F1D               	goto	u4337
  2263  071F  0BB1               	decfsz	??_main+1,f
  2264  0720  2F1D               	goto	u4337
  2265  0721  0BB2               	decfsz	??_main+2,f
  2266  0722  2F1D               	goto	u4337
  2267                           
  2268                           ;main.c: 298: motor(0, 0);
  2269  0723  1283               	bcf	3,5	;RP0=0, select bank0
  2270  0724  1303               	bcf	3,6	;RP1=0, select bank0
  2271  0725  01AA               	clrf	motor@speedRM
  2272  0726  3000               	movlw	0
  2273  0727  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2274                           
  2275                           ;main.c: 299: _delay((unsigned long)((200)*(8000000/4000.0)));
  2276  072C  3003               	movlw	3
  2277  072D  1283               	bcf	3,5	;RP0=0, select bank0
  2278  072E  1303               	bcf	3,6	;RP1=0, select bank0
  2279  072F  00B2               	movwf	??_main+2
  2280  0730  3008               	movlw	8
  2281  0731  00B1               	movwf	??_main+1
  2282  0732  3078               	movlw	120
  2283  0733  00B0               	movwf	??_main
  2284  0734                     u4347:	
  2285  0734  0BB0               	decfsz	??_main,f
  2286  0735  2F34               	goto	u4347
  2287  0736  0BB1               	decfsz	??_main+1,f
  2288  0737  2F34               	goto	u4347
  2289  0738  0BB2               	decfsz	??_main+2,f
  2290  0739  2F34               	goto	u4347
  2291                           
  2292                           ;main.c: 300: motor(-30, 30);
  2293  073A  301E               	movlw	30
  2294  073B  1283               	bcf	3,5	;RP0=0, select bank0
  2295  073C  1303               	bcf	3,6	;RP1=0, select bank0
  2296  073D  00B0               	movwf	??_main
  2297  073E  0830               	movf	??_main,w
  2298  073F  00AA               	movwf	motor@speedRM
  2299  0740  30E2               	movlw	-30
  2300  0741  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2301  0746                     l296:	
  2302                           ;main.c: 301: while(!RA3);
  2303                           
  2304  0746  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0747  1303               	bcf	3,6	;RP1=0, select bank0
  2306  0748  1D85               	btfss	5,3	;volatile
  2307  0749  2F46               	goto	l296
  2308  074A                     l299:	
  2309                           ;main.c: 303: while(!RA4);
  2310                           
  2311  074A  1E05               	btfss	5,4	;volatile
  2312  074B  2F4A               	goto	l299
  2313                           
  2314                           ;main.c: 304: motor(0, 0);
  2315  074C  01AA               	clrf	motor@speedRM
  2316  074D  3000               	movlw	0
  2317  074E  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2318                           
  2319                           ;main.c: 305: _delay((unsigned long)((200)*(8000000/4000.0)));
  2320  0753  3003               	movlw	3
  2321  0754  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0755  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0756  00B2               	movwf	??_main+2
  2324  0757  3008               	movlw	8
  2325  0758  00B1               	movwf	??_main+1
  2326  0759  3078               	movlw	120
  2327  075A  00B0               	movwf	??_main
  2328  075B                     u4357:	
  2329  075B  0BB0               	decfsz	??_main,f
  2330  075C  2F5B               	goto	u4357
  2331  075D  0BB1               	decfsz	??_main+1,f
  2332  075E  2F5B               	goto	u4357
  2333  075F  0BB2               	decfsz	??_main+2,f
  2334  0760  2F5B               	goto	u4357
  2335                           
  2336                           ;main.c: 306: }
  2337  0761  2FDC               	goto	l2941
  2338  0762                     l2921:	
  2339                           
  2340                           ;main.c: 307: else if(path[pathLength] == 'R')
  2341  0762  1283               	bcf	3,5	;RP0=0, select bank0
  2342  0763  1303               	bcf	3,6	;RP1=0, select bank0
  2343  0764  0854               	movf	main@pathLength,w
  2344  0765  3E34               	addlw	main@path& (0+255)
  2345  0766  0084               	movwf	4
  2346  0767  1383               	bcf	3,7	;select IRP bank0
  2347  0768  0800               	movf	0,w
  2348  0769  3A52               	xorlw	82
  2349  076A  1D03               	skipz
  2350  076B  2FC3               	goto	l2935
  2351                           
  2352                           ;main.c: 308: {
  2353                           ;main.c: 309: motor(30, 30);
  2354  076C  301E               	movlw	30
  2355  076D  00B0               	movwf	??_main
  2356  076E  0830               	movf	??_main,w
  2357  076F  00AA               	movwf	motor@speedRM
  2358  0770  301E               	movlw	30
  2359  0771  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2360                           
  2361                           ;main.c: 310: _delay((unsigned long)((200)*(8000000/4000.0)));
  2362  0776  3003               	movlw	3
  2363  0777  1283               	bcf	3,5	;RP0=0, select bank0
  2364  0778  1303               	bcf	3,6	;RP1=0, select bank0
  2365  0779  00B2               	movwf	??_main+2
  2366  077A  3008               	movlw	8
  2367  077B  00B1               	movwf	??_main+1
  2368  077C  3078               	movlw	120
  2369  077D  00B0               	movwf	??_main
  2370  077E                     u4367:	
  2371  077E  0BB0               	decfsz	??_main,f
  2372  077F  2F7E               	goto	u4367
  2373  0780  0BB1               	decfsz	??_main+1,f
  2374  0781  2F7E               	goto	u4367
  2375  0782  0BB2               	decfsz	??_main+2,f
  2376  0783  2F7E               	goto	u4367
  2377                           
  2378                           ;main.c: 311: motor(0, 0);
  2379  0784  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0785  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0786  01AA               	clrf	motor@speedRM
  2382  0787  3000               	movlw	0
  2383  0788  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2384                           
  2385                           ;main.c: 312: _delay((unsigned long)((200)*(8000000/4000.0)));
  2386  078D  3003               	movlw	3
  2387  078E  1283               	bcf	3,5	;RP0=0, select bank0
  2388  078F  1303               	bcf	3,6	;RP1=0, select bank0
  2389  0790  00B2               	movwf	??_main+2
  2390  0791  3008               	movlw	8
  2391  0792  00B1               	movwf	??_main+1
  2392  0793  3078               	movlw	120
  2393  0794  00B0               	movwf	??_main
  2394  0795                     u4377:	
  2395  0795  0BB0               	decfsz	??_main,f
  2396  0796  2F95               	goto	u4377
  2397  0797  0BB1               	decfsz	??_main+1,f
  2398  0798  2F95               	goto	u4377
  2399  0799  0BB2               	decfsz	??_main+2,f
  2400  079A  2F95               	goto	u4377
  2401                           
  2402                           ;main.c: 313: motor(30, -30);
  2403  079B  30E2               	movlw	-30
  2404  079C  1283               	bcf	3,5	;RP0=0, select bank0
  2405  079D  1303               	bcf	3,6	;RP1=0, select bank0
  2406  079E  00B0               	movwf	??_main
  2407  079F  0830               	movf	??_main,w
  2408  07A0  00AA               	movwf	motor@speedRM
  2409  07A1  301E               	movlw	30
  2410  07A2  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2411  07A7                     l304:	
  2412                           ;main.c: 314: while(!RE1);
  2413                           
  2414  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  2415  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  2416  07A9  1C89               	btfss	9,1	;volatile
  2417  07AA  2FA7               	goto	l304
  2418  07AB                     l307:	
  2419                           ;main.c: 316: while(!RE0);
  2420                           
  2421  07AB  1C09               	btfss	9,0	;volatile
  2422  07AC  2FAB               	goto	l307
  2423                           
  2424                           ;main.c: 317: motor(0, 0);
  2425  07AD  01AA               	clrf	motor@speedRM
  2426  07AE  3000               	movlw	0
  2427  07AF  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2428                           
  2429                           ;main.c: 318: _delay((unsigned long)((200)*(8000000/4000.0)));
  2430  07B4  3003               	movlw	3
  2431  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  2432  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  2433  07B7  00B2               	movwf	??_main+2
  2434  07B8  3008               	movlw	8
  2435  07B9  00B1               	movwf	??_main+1
  2436  07BA  3078               	movlw	120
  2437  07BB  00B0               	movwf	??_main
  2438  07BC                     u4387:	
  2439  07BC  0BB0               	decfsz	??_main,f
  2440  07BD  2FBC               	goto	u4387
  2441  07BE  0BB1               	decfsz	??_main+1,f
  2442  07BF  2FBC               	goto	u4387
  2443  07C0  0BB2               	decfsz	??_main+2,f
  2444  07C1  2FBC               	goto	u4387
  2445                           
  2446                           ;main.c: 319: }
  2447  07C2  2FDC               	goto	l2941
  2448  07C3                     l2935:	
  2449                           
  2450                           ;main.c: 320: else if(path[pathLength] == 'S')
  2451  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  2452  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  2453  07C5  0854               	movf	main@pathLength,w
  2454  07C6  3E34               	addlw	main@path& (0+255)
  2455  07C7  0084               	movwf	4
  2456  07C8  1383               	bcf	3,7	;select IRP bank0
  2457  07C9  0800               	movf	0,w
  2458  07CA  3A53               	xorlw	83
  2459  07CB  1D03               	skipz
  2460  07CC  2FDC               	goto	l2941
  2461                           
  2462                           ;main.c: 321: {
  2463                           ;main.c: 322: motor(30, 30);
  2464  07CD  301E               	movlw	30
  2465  07CE  00B0               	movwf	??_main
  2466  07CF  0830               	movf	??_main,w
  2467  07D0  00AA               	movwf	motor@speedRM
  2468  07D1  301E               	movlw	30
  2469  07D2  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2470  07D7                     l312:	
  2471                           ;main.c: 323: while(RA3 || RE1);
  2472                           
  2473  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  2474  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  2475  07D9  1D85               	btfss	5,3	;volatile
  2476  07DA  1889               	btfsc	9,1	;volatile
  2477  07DB  2FD7               	goto	l312
  2478  07DC                     l2941:	
  2479                           
  2480                           ;main.c: 324: }
  2481                           ;main.c: 325: pathLength++;
  2482  07DC  3001               	movlw	1
  2483  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  2484  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  2485  07DF  00B0               	movwf	??_main
  2486  07E0  0830               	movf	??_main,w
  2487  07E1  07D4               	addwf	main@pathLength,f
  2488  07E2                     l2943:	
  2489                           
  2490                           ;main.c: 326: }
  2491                           ;main.c: 327: }
  2492                           ;main.c: 329: if(RA3 && RA4 && RA5 && RE0 && RE1)
  2493  07E2  1985               	btfsc	5,3	;volatile
  2494  07E3  1E05               	btfss	5,4	;volatile
  2495  07E4  2EC4               	goto	l2869
  2496  07E5  1A85               	btfsc	5,5	;volatile
  2497  07E6  1C09               	btfss	9,0	;volatile
  2498  07E7  2EC4               	goto	l2869
  2499  07E8  1C89               	btfss	9,1	;volatile
  2500  07E9  2EC4               	goto	l2869
  2501                           
  2502                           ;main.c: 330: {
  2503                           ;main.c: 331: motor(0, 0);
  2504  07EA  01AA               	clrf	motor@speedRM
  2505  07EB  3000               	movlw	0
  2506  07EC  120A  118A  2049   	fcall	_motor
      +       120A  118A         
  2507                           
  2508                           ;main.c: 332: beep(10, 50);
  2509  07F1  3032               	movlw	50
  2510  07F2  00F0               	movwf	beep@delayMs
  2511  07F3  3000               	movlw	0
  2512  07F4  00F1               	movwf	beep@delayMs+1
  2513  07F5  300A               	movlw	10
  2514  07F6  120A  118A  2008   	fcall	_beep
      +       120A  118A         
  2515                           
  2516                           ;main.c: 333: break;
  2517  07FB  2EA6               	goto	l279
  2518  07FC                     __end_of_main:	
  2519                           
  2520                           	psect	text1
  2521  0D14                     __ptext1:	
  2522 ;; *************** function _picInit *****************
  2523 ;; Defined at:
  2524 ;;		line 341 in file "main.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;		None               void
  2531 ;; Registers used:
  2532 ;;		wreg, status,2
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2538 ;;      Params:         0       0       0       0       0
  2539 ;;      Locals:         0       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0
  2541 ;;      Totals:         0       0       0       0       0
  2542 ;;Total ram usage:        0 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_main
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           
  2552                           ;psect for function _picInit
  2553  0D14                     _picInit:	
  2554                           
  2555                           ;main.c: 343: IRCF2 = 1;
  2556                           
  2557                           ;incstack = 0
  2558                           ; Regs used in _picInit: [wreg+status,2]
  2559  0D14  1683               	bsf	3,5	;RP0=1, select bank1
  2560  0D15  1303               	bcf	3,6	;RP1=0, select bank1
  2561  0D16  170F               	bsf	15,6	;volatile
  2562                           
  2563                           ;main.c: 344: IRCF1 = 1;
  2564  0D17  168F               	bsf	15,5	;volatile
  2565                           
  2566                           ;main.c: 345: IRCF0 = 1;
  2567  0D18  160F               	bsf	15,4	;volatile
  2568                           
  2569                           ;main.c: 347: ANSEL = 0;
  2570  0D19  1683               	bsf	3,5	;RP0=1, select bank3
  2571  0D1A  1703               	bsf	3,6	;RP1=1, select bank3
  2572  0D1B  0188               	clrf	8	;volatile
  2573                           
  2574                           ;main.c: 348: ANSELH = 0;
  2575  0D1C  0189               	clrf	9	;volatile
  2576                           
  2577                           ;main.c: 350: PORTA = 0;
  2578  0D1D  1283               	bcf	3,5	;RP0=0, select bank0
  2579  0D1E  1303               	bcf	3,6	;RP1=0, select bank0
  2580  0D1F  0185               	clrf	5	;volatile
  2581                           
  2582                           ;main.c: 351: PORTB = 0;
  2583  0D20  0186               	clrf	6	;volatile
  2584                           
  2585                           ;main.c: 352: PORTC = 0;
  2586  0D21  0187               	clrf	7	;volatile
  2587                           
  2588                           ;main.c: 353: PORTD = 0;
  2589  0D22  0188               	clrf	8	;volatile
  2590                           
  2591                           ;main.c: 354: PORTE = 0;
  2592  0D23  0189               	clrf	9	;volatile
  2593                           
  2594                           ;main.c: 356: TRISA = 0b00111000;
  2595  0D24  3038               	movlw	56
  2596  0D25  1683               	bsf	3,5	;RP0=1, select bank1
  2597  0D26  1303               	bcf	3,6	;RP1=0, select bank1
  2598  0D27  0085               	movwf	5	;volatile
  2599                           
  2600                           ;main.c: 357: TRISB = 0b00000011;
  2601  0D28  3003               	movlw	3
  2602  0D29  0086               	movwf	6	;volatile
  2603                           
  2604                           ;main.c: 358: TRISC = 0b10000000;
  2605  0D2A  3080               	movlw	128
  2606  0D2B  0087               	movwf	7	;volatile
  2607                           
  2608                           ;main.c: 359: TRISD = 0b00000000;
  2609  0D2C  0188               	clrf	8	;volatile
  2610                           
  2611                           ;main.c: 360: TRISE = 0b011;
  2612  0D2D  3003               	movlw	3
  2613  0D2E  0089               	movwf	9	;volatile
  2614  0D2F  0008               	return
  2615  0D30                     __end_of_picInit:	
  2616                           
  2617                           	psect	text2
  2618  0049                     __ptext2:	
  2619 ;; *************** function _motor *****************
  2620 ;; Defined at:
  2621 ;;		line 375 in file "main.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  speedLM         1    wreg     char 
  2624 ;;  speedRM         1   10[BANK0 ] char 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  speedLM         1   14[BANK0 ] char 
  2627 ;;  speed           1   15[BANK0 ] unsigned char 
  2628 ;;  maxSpeed        1   13[BANK0 ] unsigned char 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;		None               void
  2631 ;; Registers used:
  2632 ;;		wreg, status,2, status,0, pclath, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2638 ;;      Params:         0       1       0       0       0
  2639 ;;      Locals:         0       3       0       0       0
  2640 ;;      Temps:          0       2       0       0       0
  2641 ;;      Totals:         0       6       0       0       0
  2642 ;;Total ram usage:        6 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    2
  2645 ;; This function calls:
  2646 ;;		___bmul
  2647 ;;		_setPwmRC1
  2648 ;;		_setPwmRC2
  2649 ;; This function is called by:
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           
  2655                           ;psect for function _motor
  2656  0049                     _motor:	
  2657                           
  2658                           ;incstack = 0
  2659                           ; Regs used in _motor: [wreg+status,2+status,0+pclath+cstack]
  2660                           ;motor@speedLM stored from wreg
  2661  0049  1283               	bcf	3,5	;RP0=0, select bank0
  2662  004A  1303               	bcf	3,6	;RP1=0, select bank0
  2663  004B  00AE               	movwf	motor@speedLM
  2664                           
  2665                           ;main.c: 377: uChar speed, maxSpeed = 80;
  2666  004C  3050               	movlw	80
  2667  004D  00AB               	movwf	??_motor
  2668  004E  082B               	movf	??_motor,w
  2669  004F  00AD               	movwf	motor@maxSpeed
  2670                           
  2671                           ;main.c: 379: if(speedLM < 0)
  2672  0050  1FAE               	btfss	motor@speedLM,7
  2673  0051  2863               	goto	l2415
  2674                           
  2675                           ;main.c: 380: {
  2676                           ;main.c: 381: RB4 = 1;
  2677  0052  1606               	bsf	6,4	;volatile
  2678                           
  2679                           ;main.c: 382: RB5 = 0;
  2680  0053  1286               	bcf	6,5	;volatile
  2681                           
  2682                           ;main.c: 383: speed = (-1) * speedLM;
  2683  0054  30FF               	movlw	255
  2684  0055  00AB               	movwf	??_motor
  2685  0056  082B               	movf	??_motor,w
  2686  0057  00F0               	movwf	___bmul@multiplicand
  2687  0058  082E               	movf	motor@speedLM,w
  2688  0059  120A  158A  24E9   	fcall	___bmul
      +       120A  118A         
  2689  005E  1283               	bcf	3,5	;RP0=0, select bank0
  2690  005F  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0060  00AC               	movwf	??_motor+1
  2692  0061  082C               	movf	??_motor+1,w
  2693  0062  2873               	goto	L14
  2694  0063                     l2415:	
  2695                           ;main.c: 384: }
  2696                           
  2697                           
  2698                           ;main.c: 385: else if(speedLM > 0)
  2699  0063  082E               	movf	motor@speedLM,w
  2700  0064  3A80               	xorlw	128
  2701  0065  3E7F               	addlw	-129
  2702  0066  1C03               	skipc
  2703  0067  286B               	goto	l2421
  2704                           
  2705                           ;main.c: 386: {
  2706                           ;main.c: 387: RB4 = 0;
  2707  0068  1206               	bcf	6,4	;volatile
  2708                           
  2709                           ;main.c: 388: RB5 = 1;
  2710  0069  1686               	bsf	6,5	;volatile
  2711  006A  2870               	goto	L17
  2712  006B                     l2421:	
  2713                           ;main.c: 390: }
  2714                           
  2715                           ;main.c: 389: speed = speedLM;
  2716                           
  2717                           
  2718                           ;main.c: 391: else if(!speedLM)
  2719  006B  08AE               	movf	motor@speedLM,f
  2720  006C  1D03               	skipz
  2721  006D  2874               	goto	l338
  2722                           
  2723                           ;main.c: 392: {
  2724                           ;main.c: 393: RB4 = 0;
  2725  006E  1206               	bcf	6,4	;volatile
  2726                           
  2727                           ;main.c: 394: RB5 = 0;
  2728  006F  1286               	bcf	6,5	;volatile
  2729  0070                     L17:	
  2730                           
  2731                           ;main.c: 395: speed = speedLM;
  2732  0070  082E               	movf	motor@speedLM,w
  2733  0071  00AB               	movwf	??_motor
  2734  0072  082B               	movf	??_motor,w
  2735  0073                     L14:	
  2736  0073  00AF               	movwf	motor@speed
  2737  0074                     l338:	
  2738                           
  2739                           ;main.c: 396: }
  2740                           ;main.c: 397: if(speed > maxSpeed) speed = maxSpeed;
  2741  0074  082F               	movf	motor@speed,w
  2742  0075  022D               	subwf	motor@maxSpeed,w
  2743  0076  1803               	skipnc
  2744  0077  287C               	goto	l2429
  2745  0078  082D               	movf	motor@maxSpeed,w
  2746  0079  00AB               	movwf	??_motor
  2747  007A  082B               	movf	??_motor,w
  2748  007B  00AF               	movwf	motor@speed
  2749  007C                     l2429:	
  2750                           
  2751                           ;main.c: 398: setPwmRC1(1000, speed);
  2752  007C  30E8               	movlw	232
  2753  007D  00A6               	movwf	setPwmRC1@freq
  2754  007E  3003               	movlw	3
  2755  007F  00A7               	movwf	setPwmRC1@freq+1
  2756  0080  082F               	movf	motor@speed,w
  2757  0081  00AB               	movwf	??_motor
  2758  0082  01AC               	clrf	??_motor+1
  2759  0083  082B               	movf	??_motor,w
  2760  0084  00A8               	movwf	setPwmRC1@duty
  2761  0085  082C               	movf	??_motor+1,w
  2762  0086  00A9               	movwf	setPwmRC1@duty+1
  2763  0087  120A  158A  272A   	fcall	_setPwmRC1
      +       120A  118A         
  2764                           
  2765                           ;main.c: 400: if(speedRM < 0)
  2766  008C  1283               	bcf	3,5	;RP0=0, select bank0
  2767  008D  1303               	bcf	3,6	;RP1=0, select bank0
  2768  008E  1FAA               	btfss	motor@speedRM,7
  2769  008F  28A1               	goto	l2437
  2770                           
  2771                           ;main.c: 401: {
  2772                           ;main.c: 402: RB2 = 1;
  2773  0090  1506               	bsf	6,2	;volatile
  2774                           
  2775                           ;main.c: 403: RB3 = 0;
  2776  0091  1186               	bcf	6,3	;volatile
  2777                           
  2778                           ;main.c: 404: speed = (-1) * speedRM;
  2779  0092  30FF               	movlw	255
  2780  0093  00AB               	movwf	??_motor
  2781  0094  082B               	movf	??_motor,w
  2782  0095  00F0               	movwf	___bmul@multiplicand
  2783  0096  082A               	movf	motor@speedRM,w
  2784  0097  120A  158A  24E9   	fcall	___bmul
      +       120A  118A         
  2785  009C  1283               	bcf	3,5	;RP0=0, select bank0
  2786  009D  1303               	bcf	3,6	;RP1=0, select bank0
  2787  009E  00AC               	movwf	??_motor+1
  2788  009F  082C               	movf	??_motor+1,w
  2789  00A0  28B1               	goto	L16
  2790  00A1                     l2437:	
  2791                           ;main.c: 405: }
  2792                           
  2793                           
  2794                           ;main.c: 406: else if(speedRM > 0)
  2795  00A1  082A               	movf	motor@speedRM,w
  2796  00A2  3A80               	xorlw	128
  2797  00A3  3E7F               	addlw	-129
  2798  00A4  1C03               	skipc
  2799  00A5  28A9               	goto	l2443
  2800                           
  2801                           ;main.c: 407: {
  2802                           ;main.c: 408: RB2 = 0;
  2803  00A6  1106               	bcf	6,2	;volatile
  2804                           
  2805                           ;main.c: 409: RB3 = 1;
  2806  00A7  1586               	bsf	6,3	;volatile
  2807  00A8  28AE               	goto	L18
  2808  00A9                     l2443:	
  2809                           ;main.c: 411: }
  2810                           
  2811                           ;main.c: 410: speed = speedRM;
  2812                           
  2813                           
  2814                           ;main.c: 412: else if(!speedRM)
  2815  00A9  08AA               	movf	motor@speedRM,f
  2816  00AA  1D03               	skipz
  2817  00AB  28B2               	goto	l344
  2818                           
  2819                           ;main.c: 413: {
  2820                           ;main.c: 414: RB2 = 0;
  2821  00AC  1106               	bcf	6,2	;volatile
  2822                           
  2823                           ;main.c: 415: RB3 = 0;
  2824  00AD  1186               	bcf	6,3	;volatile
  2825  00AE                     L18:	
  2826                           
  2827                           ;main.c: 416: speed = speedRM;
  2828  00AE  082A               	movf	motor@speedRM,w
  2829  00AF  00AB               	movwf	??_motor
  2830  00B0  082B               	movf	??_motor,w
  2831  00B1                     L16:	
  2832  00B1  00AF               	movwf	motor@speed
  2833  00B2                     l344:	
  2834                           
  2835                           ;main.c: 417: }
  2836                           ;main.c: 418: if(speed > maxSpeed) speed = maxSpeed;
  2837  00B2  082F               	movf	motor@speed,w
  2838  00B3  022D               	subwf	motor@maxSpeed,w
  2839  00B4  1803               	skipnc
  2840  00B5  28BA               	goto	l2451
  2841  00B6  082D               	movf	motor@maxSpeed,w
  2842  00B7  00AB               	movwf	??_motor
  2843  00B8  082B               	movf	??_motor,w
  2844  00B9  00AF               	movwf	motor@speed
  2845  00BA                     l2451:	
  2846                           
  2847                           ;main.c: 419: setPwmRC2(1000, speed);
  2848  00BA  30E8               	movlw	232
  2849  00BB  00A6               	movwf	setPwmRC2@freq
  2850  00BC  3003               	movlw	3
  2851  00BD  00A7               	movwf	setPwmRC2@freq+1
  2852  00BE  082F               	movf	motor@speed,w
  2853  00BF  00AB               	movwf	??_motor
  2854  00C0  01AC               	clrf	??_motor+1
  2855  00C1  082B               	movf	??_motor,w
  2856  00C2  00A8               	movwf	setPwmRC2@duty
  2857  00C3  082C               	movf	??_motor+1,w
  2858  00C4  00A9               	movwf	setPwmRC2@duty+1
  2859  00C5  120A  158A  2795   	fcall	_setPwmRC2
  2860  00C8  0008               	return
  2861  00C9                     __end_of_motor:	
  2862                           
  2863                           	psect	text3
  2864  0F95                     __ptext3:	
  2865 ;; *************** function _setPwmRC2 *****************
  2866 ;; Defined at:
  2867 ;;		line 23 in file "pwm.h"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  freq            2    6[BANK0 ] int 
  2870 ;;  duty            2    8[BANK0 ] int 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  a               2   12[COMMON] int 
  2873 ;; Return value:  Size  Location     Type
  2874 ;;		None               void
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0, pclath, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2882 ;;      Params:         0       4       0       0       0
  2883 ;;      Locals:         2       0       0       0       0
  2884 ;;      Temps:          1       0       0       0       0
  2885 ;;      Totals:         3       4       0       0       0
  2886 ;;Total ram usage:        7 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    1
  2889 ;; This function calls:
  2890 ;;		___aldiv
  2891 ;;		___awdiv
  2892 ;;		___wmul
  2893 ;; This function is called by:
  2894 ;;		_motor
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           
  2899                           ;psect for function _setPwmRC2
  2900  0F95                     _setPwmRC2:	
  2901                           
  2902                           ;pwm.h: 25: int a;
  2903                           ;pwm.h: 26: T2CON = 0b00000111;
  2904                           
  2905                           ;incstack = 0
  2906                           ; Regs used in _setPwmRC2: [wreg+status,2+status,0+pclath+cstack]
  2907  0F95  3007               	movlw	7
  2908  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  2910  0F98  0092               	movwf	18	;volatile
  2911                           
  2912                           ;pwm.h: 27: CCP1CON = 0b00001100;
  2913  0F99  300C               	movlw	12
  2914  0F9A  0097               	movwf	23	;volatile
  2915                           
  2916                           ;pwm.h: 28: PR2 = (8000000 / (4 * 16)) / (freq) - 1;
  2917  0F9B  0826               	movf	setPwmRC2@freq,w
  2918  0F9C  00F0               	movwf	___aldiv@divisor
  2919  0F9D  0827               	movf	setPwmRC2@freq+1,w
  2920  0F9E  00F1               	movwf	___aldiv@divisor+1
  2921  0F9F  3000               	movlw	0
  2922  0FA0  1BF1               	btfsc	___aldiv@divisor+1,7
  2923  0FA1  30FF               	movlw	255
  2924  0FA2  00F2               	movwf	___aldiv@divisor+2
  2925  0FA3  00F3               	movwf	___aldiv@divisor+3
  2926  0FA4  3000               	movlw	0
  2927  0FA5  00F7               	movwf	___aldiv@dividend+3
  2928  0FA6  3001               	movlw	1
  2929  0FA7  00F6               	movwf	___aldiv@dividend+2
  2930  0FA8  30E8               	movlw	232
  2931  0FA9  00F5               	movwf	___aldiv@dividend+1
  2932  0FAA  3048               	movlw	72
  2933  0FAB  00F4               	movwf	___aldiv@dividend
  2934  0FAC  120A  118A  214C   	fcall	___aldiv
      +       120A  158A         
  2935  0FB1  0870               	movf	?___aldiv,w
  2936  0FB2  3EFF               	addlw	255
  2937  0FB3  1683               	bsf	3,5	;RP0=1, select bank1
  2938  0FB4  1303               	bcf	3,6	;RP1=0, select bank1
  2939  0FB5  0092               	movwf	18	;volatile
  2940                           
  2941                           ;pwm.h: 29: a = (PR2 + 1) * duty / 25;
  2942  0FB6  3019               	movlw	25
  2943  0FB7  00F6               	movwf	___awdiv@divisor
  2944  0FB8  3000               	movlw	0
  2945  0FB9  00F7               	movwf	___awdiv@divisor+1
  2946  0FBA  0812               	movf	18,w	;volatile
  2947  0FBB  3E01               	addlw	1
  2948  0FBC  00F0               	movwf	___wmul@multiplier
  2949  0FBD  3000               	movlw	0
  2950  0FBE  1803               	skipnc
  2951  0FBF  3001               	movlw	1
  2952  0FC0  00F1               	movwf	___wmul@multiplier+1
  2953  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  2954  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  2955  0FC3  0829               	movf	setPwmRC2@duty+1,w
  2956  0FC4  01F3               	clrf	___wmul@multiplicand+1
  2957  0FC5  07F3               	addwf	___wmul@multiplicand+1,f
  2958  0FC6  0828               	movf	setPwmRC2@duty,w
  2959  0FC7  01F2               	clrf	___wmul@multiplicand
  2960  0FC8  07F2               	addwf	___wmul@multiplicand,f
  2961  0FC9  120A  158A  2530   	fcall	___wmul
      +       120A  158A         
  2962  0FCE  0871               	movf	?___wmul+1,w
  2963  0FCF  01F9               	clrf	___awdiv@dividend+1
  2964  0FD0  07F9               	addwf	___awdiv@dividend+1,f
  2965  0FD1  0870               	movf	?___wmul,w
  2966  0FD2  01F8               	clrf	___awdiv@dividend
  2967  0FD3  07F8               	addwf	___awdiv@dividend,f
  2968  0FD4  120A  158A  266C   	fcall	___awdiv
      +       120A  158A         
  2969  0FD9  0877               	movf	?___awdiv+1,w
  2970  0FDA  01FD               	clrf	setPwmRC2@a+1
  2971  0FDB  07FD               	addwf	setPwmRC2@a+1,f
  2972  0FDC  0876               	movf	?___awdiv,w
  2973  0FDD  01FC               	clrf	setPwmRC2@a
  2974  0FDE  07FC               	addwf	setPwmRC2@a,f
  2975                           
  2976                           ;pwm.h: 30: CCPR1L = a / 4;
  2977  0FDF  3004               	movlw	4
  2978  0FE0  00F6               	movwf	___awdiv@divisor
  2979  0FE1  3000               	movlw	0
  2980  0FE2  00F7               	movwf	___awdiv@divisor+1
  2981  0FE3  087D               	movf	setPwmRC2@a+1,w
  2982  0FE4  01F9               	clrf	___awdiv@dividend+1
  2983  0FE5  07F9               	addwf	___awdiv@dividend+1,f
  2984  0FE6  087C               	movf	setPwmRC2@a,w
  2985  0FE7  01F8               	clrf	___awdiv@dividend
  2986  0FE8  07F8               	addwf	___awdiv@dividend,f
  2987  0FE9  120A  158A  266C   	fcall	___awdiv
      +       120A  158A         
  2988  0FEE  0876               	movf	?___awdiv,w
  2989  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  2990  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  2991  0FF1  0095               	movwf	21	;volatile
  2992                           
  2993                           ;pwm.h: 31: CCP1CON = (CCP1CON & 0b11001111) | ((a % 4) << 4);
  2994  0FF2  087C               	movf	setPwmRC2@a,w
  2995  0FF3  3903               	andlw	3
  2996  0FF4  00FB               	movwf	??_setPwmRC2
  2997  0FF5  3004               	movlw	4
  2998  0FF6                     u2405:	
  2999  0FF6  1003               	clrc
  3000  0FF7  0DFB               	rlf	??_setPwmRC2,f
  3001  0FF8  3EFF               	addlw	-1
  3002  0FF9  1D03               	skipz
  3003  0FFA  2FF6               	goto	u2405
  3004  0FFB  0817               	movf	23,w	;volatile
  3005  0FFC  39CF               	andlw	207
  3006  0FFD  047B               	iorwf	??_setPwmRC2,w
  3007  0FFE  0097               	movwf	23	;volatile
  3008  0FFF  0008               	return
  3009  1000                     __end_of_setPwmRC2:	
  3010                           
  3011                           	psect	text4
  3012  0F2A                     __ptext4:	
  3013 ;; *************** function _setPwmRC1 *****************
  3014 ;; Defined at:
  3015 ;;		line 12 in file "pwm.h"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  freq            2    6[BANK0 ] int 
  3018 ;;  duty            2    8[BANK0 ] int 
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  a               2   12[COMMON] int 
  3021 ;; Return value:  Size  Location     Type
  3022 ;;		None               void
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0, pclath, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3030 ;;      Params:         0       4       0       0       0
  3031 ;;      Locals:         2       0       0       0       0
  3032 ;;      Temps:          1       0       0       0       0
  3033 ;;      Totals:         3       4       0       0       0
  3034 ;;Total ram usage:        7 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    1
  3037 ;; This function calls:
  3038 ;;		___aldiv
  3039 ;;		___awdiv
  3040 ;;		___wmul
  3041 ;; This function is called by:
  3042 ;;		_motor
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           
  3047                           ;psect for function _setPwmRC1
  3048  0F2A                     _setPwmRC1:	
  3049                           
  3050                           ;pwm.h: 14: int a;
  3051                           ;pwm.h: 15: T2CON = 0b00000111;
  3052                           
  3053                           ;incstack = 0
  3054                           ; Regs used in _setPwmRC1: [wreg+status,2+status,0+pclath+cstack]
  3055  0F2A  3007               	movlw	7
  3056  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3057  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3058  0F2D  0092               	movwf	18	;volatile
  3059                           
  3060                           ;pwm.h: 16: CCP2CON = 0b00001100;
  3061  0F2E  300C               	movlw	12
  3062  0F2F  009D               	movwf	29	;volatile
  3063                           
  3064                           ;pwm.h: 17: PR2 = (8000000 / (4 * 16)) / (freq) - 1;
  3065  0F30  0826               	movf	setPwmRC1@freq,w
  3066  0F31  00F0               	movwf	___aldiv@divisor
  3067  0F32  0827               	movf	setPwmRC1@freq+1,w
  3068  0F33  00F1               	movwf	___aldiv@divisor+1
  3069  0F34  3000               	movlw	0
  3070  0F35  1BF1               	btfsc	___aldiv@divisor+1,7
  3071  0F36  30FF               	movlw	255
  3072  0F37  00F2               	movwf	___aldiv@divisor+2
  3073  0F38  00F3               	movwf	___aldiv@divisor+3
  3074  0F39  3000               	movlw	0
  3075  0F3A  00F7               	movwf	___aldiv@dividend+3
  3076  0F3B  3001               	movlw	1
  3077  0F3C  00F6               	movwf	___aldiv@dividend+2
  3078  0F3D  30E8               	movlw	232
  3079  0F3E  00F5               	movwf	___aldiv@dividend+1
  3080  0F3F  3048               	movlw	72
  3081  0F40  00F4               	movwf	___aldiv@dividend
  3082  0F41  120A  118A  214C   	fcall	___aldiv
      +       120A  158A         
  3083  0F46  0870               	movf	?___aldiv,w
  3084  0F47  3EFF               	addlw	255
  3085  0F48  1683               	bsf	3,5	;RP0=1, select bank1
  3086  0F49  1303               	bcf	3,6	;RP1=0, select bank1
  3087  0F4A  0092               	movwf	18	;volatile
  3088                           
  3089                           ;pwm.h: 18: a = (PR2 + 1) * duty / 25;
  3090  0F4B  3019               	movlw	25
  3091  0F4C  00F6               	movwf	___awdiv@divisor
  3092  0F4D  3000               	movlw	0
  3093  0F4E  00F7               	movwf	___awdiv@divisor+1
  3094  0F4F  0812               	movf	18,w	;volatile
  3095  0F50  3E01               	addlw	1
  3096  0F51  00F0               	movwf	___wmul@multiplier
  3097  0F52  3000               	movlw	0
  3098  0F53  1803               	skipnc
  3099  0F54  3001               	movlw	1
  3100  0F55  00F1               	movwf	___wmul@multiplier+1
  3101  0F56  1283               	bcf	3,5	;RP0=0, select bank0
  3102  0F57  1303               	bcf	3,6	;RP1=0, select bank0
  3103  0F58  0829               	movf	setPwmRC1@duty+1,w
  3104  0F59  01F3               	clrf	___wmul@multiplicand+1
  3105  0F5A  07F3               	addwf	___wmul@multiplicand+1,f
  3106  0F5B  0828               	movf	setPwmRC1@duty,w
  3107  0F5C  01F2               	clrf	___wmul@multiplicand
  3108  0F5D  07F2               	addwf	___wmul@multiplicand,f
  3109  0F5E  120A  158A  2530   	fcall	___wmul
      +       120A  158A         
  3110  0F63  0871               	movf	?___wmul+1,w
  3111  0F64  01F9               	clrf	___awdiv@dividend+1
  3112  0F65  07F9               	addwf	___awdiv@dividend+1,f
  3113  0F66  0870               	movf	?___wmul,w
  3114  0F67  01F8               	clrf	___awdiv@dividend
  3115  0F68  07F8               	addwf	___awdiv@dividend,f
  3116  0F69  120A  158A  266C   	fcall	___awdiv
      +       120A  158A         
  3117  0F6E  0877               	movf	?___awdiv+1,w
  3118  0F6F  01FD               	clrf	setPwmRC1@a+1
  3119  0F70  07FD               	addwf	setPwmRC1@a+1,f
  3120  0F71  0876               	movf	?___awdiv,w
  3121  0F72  01FC               	clrf	setPwmRC1@a
  3122  0F73  07FC               	addwf	setPwmRC1@a,f
  3123                           
  3124                           ;pwm.h: 19: CCPR2L = a / 4;
  3125  0F74  3004               	movlw	4
  3126  0F75  00F6               	movwf	___awdiv@divisor
  3127  0F76  3000               	movlw	0
  3128  0F77  00F7               	movwf	___awdiv@divisor+1
  3129  0F78  087D               	movf	setPwmRC1@a+1,w
  3130  0F79  01F9               	clrf	___awdiv@dividend+1
  3131  0F7A  07F9               	addwf	___awdiv@dividend+1,f
  3132  0F7B  087C               	movf	setPwmRC1@a,w
  3133  0F7C  01F8               	clrf	___awdiv@dividend
  3134  0F7D  07F8               	addwf	___awdiv@dividend,f
  3135  0F7E  120A  158A  266C   	fcall	___awdiv
      +       120A  158A         
  3136  0F83  0876               	movf	?___awdiv,w
  3137  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  3138  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  3139  0F86  009B               	movwf	27	;volatile
  3140                           
  3141                           ;pwm.h: 20: CCP2CON = (CCP2CON & 0b11001111) | ((a % 4) << 4);
  3142  0F87  087C               	movf	setPwmRC1@a,w
  3143  0F88  3903               	andlw	3
  3144  0F89  00FB               	movwf	??_setPwmRC1
  3145  0F8A  3004               	movlw	4
  3146  0F8B                     u2395:	
  3147  0F8B  1003               	clrc
  3148  0F8C  0DFB               	rlf	??_setPwmRC1,f
  3149  0F8D  3EFF               	addlw	-1
  3150  0F8E  1D03               	skipz
  3151  0F8F  2F8B               	goto	u2395
  3152  0F90  081D               	movf	29,w	;volatile
  3153  0F91  39CF               	andlw	207
  3154  0F92  047B               	iorwf	??_setPwmRC1,w
  3155  0F93  009D               	movwf	29	;volatile
  3156  0F94  0008               	return
  3157  0F95                     __end_of_setPwmRC1:	
  3158                           
  3159                           	psect	text5
  3160  0D30                     __ptext5:	
  3161 ;; *************** function ___wmul *****************
  3162 ;; Defined at:
  3163 ;;		line 3 in file "D:\Program Files\Microchip\xc8\v1.31\sources\common\wmul.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  multiplier      2    0[COMMON] unsigned int 
  3166 ;;  multiplicand    2    2[COMMON] unsigned int 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  product         2    4[COMMON] unsigned int 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  2    0[COMMON] unsigned int 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3178 ;;      Params:         4       0       0       0       0
  3179 ;;      Locals:         2       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0
  3181 ;;      Totals:         6       0       0       0       0
  3182 ;;Total ram usage:        6 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_setPwmRC1
  3188 ;;		_setPwmRC2
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function ___wmul
  3194  0D30                     ___wmul:	
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3198  0D30  01F4               	clrf	___wmul@product
  3199  0D31  01F5               	clrf	___wmul@product+1
  3200  0D32                     l2193:	
  3201  0D32  1C70               	btfss	___wmul@multiplier,0
  3202  0D33  2D3A               	goto	l789
  3203  0D34  0872               	movf	___wmul@multiplicand,w
  3204  0D35  07F4               	addwf	___wmul@product,f
  3205  0D36  1803               	skipnc
  3206  0D37  0AF5               	incf	___wmul@product+1,f
  3207  0D38  0873               	movf	___wmul@multiplicand+1,w
  3208  0D39  07F5               	addwf	___wmul@product+1,f
  3209  0D3A                     l789:	
  3210  0D3A  3001               	movlw	1
  3211  0D3B                     u2345:	
  3212  0D3B  1003               	clrc
  3213  0D3C  0DF2               	rlf	___wmul@multiplicand,f
  3214  0D3D  0DF3               	rlf	___wmul@multiplicand+1,f
  3215  0D3E  3EFF               	addlw	-1
  3216  0D3F  1D03               	skipz
  3217  0D40  2D3B               	goto	u2345
  3218  0D41  3001               	movlw	1
  3219  0D42                     u2355:	
  3220  0D42  1003               	clrc
  3221  0D43  0CF1               	rrf	___wmul@multiplier+1,f
  3222  0D44  0CF0               	rrf	___wmul@multiplier,f
  3223  0D45  3EFF               	addlw	-1
  3224  0D46  1D03               	skipz
  3225  0D47  2D42               	goto	u2355
  3226  0D48  0871               	movf	___wmul@multiplier+1,w
  3227  0D49  0470               	iorwf	___wmul@multiplier,w
  3228  0D4A  1D03               	skipz
  3229  0D4B  2D32               	goto	l2193
  3230  0D4C  0875               	movf	___wmul@product+1,w
  3231  0D4D  01F1               	clrf	?___wmul+1
  3232  0D4E  07F1               	addwf	?___wmul+1,f
  3233  0D4F  0874               	movf	___wmul@product,w
  3234  0D50  01F0               	clrf	?___wmul
  3235  0D51  07F0               	addwf	?___wmul,f
  3236  0D52  0008               	return
  3237  0D53                     __end_of___wmul:	
  3238                           
  3239                           	psect	text6
  3240  0E6C                     __ptext6:	
  3241 ;; *************** function ___awdiv *****************
  3242 ;; Defined at:
  3243 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.31\sources\common\awdiv.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  divisor         2    6[COMMON] int 
  3246 ;;  dividend        2    8[COMMON] int 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  quotient        2    2[BANK0 ] int 
  3249 ;;  sign            1    1[BANK0 ] unsigned char 
  3250 ;;  counter         1    0[BANK0 ] unsigned char 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  2    6[COMMON] int 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3260 ;;      Params:         4       0       0       0       0
  3261 ;;      Locals:         0       4       0       0       0
  3262 ;;      Temps:          1       0       0       0       0
  3263 ;;      Totals:         5       4       0       0       0
  3264 ;;Total ram usage:        9 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_setPwmRC1
  3270 ;;		_setPwmRC2
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           
  3275                           ;psect for function ___awdiv
  3276  0E6C                     ___awdiv:	
  3277                           
  3278                           ;incstack = 0
  3279                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3280  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  3281  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  3282  0E6E  01A1               	clrf	___awdiv@sign
  3283  0E6F  1FF7               	btfss	___awdiv@divisor+1,7
  3284  0E70  2E78               	goto	l2155
  3285  0E71  09F6               	comf	___awdiv@divisor,f
  3286  0E72  09F7               	comf	___awdiv@divisor+1,f
  3287  0E73  0AF6               	incf	___awdiv@divisor,f
  3288  0E74  1903               	skipnz
  3289  0E75  0AF7               	incf	___awdiv@divisor+1,f
  3290  0E76  01A1               	clrf	___awdiv@sign
  3291  0E77  0AA1               	incf	___awdiv@sign,f
  3292  0E78                     l2155:	
  3293  0E78  1FF9               	btfss	___awdiv@dividend+1,7
  3294  0E79  2E83               	goto	l2161
  3295  0E7A  09F8               	comf	___awdiv@dividend,f
  3296  0E7B  09F9               	comf	___awdiv@dividend+1,f
  3297  0E7C  0AF8               	incf	___awdiv@dividend,f
  3298  0E7D  1903               	skipnz
  3299  0E7E  0AF9               	incf	___awdiv@dividend+1,f
  3300  0E7F  3001               	movlw	1
  3301  0E80  00FA               	movwf	??___awdiv
  3302  0E81  087A               	movf	??___awdiv,w
  3303  0E82  06A1               	xorwf	___awdiv@sign,f
  3304  0E83                     l2161:	
  3305  0E83  01A2               	clrf	___awdiv@quotient
  3306  0E84  01A3               	clrf	___awdiv@quotient+1
  3307  0E85  0877               	movf	___awdiv@divisor+1,w
  3308  0E86  0476               	iorwf	___awdiv@divisor,w
  3309  0E87  1903               	skipnz
  3310  0E88  2EBA               	goto	l2183
  3311  0E89  01A0               	clrf	___awdiv@counter
  3312  0E8A  0AA0               	incf	___awdiv@counter,f
  3313  0E8B                     l2171:	
  3314  0E8B  1BF7               	btfsc	___awdiv@divisor+1,7
  3315  0E8C  2E99               	goto	l2173
  3316  0E8D  3001               	movlw	1
  3317  0E8E                     u2265:	
  3318  0E8E  1003               	clrc
  3319  0E8F  0DF6               	rlf	___awdiv@divisor,f
  3320  0E90  0DF7               	rlf	___awdiv@divisor+1,f
  3321  0E91  3EFF               	addlw	-1
  3322  0E92  1D03               	skipz
  3323  0E93  2E8E               	goto	u2265
  3324  0E94  3001               	movlw	1
  3325  0E95  00FA               	movwf	??___awdiv
  3326  0E96  087A               	movf	??___awdiv,w
  3327  0E97  07A0               	addwf	___awdiv@counter,f
  3328  0E98  2E8B               	goto	l2171
  3329  0E99                     l2173:	
  3330  0E99  3001               	movlw	1
  3331  0E9A                     u2285:	
  3332  0E9A  1003               	clrc
  3333  0E9B  0DA2               	rlf	___awdiv@quotient,f
  3334  0E9C  0DA3               	rlf	___awdiv@quotient+1,f
  3335  0E9D  3EFF               	addlw	-1
  3336  0E9E  1D03               	skipz
  3337  0E9F  2E9A               	goto	u2285
  3338  0EA0  0877               	movf	___awdiv@divisor+1,w
  3339  0EA1  0279               	subwf	___awdiv@dividend+1,w
  3340  0EA2  1D03               	skipz
  3341  0EA3  2EA6               	goto	u2295
  3342  0EA4  0876               	movf	___awdiv@divisor,w
  3343  0EA5  0278               	subwf	___awdiv@dividend,w
  3344  0EA6                     u2295:	
  3345  0EA6  1C03               	skipc
  3346  0EA7  2EAF               	goto	l2179
  3347  0EA8  0876               	movf	___awdiv@divisor,w
  3348  0EA9  02F8               	subwf	___awdiv@dividend,f
  3349  0EAA  0877               	movf	___awdiv@divisor+1,w
  3350  0EAB  1C03               	skipc
  3351  0EAC  03F9               	decf	___awdiv@dividend+1,f
  3352  0EAD  02F9               	subwf	___awdiv@dividend+1,f
  3353  0EAE  1422               	bsf	___awdiv@quotient,0
  3354  0EAF                     l2179:	
  3355  0EAF  3001               	movlw	1
  3356  0EB0                     u2305:	
  3357  0EB0  1003               	clrc
  3358  0EB1  0CF7               	rrf	___awdiv@divisor+1,f
  3359  0EB2  0CF6               	rrf	___awdiv@divisor,f
  3360  0EB3  3EFF               	addlw	-1
  3361  0EB4  1D03               	skipz
  3362  0EB5  2EB0               	goto	u2305
  3363  0EB6  3001               	movlw	1
  3364  0EB7  02A0               	subwf	___awdiv@counter,f
  3365  0EB8  1D03               	btfss	3,2
  3366  0EB9  2E99               	goto	l2173
  3367  0EBA                     l2183:	
  3368  0EBA  0821               	movf	___awdiv@sign,w
  3369  0EBB  1903               	btfsc	3,2
  3370  0EBC  2EC2               	goto	l2187
  3371  0EBD  09A2               	comf	___awdiv@quotient,f
  3372  0EBE  09A3               	comf	___awdiv@quotient+1,f
  3373  0EBF  0AA2               	incf	___awdiv@quotient,f
  3374  0EC0  1903               	skipnz
  3375  0EC1  0AA3               	incf	___awdiv@quotient+1,f
  3376  0EC2                     l2187:	
  3377  0EC2  0823               	movf	___awdiv@quotient+1,w
  3378  0EC3  01F7               	clrf	?___awdiv+1
  3379  0EC4  07F7               	addwf	?___awdiv+1,f
  3380  0EC5  0822               	movf	___awdiv@quotient,w
  3381  0EC6  01F6               	clrf	?___awdiv
  3382  0EC7  07F6               	addwf	?___awdiv,f
  3383  0EC8  0008               	return
  3384  0EC9                     __end_of___awdiv:	
  3385                           
  3386                           	psect	text7
  3387  014C                     __ptext7:	
  3388 ;; *************** function ___aldiv *****************
  3389 ;; Defined at:
  3390 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.31\sources\common\aldiv.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  divisor         4    0[COMMON] long 
  3393 ;;  dividend        4    4[COMMON] long 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  quotient        4    2[BANK0 ] long 
  3396 ;;  sign            1    1[BANK0 ] unsigned char 
  3397 ;;  counter         1    0[BANK0 ] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  4    0[COMMON] long 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3407 ;;      Params:         8       0       0       0       0
  3408 ;;      Locals:         0       6       0       0       0
  3409 ;;      Temps:          1       0       0       0       0
  3410 ;;      Totals:         9       6       0       0       0
  3411 ;;Total ram usage:       15 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_setPwmRC1
  3417 ;;		_setPwmRC2
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           
  3422                           ;psect for function ___aldiv
  3423  014C                     ___aldiv:	
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3427  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3428  014D  1303               	bcf	3,6	;RP1=0, select bank0
  3429  014E  01A1               	clrf	___aldiv@sign
  3430  014F  1FF3               	btfss	___aldiv@divisor+3,7
  3431  0150  295E               	goto	l464
  3432  0151  09F0               	comf	___aldiv@divisor,f
  3433  0152  09F1               	comf	___aldiv@divisor+1,f
  3434  0153  09F2               	comf	___aldiv@divisor+2,f
  3435  0154  09F3               	comf	___aldiv@divisor+3,f
  3436  0155  0AF0               	incf	___aldiv@divisor,f
  3437  0156  1903               	skipnz
  3438  0157  0AF1               	incf	___aldiv@divisor+1,f
  3439  0158  1903               	skipnz
  3440  0159  0AF2               	incf	___aldiv@divisor+2,f
  3441  015A  1903               	skipnz
  3442  015B  0AF3               	incf	___aldiv@divisor+3,f
  3443  015C  01A1               	clrf	___aldiv@sign
  3444  015D  0AA1               	incf	___aldiv@sign,f
  3445  015E                     l464:	
  3446  015E  1FF7               	btfss	___aldiv@dividend+3,7
  3447  015F  296F               	goto	l2117
  3448  0160  09F4               	comf	___aldiv@dividend,f
  3449  0161  09F5               	comf	___aldiv@dividend+1,f
  3450  0162  09F6               	comf	___aldiv@dividend+2,f
  3451  0163  09F7               	comf	___aldiv@dividend+3,f
  3452  0164  0AF4               	incf	___aldiv@dividend,f
  3453  0165  1903               	skipnz
  3454  0166  0AF5               	incf	___aldiv@dividend+1,f
  3455  0167  1903               	skipnz
  3456  0168  0AF6               	incf	___aldiv@dividend+2,f
  3457  0169  1903               	skipnz
  3458  016A  0AF7               	incf	___aldiv@dividend+3,f
  3459  016B  3001               	movlw	1
  3460  016C  00F8               	movwf	??___aldiv
  3461  016D  0878               	movf	??___aldiv,w
  3462  016E  06A1               	xorwf	___aldiv@sign,f
  3463  016F                     l2117:	
  3464  016F  3000               	movlw	0
  3465  0170  00A5               	movwf	___aldiv@quotient+3
  3466  0171  3000               	movlw	0
  3467  0172  00A4               	movwf	___aldiv@quotient+2
  3468  0173  3000               	movlw	0
  3469  0174  00A3               	movwf	___aldiv@quotient+1
  3470  0175  3000               	movlw	0
  3471  0176  00A2               	movwf	___aldiv@quotient
  3472  0177  0873               	movf	___aldiv@divisor+3,w
  3473  0178  0472               	iorwf	___aldiv@divisor+2,w
  3474  0179  0471               	iorwf	___aldiv@divisor+1,w
  3475  017A  0470               	iorwf	___aldiv@divisor,w
  3476  017B  1903               	skipnz
  3477  017C  29C4               	goto	l2139
  3478  017D  01A0               	clrf	___aldiv@counter
  3479  017E  0AA0               	incf	___aldiv@counter,f
  3480  017F                     l2125:	
  3481  017F  1BF3               	btfsc	___aldiv@divisor+3,7
  3482  0180  298F               	goto	l2127
  3483  0181  3001               	movlw	1
  3484  0182  00F8               	movwf	??___aldiv
  3485  0183                     u2165:	
  3486  0183  1003               	clrc
  3487  0184  0DF0               	rlf	___aldiv@divisor,f
  3488  0185  0DF1               	rlf	___aldiv@divisor+1,f
  3489  0186  0DF2               	rlf	___aldiv@divisor+2,f
  3490  0187  0DF3               	rlf	___aldiv@divisor+3,f
  3491  0188  0BF8               	decfsz	??___aldiv,f
  3492  0189  2983               	goto	u2165
  3493  018A  3001               	movlw	1
  3494  018B  00F8               	movwf	??___aldiv
  3495  018C  0878               	movf	??___aldiv,w
  3496  018D  07A0               	addwf	___aldiv@counter,f
  3497  018E  297F               	goto	l2125
  3498  018F                     l2127:	
  3499  018F  3001               	movlw	1
  3500  0190  00F8               	movwf	??___aldiv
  3501  0191                     u2185:	
  3502  0191  1003               	clrc
  3503  0192  0DA2               	rlf	___aldiv@quotient,f
  3504  0193  0DA3               	rlf	___aldiv@quotient+1,f
  3505  0194  0DA4               	rlf	___aldiv@quotient+2,f
  3506  0195  0DA5               	rlf	___aldiv@quotient+3,f
  3507  0196  0BF8               	decfsz	??___aldiv,f
  3508  0197  2991               	goto	u2185
  3509  0198  0873               	movf	___aldiv@divisor+3,w
  3510  0199  0277               	subwf	___aldiv@dividend+3,w
  3511  019A  1D03               	skipz
  3512  019B  29A6               	goto	u2195
  3513  019C  0872               	movf	___aldiv@divisor+2,w
  3514  019D  0276               	subwf	___aldiv@dividend+2,w
  3515  019E  1D03               	skipz
  3516  019F  29A6               	goto	u2195
  3517  01A0  0871               	movf	___aldiv@divisor+1,w
  3518  01A1  0275               	subwf	___aldiv@dividend+1,w
  3519  01A2  1D03               	skipz
  3520  01A3  29A6               	goto	u2195
  3521  01A4  0870               	movf	___aldiv@divisor,w
  3522  01A5  0274               	subwf	___aldiv@dividend,w
  3523  01A6                     u2195:	
  3524  01A6  1C03               	skipc
  3525  01A7  29B7               	goto	l2135
  3526  01A8  0870               	movf	___aldiv@divisor,w
  3527  01A9  02F4               	subwf	___aldiv@dividend,f
  3528  01AA  0871               	movf	___aldiv@divisor+1,w
  3529  01AB  1C03               	skipc
  3530  01AC  0F71               	incfsz	___aldiv@divisor+1,w
  3531  01AD  02F5               	subwf	___aldiv@dividend+1,f
  3532  01AE  0872               	movf	___aldiv@divisor+2,w
  3533  01AF  1C03               	skipc
  3534  01B0  0F72               	incfsz	___aldiv@divisor+2,w
  3535  01B1  02F6               	subwf	___aldiv@dividend+2,f
  3536  01B2  0873               	movf	___aldiv@divisor+3,w
  3537  01B3  1C03               	skipc
  3538  01B4  0F73               	incfsz	___aldiv@divisor+3,w
  3539  01B5  02F7               	subwf	___aldiv@dividend+3,f
  3540  01B6  1422               	bsf	___aldiv@quotient,0
  3541  01B7                     l2135:	
  3542  01B7  3001               	movlw	1
  3543  01B8                     u2205:	
  3544  01B8  1003               	clrc
  3545  01B9  0CF3               	rrf	___aldiv@divisor+3,f
  3546  01BA  0CF2               	rrf	___aldiv@divisor+2,f
  3547  01BB  0CF1               	rrf	___aldiv@divisor+1,f
  3548  01BC  0CF0               	rrf	___aldiv@divisor,f
  3549  01BD  3EFF               	addlw	-1
  3550  01BE  1D03               	skipz
  3551  01BF  29B8               	goto	u2205
  3552  01C0  3001               	movlw	1
  3553  01C1  02A0               	subwf	___aldiv@counter,f
  3554  01C2  1D03               	btfss	3,2
  3555  01C3  298F               	goto	l2127
  3556  01C4                     l2139:	
  3557  01C4  0821               	movf	___aldiv@sign,w
  3558  01C5  1903               	btfsc	3,2
  3559  01C6  29D2               	goto	l2143
  3560  01C7  09A2               	comf	___aldiv@quotient,f
  3561  01C8  09A3               	comf	___aldiv@quotient+1,f
  3562  01C9  09A4               	comf	___aldiv@quotient+2,f
  3563  01CA  09A5               	comf	___aldiv@quotient+3,f
  3564  01CB  0AA2               	incf	___aldiv@quotient,f
  3565  01CC  1903               	skipnz
  3566  01CD  0AA3               	incf	___aldiv@quotient+1,f
  3567  01CE  1903               	skipnz
  3568  01CF  0AA4               	incf	___aldiv@quotient+2,f
  3569  01D0  1903               	skipnz
  3570  01D1  0AA5               	incf	___aldiv@quotient+3,f
  3571  01D2                     l2143:	
  3572  01D2  0825               	movf	___aldiv@quotient+3,w
  3573  01D3  00F3               	movwf	?___aldiv+3
  3574  01D4  0824               	movf	___aldiv@quotient+2,w
  3575  01D5  00F2               	movwf	?___aldiv+2
  3576  01D6  0823               	movf	___aldiv@quotient+1,w
  3577  01D7  00F1               	movwf	?___aldiv+1
  3578  01D8  0822               	movf	___aldiv@quotient,w
  3579  01D9  00F0               	movwf	?___aldiv
  3580  01DA  0008               	return
  3581  01DB                     __end_of___aldiv:	
  3582                           
  3583                           	psect	text8
  3584  0CE9                     __ptext8:	
  3585 ;; *************** function ___bmul *****************
  3586 ;; Defined at:
  3587 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.31\sources\common\bmul.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  multiplier      1    wreg     unsigned char 
  3590 ;;  multiplicand    1    0[COMMON] unsigned char 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;  multiplier      1    3[COMMON] unsigned char 
  3593 ;;  product         1    2[COMMON] unsigned char 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  1    wreg      unsigned char 
  3596 ;; Registers used:
  3597 ;;		wreg, status,2, status,0
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3603 ;;      Params:         1       0       0       0       0
  3604 ;;      Locals:         2       0       0       0       0
  3605 ;;      Temps:          1       0       0       0       0
  3606 ;;      Totals:         4       0       0       0       0
  3607 ;;Total ram usage:        4 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; This function calls:
  3610 ;;		Nothing
  3611 ;; This function is called by:
  3612 ;;		_motor
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function ___bmul
  3618  0CE9                     ___bmul:	
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3622                           ;___bmul@multiplier stored from wreg
  3623  0CE9  00F3               	movwf	___bmul@multiplier
  3624  0CEA  01F2               	clrf	___bmul@product
  3625  0CEB                     l2237:	
  3626  0CEB  1C73               	btfss	___bmul@multiplier,0
  3627  0CEC  2CF1               	goto	l2241
  3628  0CED  0870               	movf	___bmul@multiplicand,w
  3629  0CEE  00F1               	movwf	??___bmul
  3630  0CEF  0871               	movf	??___bmul,w
  3631  0CF0  07F2               	addwf	___bmul@product,f
  3632  0CF1                     l2241:	
  3633  0CF1  1003               	clrc
  3634  0CF2  0DF0               	rlf	___bmul@multiplicand,f
  3635  0CF3  1003               	clrc
  3636  0CF4  0CF3               	rrf	___bmul@multiplier,f
  3637  0CF5  08F3               	movf	___bmul@multiplier,f
  3638  0CF6  1D03               	skipz
  3639  0CF7  2CEB               	goto	l2237
  3640  0CF8  0872               	movf	___bmul@product,w
  3641  0CF9  0008               	return
  3642  0CFA                     __end_of___bmul:	
  3643                           
  3644                           	psect	text9
  3645  0E2C                     __ptext9:	
  3646 ;; *************** function _memcmp *****************
  3647 ;; Defined at:
  3648 ;;		line 3 in file "D:\Program Files\Microchip\xc8\v1.31\sources\common\memcmp.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  s1              1    wreg     PTR const void 
  3651 ;;		 -> STR_13(4), STR_12(4), STR_11(4), STR_10(4), 
  3652 ;;		 -> STR_9(4), STR_8(4), 
  3653 ;;  s2              1    0[COMMON] PTR const void 
  3654 ;;		 -> main@string(3), 
  3655 ;;  n               2    1[COMMON] unsigned int 
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;  s1              1    5[COMMON] PTR const void 
  3658 ;;		 -> STR_13(4), STR_12(4), STR_11(4), STR_10(4), 
  3659 ;;		 -> STR_9(4), STR_8(4), 
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  2    0[COMMON] int 
  3662 ;; Registers used:
  3663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3669 ;;      Params:         3       0       0       0       0
  3670 ;;      Locals:         1       0       0       0       0
  3671 ;;      Temps:          2       0       0       0       0
  3672 ;;      Totals:         6       0       0       0       0
  3673 ;;Total ram usage:        6 bytes
  3674 ;; Hardware stack levels used:    2
  3675 ;; This function calls:
  3676 ;;		Nothing
  3677 ;; This function is called by:
  3678 ;;		_main
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           
  3683                           ;psect for function _memcmp
  3684  0E2C                     _memcmp:	
  3685                           
  3686                           ;incstack = 0
  3687                           ; Regs used in _memcmp: [wreg-fsr0h+status,2+status,0+pclath]
  3688                           ;memcmp@s1 stored from wreg
  3689  0E2C  00F5               	movwf	memcmp@s1
  3690  0E2D                     l2463:	
  3691  0E2D  3001               	movlw	1
  3692  0E2E  02F1               	subwf	memcmp@n,f
  3693  0E2F  3000               	movlw	0
  3694  0E30  1C03               	skipc
  3695  0E31  03F2               	decf	memcmp@n+1,f
  3696  0E32  02F2               	subwf	memcmp@n+1,f
  3697  0E33  30FF               	movlw	255
  3698  0E34  0672               	xorwf	memcmp@n+1,w
  3699  0E35  1D03               	skipz
  3700  0E36  2E39               	goto	u2775
  3701  0E37  30FF               	movlw	255
  3702  0E38  0671               	xorwf	memcmp@n,w
  3703  0E39                     u2775:	
  3704  0E39  1903               	btfsc	3,2
  3705  0E3A  2E69               	goto	l2465
  3706  0E3B  0870               	movf	memcmp@s2,w
  3707  0E3C  0084               	movwf	4
  3708  0E3D  1383               	bcf	3,7	;select IRP bank0
  3709  0E3E  0800               	movf	0,w
  3710  0E3F  00F3               	movwf	??_memcmp
  3711  0E40  0875               	movf	memcmp@s1,w
  3712  0E41  0084               	movwf	4
  3713  0E42  120A  158A  2000   	fcall	stringdir
      +       120A  158A         
  3714  0E47  0673               	xorwf	??_memcmp,w
  3715  0E48  1903               	skipnz
  3716  0E49  2E60               	goto	l2461
  3717  0E4A  0870               	movf	memcmp@s2,w
  3718  0E4B  0084               	movwf	4
  3719  0E4C  0800               	movf	0,w
  3720  0E4D  00F3               	movwf	??_memcmp
  3721  0E4E  01F4               	clrf	??_memcmp+1
  3722  0E4F  09F3               	comf	??_memcmp,f
  3723  0E50  09F4               	comf	??_memcmp+1,f
  3724  0E51  0AF3               	incf	??_memcmp,f
  3725  0E52  1903               	skipnz
  3726  0E53  0AF4               	incf	??_memcmp+1,f
  3727  0E54  0875               	movf	memcmp@s1,w
  3728  0E55  0084               	movwf	4
  3729  0E56  120A  158A  2000   	fcall	stringdir
  3730  0E59  0773               	addwf	??_memcmp,w
  3731  0E5A  00F0               	movwf	?_memcmp
  3732  0E5B  0874               	movf	??_memcmp+1,w
  3733  0E5C  1803               	skipnc
  3734  0E5D  0A74               	incf	??_memcmp+1,w
  3735  0E5E  00F1               	movwf	?_memcmp+1
  3736  0E5F  0008               	return
  3737  0E60                     l2461:	
  3738  0E60  3001               	movlw	1
  3739  0E61  00F3               	movwf	??_memcmp
  3740  0E62  0873               	movf	??_memcmp,w
  3741  0E63  07F5               	addwf	memcmp@s1,f
  3742  0E64  3001               	movlw	1
  3743  0E65  00F3               	movwf	??_memcmp
  3744  0E66  0873               	movf	??_memcmp,w
  3745  0E67  07F0               	addwf	memcmp@s2,f
  3746  0E68  2E2D               	goto	l2463
  3747  0E69                     l2465:	
  3748  0E69  01F0               	clrf	?_memcmp
  3749  0E6A  01F1               	clrf	?_memcmp+1
  3750  0E6B  0008               	return
  3751  0E6C                     __end_of_memcmp:	
  3752                           
  3753                           	psect	text10
  3754  0D53                     __ptext10:	
  3755 ;; *************** function _lcdPutstr *****************
  3756 ;; Defined at:
  3757 ;;		line 71 in file "lcd.h"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  s               1    wreg     PTR const unsigned char 
  3760 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_4(9), 
  3761 ;;		 -> STR_3(9), STR_2(9), STR_1(9), 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  s               1    4[COMMON] PTR const unsigned char 
  3764 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_4(9), 
  3765 ;;		 -> STR_3(9), STR_2(9), STR_1(9), 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;		None               void
  3768 ;; Registers used:
  3769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3775 ;;      Params:         0       0       0       0       0
  3776 ;;      Locals:         1       0       0       0       0
  3777 ;;      Temps:          1       0       0       0       0
  3778 ;;      Totals:         2       0       0       0       0
  3779 ;;Total ram usage:        2 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    1
  3782 ;; This function calls:
  3783 ;;		_lcdWrite
  3784 ;; This function is called by:
  3785 ;;		_main
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           
  3790                           ;psect for function _lcdPutstr
  3791  0D53                     _lcdPutstr:	
  3792                           
  3793                           ;incstack = 0
  3794                           ; Regs used in _lcdPutstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3795                           ;lcdPutstr@s stored from wreg
  3796  0D53  00F4               	movwf	lcdPutstr@s
  3797  0D54                     l2337:	
  3798                           ;lcd.h: 73: while(*s >= ' ' && *s <= '~') lcdWrite(1, *s++);
  3799                           
  3800  0D54  0874               	movf	lcdPutstr@s,w
  3801  0D55  0084               	movwf	4
  3802  0D56  120A  158A  2000   	fcall	stringdir
      +       120A  158A         
  3803  0D5B  00F3               	movwf	??_lcdPutstr
  3804  0D5C  3020               	movlw	32
  3805  0D5D  0273               	subwf	??_lcdPutstr,w
  3806  0D5E  1C03               	skipc
  3807  0D5F  0008               	return
  3808  0D60  0874               	movf	lcdPutstr@s,w
  3809  0D61  0084               	movwf	4
  3810  0D62  120A  158A  2000   	fcall	stringdir
      +       120A  158A         
  3811  0D67  00F3               	movwf	??_lcdPutstr
  3812  0D68  307F               	movlw	127
  3813  0D69  0273               	subwf	??_lcdPutstr,w
  3814  0D6A  1803               	btfsc	3,0
  3815  0D6B  0008               	return
  3816  0D6C  0874               	movf	lcdPutstr@s,w
  3817  0D6D  0084               	movwf	4
  3818  0D6E  120A  158A  2000   	fcall	stringdir
      +       120A  158A         
  3819  0D73  00F3               	movwf	??_lcdPutstr
  3820  0D74  0873               	movf	??_lcdPutstr,w
  3821  0D75  00F0               	movwf	lcdWrite@data
  3822  0D76  3001               	movlw	1
  3823  0D77  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  3824  0D7C  3001               	movlw	1
  3825  0D7D  00F3               	movwf	??_lcdPutstr
  3826  0D7E  0873               	movf	??_lcdPutstr,w
  3827  0D7F  07F4               	addwf	lcdPutstr@s,f
  3828  0D80  2D54               	goto	l2337
  3829  0D81                     __end_of_lcdPutstr:	
  3830                           
  3831                           	psect	text11
  3832  00C9                     __ptext11:	
  3833 ;; *************** function _lcdNumber *****************
  3834 ;; Defined at:
  3835 ;;		line 76 in file "lcd.h"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  no              2    8[COMMON] unsigned int 
  3838 ;;  base            1   10[COMMON] unsigned char 
  3839 ;;  digit           1   11[COMMON] unsigned char 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  di             10    3[BANK0 ] unsigned char [10]
  3842 ;;  j               1   14[BANK0 ] unsigned char 
  3843 ;;  i               1   13[BANK0 ] unsigned char 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;		None               void
  3846 ;; Registers used:
  3847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3853 ;;      Params:         4       0       0       0       0
  3854 ;;      Locals:         0      12       0       0       0
  3855 ;;      Temps:          0       3       0       0       0
  3856 ;;      Totals:         4      15       0       0       0
  3857 ;;Total ram usage:       19 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    1
  3860 ;; This function calls:
  3861 ;;		___lwdiv
  3862 ;;		___lwmod
  3863 ;;		_lcdWrite
  3864 ;; This function is called by:
  3865 ;;		_main
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _lcdNumber
  3871  00C9                     _lcdNumber:	
  3872                           
  3873                           ;lcd.h: 78: uChar i, j, di[10];
  3874                           ;lcd.h: 79: for(i = 0; i < 10; i++) di[i] = 0;
  3875                           
  3876                           ;incstack = 0
  3877                           ; Regs used in _lcdNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3878  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  3879  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  3880  00CB  01AD               	clrf	lcdNumber@i
  3881  00CC  300A               	movlw	10
  3882  00CD  022D               	subwf	lcdNumber@i,w
  3883  00CE  1803               	btfsc	3,0
  3884  00CF  28DD               	goto	l2353
  3885  00D0                     l2347:	
  3886  00D0  082D               	movf	lcdNumber@i,w
  3887  00D1  3E23               	addlw	lcdNumber@di& (0+255)
  3888  00D2  0084               	movwf	4
  3889  00D3  1383               	bcf	3,7	;select IRP bank0
  3890  00D4  0180               	clrf	0
  3891  00D5  3001               	movlw	1
  3892  00D6  00A0               	movwf	??_lcdNumber
  3893  00D7  0820               	movf	??_lcdNumber,w
  3894  00D8  07AD               	addwf	lcdNumber@i,f
  3895  00D9  300A               	movlw	10
  3896  00DA  022D               	subwf	lcdNumber@i,w
  3897  00DB  1C03               	skipc
  3898  00DC  28D0               	goto	l2347
  3899  00DD                     l2353:	
  3900                           
  3901                           ;lcd.h: 80: i = 0;
  3902  00DD  01AD               	clrf	lcdNumber@i
  3903  00DE                     l2355:	
  3904                           ;lcd.h: 82: do
  3905                           
  3906                           
  3907                           ;lcd.h: 83: {
  3908                           ;lcd.h: 84: di[i++] = no % base;
  3909  00DE  087A               	movf	lcdNumber@base,w
  3910  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  3911  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  3912  00E1  00A0               	movwf	??_lcdNumber
  3913  00E2  01A1               	clrf	??_lcdNumber+1
  3914  00E3  0820               	movf	??_lcdNumber,w
  3915  00E4  00F0               	movwf	___lwmod@divisor
  3916  00E5  0821               	movf	??_lcdNumber+1,w
  3917  00E6  00F1               	movwf	___lwmod@divisor+1
  3918  00E7  0879               	movf	lcdNumber@no+1,w
  3919  00E8  01F3               	clrf	___lwmod@dividend+1
  3920  00E9  07F3               	addwf	___lwmod@dividend+1,f
  3921  00EA  0878               	movf	lcdNumber@no,w
  3922  00EB  01F2               	clrf	___lwmod@dividend
  3923  00EC  07F2               	addwf	___lwmod@dividend,f
  3924  00ED  120A  158A  2581   	fcall	___lwmod
      +       120A  118A         
  3925  00F2  0870               	movf	?___lwmod,w
  3926  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3927  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  3928  00F5  00A2               	movwf	??_lcdNumber+2
  3929  00F6  082D               	movf	lcdNumber@i,w
  3930  00F7  3E23               	addlw	lcdNumber@di& (0+255)
  3931  00F8  0084               	movwf	4
  3932  00F9  0822               	movf	??_lcdNumber+2,w
  3933  00FA  1383               	bcf	3,7	;select IRP bank0
  3934  00FB  0080               	movwf	0
  3935  00FC  3001               	movlw	1
  3936  00FD  00A0               	movwf	??_lcdNumber
  3937  00FE  0820               	movf	??_lcdNumber,w
  3938  00FF  07AD               	addwf	lcdNumber@i,f
  3939                           
  3940                           ;lcd.h: 85: no = no / base;
  3941  0100  087A               	movf	lcdNumber@base,w
  3942  0101  00A0               	movwf	??_lcdNumber
  3943  0102  01A1               	clrf	??_lcdNumber+1
  3944  0103  0820               	movf	??_lcdNumber,w
  3945  0104  00F0               	movwf	___lwdiv@divisor
  3946  0105  0821               	movf	??_lcdNumber+1,w
  3947  0106  00F1               	movwf	___lwdiv@divisor+1
  3948  0107  0879               	movf	lcdNumber@no+1,w
  3949  0108  01F3               	clrf	___lwdiv@dividend+1
  3950  0109  07F3               	addwf	___lwdiv@dividend+1,f
  3951  010A  0878               	movf	lcdNumber@no,w
  3952  010B  01F2               	clrf	___lwdiv@dividend
  3953  010C  07F2               	addwf	___lwdiv@dividend,f
  3954  010D  120A  158A  25EE   	fcall	___lwdiv
      +       120A  118A         
  3955  0112  0871               	movf	?___lwdiv+1,w
  3956  0113  01F9               	clrf	lcdNumber@no+1
  3957  0114  07F9               	addwf	lcdNumber@no+1,f
  3958  0115  0870               	movf	?___lwdiv,w
  3959  0116  01F8               	clrf	lcdNumber@no
  3960  0117  07F8               	addwf	lcdNumber@no,f
  3961                           
  3962                           ;lcd.h: 86: }
  3963                           ;lcd.h: 87: while(no);
  3964  0118  0879               	movf	lcdNumber@no+1,w
  3965  0119  0478               	iorwf	lcdNumber@no,w
  3966  011A  1D03               	skipz
  3967  011B  28DE               	goto	l2355
  3968                           
  3969                           ;lcd.h: 89: for(j = digit; j > 0; j--)
  3970  011C  087B               	movf	lcdNumber@digit,w
  3971  011D  1283               	bcf	3,5	;RP0=0, select bank0
  3972  011E  1303               	bcf	3,6	;RP1=0, select bank0
  3973  011F  00A0               	movwf	??_lcdNumber
  3974  0120  0820               	movf	??_lcdNumber,w
  3975  0121  00AE               	movwf	lcdNumber@j
  3976  0122                     L20:	
  3977  0122  08AE               	movf	lcdNumber@j,f
  3978  0123  1903               	btfsc	3,2
  3979  0124  0008               	return
  3980                           
  3981                           ;lcd.h: 90: {
  3982                           ;lcd.h: 91: if(di[j - 1] < 10) lcdWrite(1, di[j - 1] + '0');
  3983  0125  082E               	movf	lcdNumber@j,w
  3984  0126  3EFF               	addlw	255
  3985  0127  3E23               	addlw	lcdNumber@di& (0+255)
  3986  0128  0084               	movwf	4
  3987  0129  300A               	movlw	10
  3988  012A  1383               	bcf	3,7	;select IRP bank0
  3989  012B  0200               	subwf	0,w
  3990  012C  1803               	skipnc
  3991  012D  2935               	goto	l2373
  3992  012E  082E               	movf	lcdNumber@j,w
  3993  012F  3EFF               	addlw	255
  3994  0130  3E23               	addlw	lcdNumber@di& (0+255)
  3995  0131  0084               	movwf	4
  3996  0132  0800               	movf	0,w
  3997  0133  3E30               	addlw	48
  3998  0134  293E               	goto	L19
  3999  0135                     l2373:	
  4000                           
  4001                           ;lcd.h: 92: else lcdWrite(1, di[j - 1] - 10 + 'A');
  4002  0135  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0136  1303               	bcf	3,6	;RP1=0, select bank0
  4004  0137  082E               	movf	lcdNumber@j,w
  4005  0138  3EFF               	addlw	255
  4006  0139  3E23               	addlw	lcdNumber@di& (0+255)
  4007  013A  0084               	movwf	4
  4008  013B  1383               	bcf	3,7	;select IRP bank0
  4009  013C  0800               	movf	0,w
  4010  013D  3E37               	addlw	55
  4011  013E                     L19:	
  4012  013E  00A0               	movwf	??_lcdNumber
  4013  013F  0820               	movf	??_lcdNumber,w
  4014  0140  00F0               	movwf	lcdWrite@data
  4015  0141  3001               	movlw	1
  4016  0142  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  118A         
  4017  0147  3001               	movlw	1
  4018  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4020  014A  02AE               	subwf	lcdNumber@j,f
  4021  014B  2922               	goto	L20
  4022  014C                     __end_of_lcdNumber:	
  4023                           
  4024                           	psect	text12
  4025  0D81                     __ptext12:	
  4026 ;; *************** function ___lwmod *****************
  4027 ;; Defined at:
  4028 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.31\sources\common\lwmod.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  divisor         2    0[COMMON] unsigned int 
  4031 ;;  dividend        2    2[COMMON] unsigned int 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  counter         1    5[COMMON] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  2    0[COMMON] unsigned int 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4043 ;;      Params:         4       0       0       0       0
  4044 ;;      Locals:         1       0       0       0       0
  4045 ;;      Temps:          1       0       0       0       0
  4046 ;;      Totals:         6       0       0       0       0
  4047 ;;Total ram usage:        6 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; This function calls:
  4050 ;;		Nothing
  4051 ;; This function is called by:
  4052 ;;		_lcdNumber
  4053 ;;		_uartNumber
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           
  4058                           ;psect for function ___lwmod
  4059  0D81                     ___lwmod:	
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4063  0D81  0871               	movf	___lwmod@divisor+1,w
  4064  0D82  0470               	iorwf	___lwmod@divisor,w
  4065  0D83  1903               	skipnz
  4066  0D84  2DAE               	goto	l2295
  4067  0D85  01F5               	clrf	___lwmod@counter
  4068  0D86  0AF5               	incf	___lwmod@counter,f
  4069  0D87                     l2285:	
  4070  0D87  1BF1               	btfsc	___lwmod@divisor+1,7
  4071  0D88  2D95               	goto	l2287
  4072  0D89  3001               	movlw	1
  4073  0D8A                     u2515:	
  4074  0D8A  1003               	clrc
  4075  0D8B  0DF0               	rlf	___lwmod@divisor,f
  4076  0D8C  0DF1               	rlf	___lwmod@divisor+1,f
  4077  0D8D  3EFF               	addlw	-1
  4078  0D8E  1D03               	skipz
  4079  0D8F  2D8A               	goto	u2515
  4080  0D90  3001               	movlw	1
  4081  0D91  00F4               	movwf	??___lwmod
  4082  0D92  0874               	movf	??___lwmod,w
  4083  0D93  07F5               	addwf	___lwmod@counter,f
  4084  0D94  2D87               	goto	l2285
  4085  0D95                     l2287:	
  4086  0D95  0871               	movf	___lwmod@divisor+1,w
  4087  0D96  0273               	subwf	___lwmod@dividend+1,w
  4088  0D97  1D03               	skipz
  4089  0D98  2D9B               	goto	u2535
  4090  0D99  0870               	movf	___lwmod@divisor,w
  4091  0D9A  0272               	subwf	___lwmod@dividend,w
  4092  0D9B                     u2535:	
  4093  0D9B  1C03               	skipc
  4094  0D9C  2DA3               	goto	l2291
  4095  0D9D  0870               	movf	___lwmod@divisor,w
  4096  0D9E  02F2               	subwf	___lwmod@dividend,f
  4097  0D9F  0871               	movf	___lwmod@divisor+1,w
  4098  0DA0  1C03               	skipc
  4099  0DA1  03F3               	decf	___lwmod@dividend+1,f
  4100  0DA2  02F3               	subwf	___lwmod@dividend+1,f
  4101  0DA3                     l2291:	
  4102  0DA3  3001               	movlw	1
  4103  0DA4                     u2545:	
  4104  0DA4  1003               	clrc
  4105  0DA5  0CF1               	rrf	___lwmod@divisor+1,f
  4106  0DA6  0CF0               	rrf	___lwmod@divisor,f
  4107  0DA7  3EFF               	addlw	-1
  4108  0DA8  1D03               	skipz
  4109  0DA9  2DA4               	goto	u2545
  4110  0DAA  3001               	movlw	1
  4111  0DAB  02F5               	subwf	___lwmod@counter,f
  4112  0DAC  1D03               	btfss	3,2
  4113  0DAD  2D95               	goto	l2287
  4114  0DAE                     l2295:	
  4115  0DAE  0873               	movf	___lwmod@dividend+1,w
  4116  0DAF  01F1               	clrf	?___lwmod+1
  4117  0DB0  07F1               	addwf	?___lwmod+1,f
  4118  0DB1  0872               	movf	___lwmod@dividend,w
  4119  0DB2  01F0               	clrf	?___lwmod
  4120  0DB3  07F0               	addwf	?___lwmod,f
  4121  0DB4  0008               	return
  4122  0DB5                     __end_of___lwmod:	
  4123                           
  4124                           	psect	text13
  4125  0DEE                     __ptext13:	
  4126 ;; *************** function ___lwdiv *****************
  4127 ;; Defined at:
  4128 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.31\sources\common\lwdiv.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  divisor         2    0[COMMON] unsigned int 
  4131 ;;  dividend        2    2[COMMON] unsigned int 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  quotient        2    5[COMMON] unsigned int 
  4134 ;;  counter         1    7[COMMON] unsigned char 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  2    0[COMMON] unsigned int 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4144 ;;      Params:         4       0       0       0       0
  4145 ;;      Locals:         3       0       0       0       0
  4146 ;;      Temps:          1       0       0       0       0
  4147 ;;      Totals:         8       0       0       0       0
  4148 ;;Total ram usage:        8 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_lcdNumber
  4154 ;;		_uartNumber
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           
  4159                           ;psect for function ___lwdiv
  4160  0DEE                     ___lwdiv:	
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4164  0DEE  01F5               	clrf	___lwdiv@quotient
  4165  0DEF  01F6               	clrf	___lwdiv@quotient+1
  4166  0DF0  0871               	movf	___lwdiv@divisor+1,w
  4167  0DF1  0470               	iorwf	___lwdiv@divisor,w
  4168  0DF2  1903               	skipnz
  4169  0DF3  2E25               	goto	l2273
  4170  0DF4  01F7               	clrf	___lwdiv@counter
  4171  0DF5  0AF7               	incf	___lwdiv@counter,f
  4172  0DF6                     l2261:	
  4173  0DF6  1BF1               	btfsc	___lwdiv@divisor+1,7
  4174  0DF7  2E04               	goto	l2263
  4175  0DF8  3001               	movlw	1
  4176  0DF9                     u2445:	
  4177  0DF9  1003               	clrc
  4178  0DFA  0DF0               	rlf	___lwdiv@divisor,f
  4179  0DFB  0DF1               	rlf	___lwdiv@divisor+1,f
  4180  0DFC  3EFF               	addlw	-1
  4181  0DFD  1D03               	skipz
  4182  0DFE  2DF9               	goto	u2445
  4183  0DFF  3001               	movlw	1
  4184  0E00  00F4               	movwf	??___lwdiv
  4185  0E01  0874               	movf	??___lwdiv,w
  4186  0E02  07F7               	addwf	___lwdiv@counter,f
  4187  0E03  2DF6               	goto	l2261
  4188  0E04                     l2263:	
  4189  0E04  3001               	movlw	1
  4190  0E05                     u2465:	
  4191  0E05  1003               	clrc
  4192  0E06  0DF5               	rlf	___lwdiv@quotient,f
  4193  0E07  0DF6               	rlf	___lwdiv@quotient+1,f
  4194  0E08  3EFF               	addlw	-1
  4195  0E09  1D03               	skipz
  4196  0E0A  2E05               	goto	u2465
  4197  0E0B  0871               	movf	___lwdiv@divisor+1,w
  4198  0E0C  0273               	subwf	___lwdiv@dividend+1,w
  4199  0E0D  1D03               	skipz
  4200  0E0E  2E11               	goto	u2475
  4201  0E0F  0870               	movf	___lwdiv@divisor,w
  4202  0E10  0272               	subwf	___lwdiv@dividend,w
  4203  0E11                     u2475:	
  4204  0E11  1C03               	skipc
  4205  0E12  2E1A               	goto	l2269
  4206  0E13  0870               	movf	___lwdiv@divisor,w
  4207  0E14  02F2               	subwf	___lwdiv@dividend,f
  4208  0E15  0871               	movf	___lwdiv@divisor+1,w
  4209  0E16  1C03               	skipc
  4210  0E17  03F3               	decf	___lwdiv@dividend+1,f
  4211  0E18  02F3               	subwf	___lwdiv@dividend+1,f
  4212  0E19  1475               	bsf	___lwdiv@quotient,0
  4213  0E1A                     l2269:	
  4214  0E1A  3001               	movlw	1
  4215  0E1B                     u2485:	
  4216  0E1B  1003               	clrc
  4217  0E1C  0CF1               	rrf	___lwdiv@divisor+1,f
  4218  0E1D  0CF0               	rrf	___lwdiv@divisor,f
  4219  0E1E  3EFF               	addlw	-1
  4220  0E1F  1D03               	skipz
  4221  0E20  2E1B               	goto	u2485
  4222  0E21  3001               	movlw	1
  4223  0E22  02F7               	subwf	___lwdiv@counter,f
  4224  0E23  1D03               	btfss	3,2
  4225  0E24  2E04               	goto	l2263
  4226  0E25                     l2273:	
  4227  0E25  0876               	movf	___lwdiv@quotient+1,w
  4228  0E26  01F1               	clrf	?___lwdiv+1
  4229  0E27  07F1               	addwf	?___lwdiv+1,f
  4230  0E28  0875               	movf	___lwdiv@quotient,w
  4231  0E29  01F0               	clrf	?___lwdiv
  4232  0E2A  07F0               	addwf	?___lwdiv,f
  4233  0E2B  0008               	return
  4234  0E2C                     __end_of___lwdiv:	
  4235                           
  4236                           	psect	text14
  4237  0EC9                     __ptext14:	
  4238 ;; *************** function _lcdInit *****************
  4239 ;; Defined at:
  4240 ;;		line 34 in file "lcd.h"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;		None
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;		None               void
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0, pclath, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4254 ;;      Params:         0       0       0       0       0
  4255 ;;      Locals:         0       0       0       0       0
  4256 ;;      Temps:          2       0       0       0       0
  4257 ;;      Totals:         2       0       0       0       0
  4258 ;;Total ram usage:        2 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    1
  4261 ;; This function calls:
  4262 ;;		_lcdWrite
  4263 ;; This function is called by:
  4264 ;;		_main
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function _lcdInit
  4270  0EC9                     _lcdInit:	
  4271                           
  4272                           ;lcd.h: 36: _delay((unsigned long)((20)*(8000000/4000.0)));
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _lcdInit: [wreg+status,2+status,0+pclath+cstack]
  4276  0EC9  3034               	movlw	52
  4277  0ECA  00F4               	movwf	??_lcdInit+1
  4278  0ECB  30F1               	movlw	241
  4279  0ECC  00F3               	movwf	??_lcdInit
  4280  0ECD                     u4397:	
  4281  0ECD  0BF3               	decfsz	??_lcdInit,f
  4282  0ECE  2ECD               	goto	u4397
  4283  0ECF  0BF4               	decfsz	??_lcdInit+1,f
  4284  0ED0  2ECD               	goto	u4397
  4285  0ED1  2ED2               	nop2
  4286                           
  4287                           ;lcd.h: 37: lcdWrite(0, 0x30);
  4288  0ED2  3030               	movlw	48
  4289  0ED3  00F3               	movwf	??_lcdInit
  4290  0ED4  0873               	movf	??_lcdInit,w
  4291  0ED5  00F0               	movwf	lcdWrite@data
  4292  0ED6  3000               	movlw	0
  4293  0ED7  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  4294                           
  4295                           ;lcd.h: 38: lcdWrite(0, 0x30);
  4296  0EDC  3030               	movlw	48
  4297  0EDD  00F3               	movwf	??_lcdInit
  4298  0EDE  0873               	movf	??_lcdInit,w
  4299  0EDF  00F0               	movwf	lcdWrite@data
  4300  0EE0  3000               	movlw	0
  4301  0EE1  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  4302                           
  4303                           ;lcd.h: 39: lcdWrite(0, 0x30);
  4304  0EE6  3030               	movlw	48
  4305  0EE7  00F3               	movwf	??_lcdInit
  4306  0EE8  0873               	movf	??_lcdInit,w
  4307  0EE9  00F0               	movwf	lcdWrite@data
  4308  0EEA  3000               	movlw	0
  4309  0EEB  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  4310                           
  4311                           ;lcd.h: 40: lcdWrite(0, 0x38);
  4312  0EF0  3038               	movlw	56
  4313  0EF1  00F3               	movwf	??_lcdInit
  4314  0EF2  0873               	movf	??_lcdInit,w
  4315  0EF3  00F0               	movwf	lcdWrite@data
  4316  0EF4  3000               	movlw	0
  4317  0EF5  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  4318                           
  4319                           ;lcd.h: 41: lcdWrite(0, 0x0C);
  4320  0EFA  300C               	movlw	12
  4321  0EFB  00F3               	movwf	??_lcdInit
  4322  0EFC  0873               	movf	??_lcdInit,w
  4323  0EFD  00F0               	movwf	lcdWrite@data
  4324  0EFE  3000               	movlw	0
  4325  0EFF  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  4326                           
  4327                           ;lcd.h: 42: lcdWrite(0, 0x01);
  4328  0F04  01F0               	clrf	lcdWrite@data
  4329  0F05  0AF0               	incf	lcdWrite@data,f
  4330  0F06  3000               	movlw	0
  4331  0F07  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  4332                           
  4333                           ;lcd.h: 43: lcdWrite(0, 0x06);
  4334  0F0C  3006               	movlw	6
  4335  0F0D  00F3               	movwf	??_lcdInit
  4336  0F0E  0873               	movf	??_lcdInit,w
  4337  0F0F  00F0               	movwf	lcdWrite@data
  4338  0F10  3000               	movlw	0
  4339  0F11  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  4340                           
  4341                           ;lcd.h: 44: lcdWrite(0, 0x02);
  4342  0F16  3002               	movlw	2
  4343  0F17  00F3               	movwf	??_lcdInit
  4344  0F18  0873               	movf	??_lcdInit,w
  4345  0F19  00F0               	movwf	lcdWrite@data
  4346  0F1A  3000               	movlw	0
  4347  0F1B  120A  158A  24FA   	fcall	_lcdWrite
      +       120A  158A         
  4348                           
  4349                           ;lcd.h: 45: _delay((unsigned long)((2)*(8000000/4000.0)));
  4350  0F20  3006               	movlw	6
  4351  0F21  00F4               	movwf	??_lcdInit+1
  4352  0F22  3030               	movlw	48
  4353  0F23  00F3               	movwf	??_lcdInit
  4354  0F24                     u4407:	
  4355  0F24  0BF3               	decfsz	??_lcdInit,f
  4356  0F25  2F24               	goto	u4407
  4357  0F26  0BF4               	decfsz	??_lcdInit+1,f
  4358  0F27  2F24               	goto	u4407
  4359  0F28  0000               	nop
  4360  0F29  0008               	return
  4361  0F2A                     __end_of_lcdInit:	
  4362                           
  4363                           	psect	text15
  4364  0DB5                     __ptext15:	
  4365 ;; *************** function _lcdGoto *****************
  4366 ;; Defined at:
  4367 ;;		line 56 in file "lcd.h"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  row             1    wreg     unsigned char 
  4370 ;;  col             1    3[COMMON] unsigned char 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  row             1    5[COMMON] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;		None               void
  4375 ;; Registers used:
  4376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4382 ;;      Params:         1       0       0       0       0
  4383 ;;      Locals:         1       0       0       0       0
  4384 ;;      Temps:          1       0       0       0       0
  4385 ;;      Totals:         3       0       0       0       0
  4386 ;;Total ram usage:        3 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    1
  4389 ;; This function calls:
  4390 ;;		_lcdWrite
  4391 ;; This function is called by:
  4392 ;;		_main
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           
  4397                           ;psect for function _lcdGoto
  4398  0DB5                     _lcdGoto:	
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _lcdGoto: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4402                           ;lcdGoto@row stored from wreg
  4403  0DB5  00F5               	movwf	lcdGoto@row
  4404                           
  4405                           ;lcd.h: 58: switch(row)
  4406  0DB6  2DDF               	goto	l2329
  4407  0DB7                     l2319:	
  4408                           ;lcd.h: 59: {
  4409                           ;lcd.h: 60: case 1: lcdWrite(0, 0x80 + col - 1);
  4410                           
  4411  0DB7  0873               	movf	lcdGoto@col,w
  4412  0DB8  3E7F               	addlw	127
  4413  0DB9  00F4               	movwf	??_lcdGoto
  4414  0DBA  0874               	movf	??_lcdGoto,w
  4415  0DBB  00F0               	movwf	lcdWrite@data
  4416  0DBC  3000               	movlw	0
  4417  0DBD  120A  158A  24FA   	fcall	_lcdWrite
  4418                           
  4419                           ;lcd.h: 61: break;
  4420  0DC0  0008               	return
  4421  0DC1                     l2321:	
  4422                           ;lcd.h: 62: case 2: lcdWrite(0, 0xC0 + col - 1);
  4423                           
  4424  0DC1  0873               	movf	lcdGoto@col,w
  4425  0DC2  3EBF               	addlw	191
  4426  0DC3  00F4               	movwf	??_lcdGoto
  4427  0DC4  0874               	movf	??_lcdGoto,w
  4428  0DC5  00F0               	movwf	lcdWrite@data
  4429  0DC6  3000               	movlw	0
  4430  0DC7  120A  158A  24FA   	fcall	_lcdWrite
  4431                           
  4432                           ;lcd.h: 63: break;
  4433  0DCA  0008               	return
  4434  0DCB                     l2323:	
  4435                           ;lcd.h: 64: case 3: lcdWrite(0, 0x94 + col - 1);
  4436                           
  4437  0DCB  0873               	movf	lcdGoto@col,w
  4438  0DCC  3E93               	addlw	147
  4439  0DCD  00F4               	movwf	??_lcdGoto
  4440  0DCE  0874               	movf	??_lcdGoto,w
  4441  0DCF  00F0               	movwf	lcdWrite@data
  4442  0DD0  3000               	movlw	0
  4443  0DD1  120A  158A  24FA   	fcall	_lcdWrite
  4444                           
  4445                           ;lcd.h: 65: break;
  4446  0DD4  0008               	return
  4447  0DD5                     l2325:	
  4448                           ;lcd.h: 66: case 4: lcdWrite(0, 0xD4 + col - 1);
  4449                           
  4450  0DD5  0873               	movf	lcdGoto@col,w
  4451  0DD6  3ED3               	addlw	211
  4452  0DD7  00F4               	movwf	??_lcdGoto
  4453  0DD8  0874               	movf	??_lcdGoto,w
  4454  0DD9  00F0               	movwf	lcdWrite@data
  4455  0DDA  3000               	movlw	0
  4456  0DDB  120A  158A  24FA   	fcall	_lcdWrite
  4457                           
  4458                           ;lcd.h: 68: }
  4459                           
  4460                           ;lcd.h: 67: break;
  4461  0DDE  0008               	return
  4462  0DDF                     l2329:	
  4463  0DDF  0875               	movf	lcdGoto@row,w
  4464                           
  4465                           ; Switch size 1, requested type "space"
  4466                           ; Number of cases is 4, Range of values is 1 to 4
  4467                           ; switch strategies available:
  4468                           ; Name         Instructions Cycles
  4469                           ; simple_byte           13     7 (average)
  4470                           ; direct_byte           23    11 (fixed)
  4471                           ; jumptable            263     9 (fixed)
  4472                           ;	Chosen strategy is simple_byte
  4473  0DE0  3A01               	xorlw	1	; case 1
  4474  0DE1  1903               	skipnz
  4475  0DE2  2DB7               	goto	l2319
  4476  0DE3  3A03               	xorlw	3	; case 2
  4477  0DE4  1903               	skipnz
  4478  0DE5  2DC1               	goto	l2321
  4479  0DE6  3A01               	xorlw	1	; case 3
  4480  0DE7  1903               	skipnz
  4481  0DE8  2DCB               	goto	l2323
  4482  0DE9  3A07               	xorlw	7	; case 4
  4483  0DEA  1903               	skipnz
  4484  0DEB  2DD5               	goto	l2325
  4485  0DEC  2DED               	goto	l121
  4486  0DED                     l121:	
  4487  0DED  0008               	return
  4488  0DEE                     __end_of_lcdGoto:	
  4489                           
  4490                           	psect	text16
  4491  0CFA                     __ptext16:	
  4492 ;; *************** function _lcdWrite *****************
  4493 ;; Defined at:
  4494 ;;		line 48 in file "lcd.h"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  rs              1    wreg     unsigned char 
  4497 ;;  data            1    0[COMMON] unsigned char 
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;  rs              1    2[COMMON] unsigned char 
  4500 ;; Return value:  Size  Location     Type
  4501 ;;		None               void
  4502 ;; Registers used:
  4503 ;;		wreg
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4509 ;;      Params:         1       0       0       0       0
  4510 ;;      Locals:         1       0       0       0       0
  4511 ;;      Temps:          1       0       0       0       0
  4512 ;;      Totals:         3       0       0       0       0
  4513 ;;Total ram usage:        3 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_lcdInit
  4519 ;;		_lcdGoto
  4520 ;;		_lcdPutstr
  4521 ;;		_lcdNumber
  4522 ;;		_main
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           
  4527                           ;psect for function _lcdWrite
  4528  0CFA                     _lcdWrite:	
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in _lcdWrite: [wreg]
  4532                           ;lcdWrite@rs stored from wreg
  4533  0CFA  00F2               	movwf	lcdWrite@rs
  4534                           
  4535                           ;lcd.h: 50: RB6 = rs;
  4536  0CFB  1C72               	btfss	lcdWrite@rs,0
  4537  0CFC  2D01               	goto	u2370
  4538  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  4539  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  4540  0CFF  1706               	bsf	6,6	;volatile
  4541  0D00  2D04               	goto	l2205
  4542  0D01                     u2370:	
  4543  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  4544  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  4545  0D03  1306               	bcf	6,6	;volatile
  4546  0D04                     l2205:	
  4547                           
  4548                           ;lcd.h: 51: PORTD = data;
  4549  0D04  0870               	movf	lcdWrite@data,w
  4550  0D05  0088               	movwf	8	;volatile
  4551                           
  4552                           ;lcd.h: 52: ((RE2=1), _delay((unsigned long)((2)*(8000000/4000000.0))), (RE2=0), _delay(
      +                          (unsigned long)((2)*(8000000/4000000.0))));
  4553  0D06  1509               	bsf	9,2	;volatile
  4554  0D07  2D08               	nop2	;2 cycle nop
  4555  0D08  2D09               	nop2	;2 cycle nop
  4556  0D09  1283               	bcf	3,5	;RP0=0, select bank0
  4557  0D0A  1303               	bcf	3,6	;RP1=0, select bank0
  4558  0D0B  1109               	bcf	9,2	;volatile
  4559  0D0C  2D0D               	nop2	;2 cycle nop
  4560  0D0D  2D0E               	nop2	;2 cycle nop
  4561                           
  4562                           ;lcd.h: 53: _delay((unsigned long)((40)*(8000000/4000000.0)));
  4563  0D0E  301A               	movlw	26
  4564  0D0F  00F1               	movwf	??_lcdWrite
  4565  0D10                     u4417:	
  4566  0D10  0BF1               	decfsz	??_lcdWrite,f
  4567  0D11  2D10               	goto	u4417
  4568  0D12  0000               	nop
  4569  0D13  0008               	return
  4570  0D14                     __end_of_lcdWrite:	
  4571                           
  4572                           	psect	text17
  4573  0008                     __ptext17:	
  4574 ;; *************** function _beep *****************
  4575 ;; Defined at:
  4576 ;;		line 363 in file "main.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  times           1    wreg     unsigned char 
  4579 ;;  delayMs         2    0[COMMON] unsigned int 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  times           1    4[COMMON] unsigned char 
  4582 ;;  loop            2    5[COMMON] unsigned int 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;		None               void
  4585 ;; Registers used:
  4586 ;;		wreg, status,2, status,0
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4592 ;;      Params:         2       0       0       0       0
  4593 ;;      Locals:         3       0       0       0       0
  4594 ;;      Temps:          2       0       0       0       0
  4595 ;;      Totals:         7       0       0       0       0
  4596 ;;Total ram usage:        7 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_main
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function _beep
  4607  0008                     _beep:	
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _beep: [wreg+status,2+status,0]
  4611                           ;beep@times stored from wreg
  4612  0008  00F4               	movwf	beep@times
  4613  0009                     L21:	
  4614                           
  4615                           ;main.c: 365: uInt loop;
  4616                           ;main.c: 366: for(; times > 0; times--)
  4617  0009  08F4               	movf	beep@times,f
  4618  000A  1903               	btfsc	3,2
  4619  000B  0008               	return
  4620                           
  4621                           ;main.c: 367: {
  4622                           ;main.c: 368: RB7 = 1;
  4623  000C  1283               	bcf	3,5	;RP0=0, select bank0
  4624  000D  1303               	bcf	3,6	;RP1=0, select bank0
  4625  000E  1786               	bsf	6,7	;volatile
  4626                           
  4627                           ;main.c: 369: for(loop = 0; loop < delayMs; loop++) _delay((unsigned long)((1)*(8000000/
      +                          4000.0)));
  4628  000F  01F5               	clrf	beep@loop
  4629  0010  01F6               	clrf	beep@loop+1
  4630  0011                     l328:	
  4631  0011  0871               	movf	beep@delayMs+1,w
  4632  0012  0276               	subwf	beep@loop+1,w
  4633  0013  1D03               	skipz
  4634  0014  2817               	goto	u2655
  4635  0015  0870               	movf	beep@delayMs,w
  4636  0016  0275               	subwf	beep@loop,w
  4637  0017                     u2655:	
  4638  0017  1803               	btfsc	3,0
  4639  0018  2829               	goto	l330
  4640  0019  3003               	movlw	3
  4641  001A  00F3               	movwf	??_beep+1
  4642  001B  3097               	movlw	151
  4643  001C  00F2               	movwf	??_beep
  4644  001D                     u4427:	
  4645  001D  0BF2               	decfsz	??_beep,f
  4646  001E  281D               	goto	u4427
  4647  001F  0BF3               	decfsz	??_beep+1,f
  4648  0020  281D               	goto	u4427
  4649  0021  2822               	nop2
  4650  0022  3001               	movlw	1
  4651  0023  07F5               	addwf	beep@loop,f
  4652  0024  1803               	skipnc
  4653  0025  0AF6               	incf	beep@loop+1,f
  4654  0026  3000               	movlw	0
  4655  0027  07F6               	addwf	beep@loop+1,f
  4656  0028  2811               	goto	l328
  4657  0029                     l330:	
  4658                           
  4659                           ;main.c: 370: RB7 = 0;
  4660  0029  1283               	bcf	3,5	;RP0=0, select bank0
  4661  002A  1303               	bcf	3,6	;RP1=0, select bank0
  4662  002B  1386               	bcf	6,7	;volatile
  4663                           
  4664                           ;main.c: 371: for(loop = 0; loop < delayMs; loop++) _delay((unsigned long)((1)*(8000000/
      +                          4000.0)));
  4665  002C  01F5               	clrf	beep@loop
  4666  002D  01F6               	clrf	beep@loop+1
  4667  002E                     l331:	
  4668  002E  0871               	movf	beep@delayMs+1,w
  4669  002F  0276               	subwf	beep@loop+1,w
  4670  0030  1D03               	skipz
  4671  0031  2834               	goto	u2665
  4672  0032  0870               	movf	beep@delayMs,w
  4673  0033  0275               	subwf	beep@loop,w
  4674  0034                     u2665:	
  4675  0034  1803               	btfsc	3,0
  4676  0035  2846               	goto	l2403
  4677  0036  3003               	movlw	3
  4678  0037  00F3               	movwf	??_beep+1
  4679  0038  3097               	movlw	151
  4680  0039  00F2               	movwf	??_beep
  4681  003A                     u4437:	
  4682  003A  0BF2               	decfsz	??_beep,f
  4683  003B  283A               	goto	u4437
  4684  003C  0BF3               	decfsz	??_beep+1,f
  4685  003D  283A               	goto	u4437
  4686  003E  283F               	nop2
  4687  003F  3001               	movlw	1
  4688  0040  07F5               	addwf	beep@loop,f
  4689  0041  1803               	skipnc
  4690  0042  0AF6               	incf	beep@loop+1,f
  4691  0043  3000               	movlw	0
  4692  0044  07F6               	addwf	beep@loop+1,f
  4693  0045  282E               	goto	l331
  4694  0046                     l2403:	
  4695  0046  3001               	movlw	1
  4696  0047  02F4               	subwf	beep@times,f
  4697  0048  2809               	goto	L21
  4698  0049                     __end_of_beep:	
  4699  007E                     btemp	set	126	;btemp
  4700  007E                     wtemp	set	126
  4701  007E                     wtemp0	set	126
  4702  0080                     wtemp1	set	128
  4703  0082                     wtemp2	set	130
  4704  0084                     wtemp3	set	132
  4705  0086                     wtemp4	set	134
  4706  0088                     wtemp5	set	136
  4707  007F                     wtemp6	set	127
  4708  007E                     ttemp	set	126
  4709  007E                     ttemp0	set	126
  4710  0081                     ttemp1	set	129
  4711  0084                     ttemp2	set	132
  4712  0087                     ttemp3	set	135
  4713  007F                     ttemp4	set	127
  4714  007E                     ltemp	set	126
  4715  007E                     ltemp0	set	126
  4716  0082                     ltemp1	set	130
  4717  0086                     ltemp2	set	134
  4718  0080                     ltemp3	set	128


Data Sizes:
    Strings     87
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     53      53
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    memcmp@s2	PTR const void  size(1) Largest target is 3
		 -> main@string(BANK0[3]), 

    memcmp@s1	PTR const void  size(1) Largest target is 4
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[4]), STR_8(CODE[4]), 

    lcdPutstr@s	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_7(CODE[9]), STR_6(CODE[9]), STR_5(CODE[9]), STR_4(CODE[9]), 
		 -> STR_3(CODE[9]), STR_2(CODE[9]), STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _motor->_setPwmRC1
    _motor->_setPwmRC2
    _setPwmRC2->___awdiv
    _setPwmRC1->___awdiv
    ___awdiv->___wmul
    _lcdPutstr->_lcdWrite
    _lcdNumber->___lwdiv
    _lcdInit->_lcdWrite
    _lcdGoto->_lcdWrite

Critical Paths under _main in BANK0

    _main->_motor
    _motor->_setPwmRC1
    _motor->_setPwmRC2
    _setPwmRC2->___aldiv
    _setPwmRC1->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   17581
                                             16 BANK0     37    37      0
                               _beep
                            _lcdGoto
                            _lcdInit
                          _lcdNumber
                          _lcdPutstr
                           _lcdWrite
                             _memcmp
                              _motor
                            _picInit
 ---------------------------------------------------------------------------------
 (1) _picInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motor                                                6     5      1    6290
                                             10 BANK0      6     5      1
                             ___bmul
                          _setPwmRC1
                          _setPwmRC2
 ---------------------------------------------------------------------------------
 (2) _setPwmRC2                                            7     3      4    1735
                                             11 COMMON     3     3      0
                                              6 BANK0      4     0      4
                            ___aldiv
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _setPwmRC1                                            7     3      4    1735
                                             11 COMMON     3     3      0
                                              6 BANK0      4     0      4
                            ___aldiv
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     724
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     198
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _memcmp                                               6     3      3     910
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _lcdPutstr                                            2     2      0    1519
                                              3 COMMON     2     2      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdNumber                                           19    15      4    2621
                                              8 COMMON     4     0      4
                                              0 BANK0     15    15      0
                            ___lwdiv
                            ___lwmod
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     371
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     374
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              2     2      0    1263
                                              3 COMMON     2     2      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdGoto                                              3     2      1    1797
                                              3 COMMON     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdWrite                                             3     2      1    1263
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _beep                                                 7     5      2     455
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _lcdGoto
     _lcdWrite
   _lcdInit
     _lcdWrite
   _lcdNumber
     ___lwdiv
     ___lwmod
     _lcdWrite
   _lcdPutstr
     _lcdWrite
   _lcdWrite
   _memcmp
   _motor
     ___bmul
     _setPwmRC1
       ___aldiv
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _setPwmRC2
       ___aldiv
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _picInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     35      35       5       66.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sat May 17 17:34:54 2014

                       pc 0002            ___bmul@product 0072               __CFG_CP$OFF 0000  
            ___awdiv@sign 0021                        fsr 0004       ___wmul@multiplicand 0072  
            lcdWrite@data 0070                       l200 0333                       l121 0DED  
                     l210 0392                       l202 0346                       l212 03A5  
                     l204 0359                       l220 03C8                       l221 03D1  
                     l214 03B8                       l206 036C                       l231 0417  
                     l223 03DC                       l312 07D7                       l304 07A7  
                     l232 0431                       l208 037F                       l225 03E3  
                     l330 0029                       l331 002E                       l307 07AB  
                     l251 0509                       l227 03EE                       l244 04BF  
                     l236 045A                       l254 050D                       l247 04C3  
                     l239 045E                       l328 0011                       l344 00B2  
                     l192 0320                       l338 0074                       l282 06CD  
                     l284 06D8                       l286 06DF                       l279 06A6  
                     l464 015E                       l296 0746                       l288 06EA  
                     l299 074A                       l789 0D3A                       _RB0 0030  
                     _RB1 0031                       _RA3 002B                       _RB2 0032  
                     _RA4 002C                       _RB3 0033                       _RA5 002D  
                     _RB4 0034                       _RB5 0035                       _RE0 0048  
                     _RB6 0036                       _RE1 0049                       _RB7 0037  
                     _RE2 004A                       _PR2 0092              __CFG_CPD$OFF 0000  
                     _RX9 00C6                       _TX9 04C6                       fsr0 0004  
                     indf 0000              __CFG_LVP$OFF 0000                      l2205 0D04  
                    l2125 017F                      l2117 016F                      l2143 01D2  
                    l2135 01B7                      l2127 018F                      l2321 0DC1  
                    l2241 0CF1                      l2161 0E83                      l2403 0046  
                    l2323 0DCB                      l2139 01C4                      l2171 0E8B  
                    l2155 0E78                      l2325 0DD5                      l2261 0DF6  
                    l2237 0CEB                      l2173 0E99                      l2421 006B  
                    l2319 0DB7                      l2263 0E04                      l2183 0EBA  
                    l2415 0063                      l2329 0DDF                      l2273 0E25  
                    l2353 00DD                      l2337 0D54                      l2193 0D32  
                    l2291 0DA3                      l2355 00DE                      l2347 00D0  
                    l2187 0EC2                      l2179 0EAF                      l2451 00BA  
                    l2443 00A9                      l2269 0E1A                      l2285 0D87  
                    l2373 0135                      l2461 0E60                      l2437 00A1  
                    l2429 007C                      l2287 0D95                      l2295 0DAE  
                    l2463 0E2D                      l2527 027E                      l2465 0E69  
                    l2705 03FD                      l2529 0224                      l2563 02B5  
                    l2901 06F9                      l2813 05B0                      l2805 0595  
                    l2581 0310                      l2751 04DA                      l2735 0476  
                    l2583 031F                      l2921 0762                      l2833 0620  
                    l2737 047C                      l2569 02DE                      l2907 0703  
                    l2851 0678                      l2771 0524                      l2579 030E  
                    l2941 07DC                      l2845 0671                      l2829 0602  
                    l2861 06A4                      l2935 07C3                      l2943 07E2  
                    l2849 0676                      l2869 06C4                      l2789 0566  
                    STR_1 0833                      STR_2 082A                      STR_3 0818  
                    STR_4 0821                      STR_5 080F                      STR_6 0806  
                    STR_7 083C                      STR_8 0845                      STR_9 0851  
                    _BRGH 04C2                      _CREN 00C4                      u2205 01B8  
                    u2305 0EB0                      u2165 0183                      u2405 0FF6  
                    u2185 0191                      u2265 0E8E                      u2345 0D3B  
                    u2370 0D01                      u2515 0D8A                      u2195 01A6  
                    u2355 0D42                      u2445 0DF9                      u2285 0E9A  
                    u2535 0D9B                      u2295 0EA6                      u4207 0232  
                    u2465 0E05                      u2545 0DA4                      u4217 0253  
                    u2475 0E11                      u2395 0F8B                      u4307 04F3  
                    u4227 0268                      u2485 0E1B                      u4317 051E  
                    u4237 0292                      u2655 0017                      u4407 0F24  
                    u4327 06BD                      u4247 041D                      u2665 0034  
                    u4417 0D10                      u4337 071D                      u4257 0442  
                    u2905 031E                      u4427 001D                      u4347 0734  
                    u4267 046F                      u4437 003A                      u4357 075B  
                    u4277 0492                      u4197 020A                      u2775 0E39  
                    u4367 077E                      u4287 04A9                      u4377 0795  
                    u4297 04D4                      u2865 02D3                      u4387 07BC  
                    u2875 02EC                      _RCIF 0065                      u4397 0ECD  
                    u2885 02FC                      u2895 030C                      _OERR 00C1  
                    _SPEN 00C7                      _TXEN 04C5                      _TXIF 0064  
                    _beep 0008                      _main 01DB                      btemp 007E  
                    ltemp 007E                      start 0000                      ttemp 007E  
                    wtemp 007E             __CFG_IESO$OFF 0000         ___bmul@multiplier 0073  
           __CFG_MCLRE$ON 0000                     ?_beep 0070           __end_of___aldiv 01DB  
                   ?_main 0070           __end_of___awdiv 0EC9                     STR_10 0855  
                   STR_11 0849                     STR_12 084D                     STR_13 0859  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188           ___awdiv@divisor 0076  
                   _T2CON 0012                     _IRCF0 047C                     _IRCF1 047D  
                   _IRCF2 047E           __end_of___lwdiv 0E2C           __end_of___lwmod 0DB5  
         ___awdiv@counter 0020                     _RCREG 001A                     _SPBRG 0099  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _PORTD 0008                     _PORTE 0009                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _TRISE 0089                     _TXREG 0019             __CFG_PWRTE$ON 0000  
         __end_of_lcdInit 0F2A           __end_of_lcdGoto 0DEE            __CFG_FCMEN$OFF 0000  
         __end_of_picInit 0D30                     _motor 0049                     main@i 0048  
          __CFG_BOREN$OFF 0000                     pclath 000A                     ltemp0 007E  
                   ltemp1 0082                     ltemp2 0086                     ltemp3 0080  
                   ttemp0 007E                     ttemp1 0081                     ttemp2 0084  
                   ttemp3 0087                     ttemp4 007F                     status 0003  
                   wtemp0 007E                     wtemp1 0080                     wtemp2 0082  
                   wtemp3 0084                     wtemp4 0086                     wtemp5 0088  
                   wtemp6 007F           __initialization 07FC              __end_of_beep 0049  
            __end_of_main 07FC                    ??_beep 0072                    ??_main 0030  
                  _CCPR1L 0015                    _CCPR2L 001B          ___awdiv@dividend 0078  
                  ?_motor 002A                    _ANSELH 0189             main@pathTotal 004A  
        __end_of_lcdWrite 0D14                    ___bmul 0CE9                 ??___aldiv 0078  
                  ___wmul 0D30                 ??___awdiv 007A                 ??___lwdiv 0074  
               ??___lwmod 0074                    _memcmp 0E2C          ___awdiv@quotient 0022  
               ??_lcdInit 0073                 ??_lcdGoto 0074                 ??_picInit 0070  
 __end_of__initialization 07FC       ___bmul@multiplicand 0070            __pcstackCOMMON 0070  
           __end_of_motor 00C9        __size_of_lcdNumber 0083        __size_of_lcdPutstr 002E  
                 ??_motor 002B                __pmaintext 01DB                   ?___bmul 0070  
                 ?___wmul 0070        __size_of_setPwmRC1 006B        __size_of_setPwmRC2 006B  
                 _CCP1CON 0017                   _CCP2CON 001D                   ?_memcmp 0070  
               ?_lcdWrite 0070                __stringtab 0800            main@pathLength 0054  
       __end_of_lcdNumber 014C         __end_of_lcdPutstr 0D81                   ___aldiv 014C  
         __size_of___bmul 0011                   ___awdiv 0E6C           __size_of___wmul 0023  
                 ___lwdiv 0DEE                   ___lwmod 0D81           __size_of_memcmp 0040  
                 _lcdInit 0EC9                   _lcdGoto 0DB5                   __ptext1 0D14  
                 __ptext2 0049                   __ptext3 0F95                   __ptext4 0F2A  
                 __ptext5 0D30                   __ptext6 0E6C                   __ptext7 014C  
                 __ptext8 0CE9                   __ptext9 0E2C                   _picInit 0D14  
        ___aldiv@dividend 0074                   main@dir 0053                ??_lcdWrite 0071  
    end_of_initialization 07FC         __end_of_setPwmRC1 0F95         __end_of_setPwmRC2 1000  
                 memcmp@n 0071            main@simplified 004B                lcdGoto@col 0073  
        ___aldiv@quotient 0022                lcdGoto@row 0075             setPwmRC1@freq 0026  
           setPwmRC2@freq 0026             setPwmRC1@duty 0028             setPwmRC2@duty 0028  
              lcdNumber@i 002D                lcdNumber@j 002E                lcdPutstr@s 0074  
              lcdWrite@rs 0072                main@string 004C            __end_of___bmul 0CFA  
          __end_of___wmul 0D53            __end_of_memcmp 0E6C       start_initialization 07FC  
__CFG_FOSC$INTRC_NOCLKOUT 0000                  ??___bmul 0071                  ??___wmul 0074  
                ??_memcmp 0073                 ___latbits 0002             __pcstackBANK0 0020  
     __end_of__stringdata 085D         __size_of_lcdWrite 001A          ___lwdiv@dividend 0072  
                ?___aldiv 0070                  ?___awdiv 0076                 _lcdNumber 00C9  
                ?___lwdiv 0070                  ?___lwmod 0070                 _lcdPutstr 0D53  
               beep@times 0074                 __pstrings 0800                setPwmRC1@a 007C  
              setPwmRC2@a 007C                  ?_lcdInit 0070                  ?_lcdGoto 0073  
                ?_picInit 0070          ___lwdiv@quotient 0075               beep@delayMs 0070  
          __size_of_motor 0080           ___aldiv@divisor 0070           ___aldiv@counter 0020  
          ___wmul@product 0074                motor@speed 002F                 _setPwmRC1 0F2A  
               _setPwmRC2 0F95                ?_lcdNumber 0078                ?_lcdPutstr 0070  
             __stringbase 0805               __stringdata 0806         ___wmul@multiplier 0070  
           motor@maxSpeed 002D           main@buzzerCount 004F                ?_setPwmRC1 0026  
              ?_setPwmRC2 0026            lcdNumber@digit 007B          __size_of___aldiv 008F  
        __size_of___awdiv 005D          __size_of___lwdiv 003E          __size_of___lwmod 0034  
      __end_of__stringtab 0806          __size_of_lcdInit 0061          __size_of_lcdGoto 0039  
        __size_of_picInit 001C           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 0D53                  __ptext11 00C9                  __ptext12 0D81  
                __ptext13 0DEE                  __ptext14 0EC9                  __ptext15 0DB5  
                __ptext16 0CFA                  __ptext17 0008                  beep@loop 0075  
                _lcdWrite 0CFA             __size_of_beep 0041             __size_of_main 0621  
             ??_lcdNumber 0020               ??_lcdPutstr 0073                  main@path 0034  
            motor@speedLM 002E              motor@speedRM 002A                  memcmp@s1 0075  
                memcmp@s2 0070             lcdNumber@base 007A          ___lwmod@dividend 0072  
             ??_setPwmRC1 007B               ??_setPwmRC2 007B                 stringcode 0800  
         ___lwmod@divisor 0070           ___lwmod@counter 0075                  stringdir 0800  
                stringtab 0800              ___aldiv@sign 0021               lcdNumber@di 0023  
             lcdNumber@no 0078  
