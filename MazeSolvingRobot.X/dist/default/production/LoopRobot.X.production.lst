

Microchip Technology PIC LITE Macro Assembler V1.30 build 55553 
                                                                                               Fri Feb 14 21:05:00 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000D                     	;# 
    33  000E                     	;# 
    34  000E                     	;# 
    35  000F                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0013                     	;# 
    40  0014                     	;# 
    41  0015                     	;# 
    42  0015                     	;# 
    43  0016                     	;# 
    44  0017                     	;# 
    45  0018                     	;# 
    46  0019                     	;# 
    47  001A                     	;# 
    48  001B                     	;# 
    49  001B                     	;# 
    50  001C                     	;# 
    51  001D                     	;# 
    52  001E                     	;# 
    53  001F                     	;# 
    54  0081                     	;# 
    55  0085                     	;# 
    56  0086                     	;# 
    57  0087                     	;# 
    58  0088                     	;# 
    59  0089                     	;# 
    60  008C                     	;# 
    61  008D                     	;# 
    62  008E                     	;# 
    63  008F                     	;# 
    64  0090                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0093                     	;# 
    69  0093                     	;# 
    70  0094                     	;# 
    71  0095                     	;# 
    72  0096                     	;# 
    73  0097                     	;# 
    74  0098                     	;# 
    75  0099                     	;# 
    76  009A                     	;# 
    77  009B                     	;# 
    78  009C                     	;# 
    79  009D                     	;# 
    80  009E                     	;# 
    81  009F                     	;# 
    82  0105                     	;# 
    83  0107                     	;# 
    84  0108                     	;# 
    85  0109                     	;# 
    86  010C                     	;# 
    87  010C                     	;# 
    88  010D                     	;# 
    89  010E                     	;# 
    90  010F                     	;# 
    91  0185                     	;# 
    92  0187                     	;# 
    93  0188                     	;# 
    94  0189                     	;# 
    95  018C                     	;# 
    96  018D                     	;# 
    97  0017                     _CCP1CON	set	23
    98  001D                     _CCP2CON	set	29
    99  0015                     _CCPR1L	set	21
   100  001B                     _CCPR2L	set	27
   101  0005                     _PORTA	set	5
   102  0006                     _PORTB	set	6
   103  0007                     _PORTC	set	7
   104  0008                     _PORTD	set	8
   105  0009                     _PORTE	set	9
   106  001A                     _RCREG	set	26
   107  0012                     _T2CON	set	18
   108  0019                     _TXREG	set	25
   109  00C4                     _CREN	set	196
   110  00C1                     _OERR	set	193
   111  002B                     _RA3	set	43
   112  002C                     _RA4	set	44
   113  002D                     _RA5	set	45
   114  0030                     _RB0	set	48
   115  0032                     _RB2	set	50
   116  0033                     _RB3	set	51
   117  0034                     _RB4	set	52
   118  0035                     _RB5	set	53
   119  0037                     _RB7	set	55
   120  0065                     _RCIF	set	101
   121  0048                     _RE0	set	72
   122  0049                     _RE1	set	73
   123  00C6                     _RX9	set	198
   124  00C7                     _SPEN	set	199
   125  0064                     _TXIF	set	100
   126  0092                     _PR2	set	146
   127  0099                     _SPBRG	set	153
   128  0085                     _TRISA	set	133
   129  0086                     _TRISB	set	134
   130  0087                     _TRISC	set	135
   131  0088                     _TRISD	set	136
   132  0089                     _TRISE	set	137
   133  04C2                     _BRGH	set	1218
   134  047C                     _IRCF0	set	1148
   135  047D                     _IRCF1	set	1149
   136  047E                     _IRCF2	set	1150
   137  04C6                     _TX9	set	1222
   138  04C5                     _TXEN	set	1221
   139  0188                     _ANSEL	set	392
   140  0189                     _ANSELH	set	393
   141                           
   142                           	psect	text0
   143  0000                     __ptext0:	
   144                           ; #config settings
   145                           
   146                           
   147                           ;psect for function _beep
   148  0000                     
   149                           	psect	cinit
   150  07FC                     start_initialization:	
   151  07FC                     __initialization:	
   152  07FC                     end_of_initialization:	
   153                           ;End of C runtime variable initialization code
   154                           
   155  07FC                     __end_of__initialization:	
   156  07FC  0183               	clrf	3
   157  07FD  120A  118A  2EFE   	ljmp	_main	;jump to C main() function
   158                           
   159                           	psect	cstackCOMMON
   160  0070                     __pcstackCOMMON:	
   161  0070                     ?_picInit:	
   162  0070                     ??_picInit:	
   163                           ; 0 bytes @ 0x0
   164                           
   165  0070                     ?_beep:	
   166                           ; 0 bytes @ 0x0
   167                           
   168  0070                     ?_main:	
   169                           ; 0 bytes @ 0x0
   170                           
   171  0070                     ?___bmul:	
   172                           ; 0 bytes @ 0x0
   173                           
   174  0070                     ?___wmul:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0070                     ?___aldiv:	
   178                           ; 2 bytes @ 0x0
   179                           
   180  0070                     ___bmul@multiplicand:	
   181                           ; 4 bytes @ 0x0
   182                           
   183  0070                     beep@delayMs:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ___wmul@multiplier:	
   187                           ; 2 bytes @ 0x0
   188                           
   189  0070                     ___aldiv@divisor:	
   190                           ; 2 bytes @ 0x0
   191                           
   192                           
   193                           ; 4 bytes @ 0x0
   194  0070                     	ds	1
   195  0071                     ??___bmul:	
   196                           
   197                           ; 0 bytes @ 0x1
   198  0071                     	ds	1
   199  0072                     ??_beep:	
   200  0072                     ___bmul@product:	
   201                           ; 0 bytes @ 0x2
   202                           
   203  0072                     ___wmul@multiplicand:	
   204                           ; 1 bytes @ 0x2
   205                           
   206                           
   207                           ; 2 bytes @ 0x2
   208  0072                     	ds	1
   209  0073                     ___bmul@multiplier:	
   210                           
   211                           ; 1 bytes @ 0x3
   212  0073                     	ds	1
   213  0074                     ??___wmul:	
   214  0074                     beep@times:	
   215                           ; 0 bytes @ 0x4
   216                           
   217  0074                     ___wmul@product:	
   218                           ; 1 bytes @ 0x4
   219                           
   220  0074                     ___aldiv@dividend:	
   221                           ; 2 bytes @ 0x4
   222                           
   223                           
   224                           ; 4 bytes @ 0x4
   225  0074                     	ds	1
   226  0075                     beep@loop:	
   227                           
   228                           ; 2 bytes @ 0x5
   229  0075                     	ds	1
   230  0076                     ?___awdiv:	
   231  0076                     ___awdiv@divisor:	
   232                           ; 2 bytes @ 0x6
   233                           
   234                           
   235                           ; 2 bytes @ 0x6
   236  0076                     	ds	2
   237  0078                     ??___aldiv:	
   238  0078                     ___awdiv@dividend:	
   239                           ; 0 bytes @ 0x8
   240                           
   241                           
   242                           ; 2 bytes @ 0x8
   243  0078                     	ds	2
   244  007A                     ??___awdiv:	
   245                           
   246                           ; 0 bytes @ 0xA
   247  007A                     	ds	1
   248  007B                     ??_setPwmRC1:	
   249  007B                     ??_setPwmRC2:	
   250                           ; 0 bytes @ 0xB
   251                           
   252                           
   253                           ; 0 bytes @ 0xB
   254  007B                     	ds	1
   255  007C                     setPwmRC1@a:	
   256  007C                     setPwmRC2@a:	
   257                           ; 2 bytes @ 0xC
   258                           
   259                           
   260                           ; 2 bytes @ 0xC
   261  007C                     	ds	2
   262                           
   263                           	psect	cstackBANK0
   264  0020                     __pcstackBANK0:	
   265  0020                     ___aldiv@counter:	
   266  0020                     ___awdiv@counter:	
   267                           ; 1 bytes @ 0x0
   268                           
   269                           
   270                           ; 1 bytes @ 0x0
   271  0020                     	ds	1
   272  0021                     ___aldiv@sign:	
   273  0021                     ___awdiv@sign:	
   274                           ; 1 bytes @ 0x1
   275                           
   276                           
   277                           ; 1 bytes @ 0x1
   278  0021                     	ds	1
   279  0022                     ___awdiv@quotient:	
   280  0022                     ___aldiv@quotient:	
   281                           ; 2 bytes @ 0x2
   282                           
   283                           
   284                           ; 4 bytes @ 0x2
   285  0022                     	ds	4
   286  0026                     ?_setPwmRC1:	
   287  0026                     ?_setPwmRC2:	
   288                           ; 0 bytes @ 0x6
   289                           
   290  0026                     setPwmRC1@freq:	
   291                           ; 0 bytes @ 0x6
   292                           
   293  0026                     setPwmRC2@freq:	
   294                           ; 2 bytes @ 0x6
   295                           
   296                           
   297                           ; 2 bytes @ 0x6
   298  0026                     	ds	2
   299  0028                     setPwmRC1@duty:	
   300  0028                     setPwmRC2@duty:	
   301                           ; 2 bytes @ 0x8
   302                           
   303                           
   304                           ; 2 bytes @ 0x8
   305  0028                     	ds	2
   306  002A                     ?_motor:	
   307  002A                     motor@speedRM:	
   308                           ; 0 bytes @ 0xA
   309                           
   310                           
   311                           ; 1 bytes @ 0xA
   312  002A                     	ds	1
   313  002B                     ??_motor:	
   314                           
   315                           ; 0 bytes @ 0xB
   316  002B                     	ds	2
   317  002D                     motor@maxSpeed:	
   318                           
   319                           ; 1 bytes @ 0xD
   320  002D                     	ds	1
   321  002E                     motor@speedLM:	
   322                           
   323                           ; 1 bytes @ 0xE
   324  002E                     	ds	1
   325  002F                     motor@speed:	
   326                           
   327                           ; 1 bytes @ 0xF
   328  002F                     	ds	1
   329  0030                     ??_main:	
   330                           
   331                           ; 0 bytes @ 0x10
   332  0030                     	ds	3
   333                           
   334                           	psect	maintext
   335  06FE                     __pmaintext:	
   336 ;;
   337 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   338 ;;
   339 ;; *************** function _main *****************
   340 ;; Defined at:
   341 ;;		line 37 in file "main.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;		None
   346 ;; Return value:  Size  Location     Type
   347 ;;		None               void
   348 ;; Registers used:
   349 ;;		wreg, status,2, status,0, pclath, cstack
   350 ;; Tracked objects:
   351 ;;		On entry : 17F/0
   352 ;;		On exit  : 0/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   355 ;;      Params:         0       0       0       0       0
   356 ;;      Locals:         0       0       0       0       0
   357 ;;      Temps:          0       3       0       0       0
   358 ;;      Totals:         0       3       0       0       0
   359 ;;Total ram usage:        3 bytes
   360 ;; Hardware stack levels required when called:    3
   361 ;; This function calls:
   362 ;;		_beep
   363 ;;		_motor
   364 ;;		_picInit
   365 ;; This function is called by:
   366 ;;		Startup code after reset
   367 ;; This function uses a non-reentrant model
   368 ;;
   369                           
   370                           
   371                           ;psect for function _main
   372  06FE                     _main:	
   373                           
   374                           ;main.c: 39: picInit();
   375                           
   376                           ;incstack = 0
   377                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   378  06FE  120A  118A  243C   	fcall	_picInit
      +       120A  118A         
   379                           
   380                           ;main.c: 40: beep(2, 50);
   381  0703  3032               	movlw	50
   382  0704  00F0               	movwf	beep@delayMs
   383  0705  3000               	movlw	0
   384  0706  00F1               	movwf	beep@delayMs+1
   385  0707  3002               	movlw	2
   386  0708  120A  118A  247B   	fcall	_beep
      +       120A  118A         
   387  070D                     l141:	
   388                           ;main.c: 42: while(RB0);
   389                           
   390  070D  1283               	bcf	3,5	;RP0=0, select bank0
   391  070E  1303               	bcf	3,6	;RP1=0, select bank0
   392  070F  1806               	btfsc	6,0	;volatile
   393  0710  2F0D               	goto	l141
   394                           
   395                           ;main.c: 43: beep(1, 50);
   396  0711  3032               	movlw	50
   397  0712  00F0               	movwf	beep@delayMs
   398  0713  3000               	movlw	0
   399  0714  00F1               	movwf	beep@delayMs+1
   400  0715  3001               	movlw	1
   401  0716  120A  118A  247B   	fcall	_beep
      +       120A  118A         
   402  071B                     l1529:	
   403                           ;main.c: 45: while(1)
   404                           
   405                           
   406                           ;main.c: 46: {
   407                           ;main.c: 47: if(RA3||RA4||RA5)
   408  071B  1283               	bcf	3,5	;RP0=0, select bank0
   409  071C  1303               	bcf	3,6	;RP1=0, select bank0
   410  071D  1D85               	btfss	5,3	;volatile
   411  071E  1A05               	btfsc	5,4	;volatile
   412  071F  2F22               	goto	l1535
   413  0720  1E85               	btfss	5,5	;volatile
   414  0721  2F86               	goto	l145
   415  0722                     l1535:	
   416                           
   417                           ;main.c: 48: {
   418                           ;main.c: 49: motor(-50,-50);
   419  0722  30CE               	movlw	-50
   420  0723  00B0               	movwf	??_main
   421  0724  0830               	movf	??_main,w
   422  0725  00AA               	movwf	motor@speedRM
   423  0726  30CE               	movlw	-50
   424  0727  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   425                           
   426                           ;main.c: 50: _delay((unsigned long)((200)*(8000000/4000.0)));
   427  072C  3003               	movlw	3
   428  072D  1283               	bcf	3,5	;RP0=0, select bank0
   429  072E  1303               	bcf	3,6	;RP1=0, select bank0
   430  072F  00B2               	movwf	??_main+2
   431  0730  3008               	movlw	8
   432  0731  00B1               	movwf	??_main+1
   433  0732  3078               	movlw	120
   434  0733  00B0               	movwf	??_main
   435  0734                     u1047:	
   436  0734  0BB0               	decfsz	??_main,f
   437  0735  2F34               	goto	u1047
   438  0736  0BB1               	decfsz	??_main+1,f
   439  0737  2F34               	goto	u1047
   440  0738  0BB2               	decfsz	??_main+2,f
   441  0739  2F34               	goto	u1047
   442                           
   443                           ;main.c: 51: motor(0,0);
   444  073A  1283               	bcf	3,5	;RP0=0, select bank0
   445  073B  1303               	bcf	3,6	;RP1=0, select bank0
   446  073C  01AA               	clrf	motor@speedRM
   447  073D  3000               	movlw	0
   448  073E  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   449                           
   450                           ;main.c: 52: _delay((unsigned long)((500)*(8000000/4000.0)));
   451  0743  3006               	movlw	6
   452  0744  1283               	bcf	3,5	;RP0=0, select bank0
   453  0745  1303               	bcf	3,6	;RP1=0, select bank0
   454  0746  00B2               	movwf	??_main+2
   455  0747  3013               	movlw	19
   456  0748  00B1               	movwf	??_main+1
   457  0749  30B1               	movlw	177
   458  074A  00B0               	movwf	??_main
   459  074B                     u1057:	
   460  074B  0BB0               	decfsz	??_main,f
   461  074C  2F4B               	goto	u1057
   462  074D  0BB1               	decfsz	??_main+1,f
   463  074E  2F4B               	goto	u1057
   464  074F  0BB2               	decfsz	??_main+2,f
   465  0750  2F4B               	goto	u1057
   466  0751  2F52               	nop2
   467                           
   468                           ;main.c: 53: motor(30,-30);
   469  0752  30E2               	movlw	-30
   470  0753  1283               	bcf	3,5	;RP0=0, select bank0
   471  0754  1303               	bcf	3,6	;RP1=0, select bank0
   472  0755  00B0               	movwf	??_main
   473  0756  0830               	movf	??_main,w
   474  0757  00AA               	movwf	motor@speedRM
   475  0758  301E               	movlw	30
   476  0759  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   477                           
   478                           ;main.c: 54: _delay((unsigned long)((500)*(8000000/4000.0)));
   479  075E  3006               	movlw	6
   480  075F  1283               	bcf	3,5	;RP0=0, select bank0
   481  0760  1303               	bcf	3,6	;RP1=0, select bank0
   482  0761  00B2               	movwf	??_main+2
   483  0762  3013               	movlw	19
   484  0763  00B1               	movwf	??_main+1
   485  0764  30B1               	movlw	177
   486  0765  00B0               	movwf	??_main
   487  0766                     u1067:	
   488  0766  0BB0               	decfsz	??_main,f
   489  0767  2F66               	goto	u1067
   490  0768  0BB1               	decfsz	??_main+1,f
   491  0769  2F66               	goto	u1067
   492  076A  0BB2               	decfsz	??_main+2,f
   493  076B  2F66               	goto	u1067
   494  076C  2F6D               	nop2
   495                           
   496                           ;main.c: 55: motor(0,0);
   497  076D  1283               	bcf	3,5	;RP0=0, select bank0
   498  076E  1303               	bcf	3,6	;RP1=0, select bank0
   499  076F  01AA               	clrf	motor@speedRM
   500  0770  3000               	movlw	0
   501  0771  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   502                           
   503                           ;main.c: 56: _delay((unsigned long)((500)*(8000000/4000.0)));
   504  0776  3006               	movlw	6
   505  0777  1283               	bcf	3,5	;RP0=0, select bank0
   506  0778  1303               	bcf	3,6	;RP1=0, select bank0
   507  0779  00B2               	movwf	??_main+2
   508  077A  3013               	movlw	19
   509  077B  00B1               	movwf	??_main+1
   510  077C  30B1               	movlw	177
   511  077D  00B0               	movwf	??_main
   512  077E                     u1077:	
   513  077E  0BB0               	decfsz	??_main,f
   514  077F  2F7E               	goto	u1077
   515  0780  0BB1               	decfsz	??_main+1,f
   516  0781  2F7E               	goto	u1077
   517  0782  0BB2               	decfsz	??_main+2,f
   518  0783  2F7E               	goto	u1077
   519  0784  2F85               	nop2
   520                           
   521                           ;main.c: 57: }
   522  0785  2F1B               	goto	l1529
   523  0786                     l145:	
   524                           
   525                           ;main.c: 58: else if(RA5||RE0||RE1)
   526  0786  1E85               	btfss	5,5	;volatile
   527  0787  1809               	btfsc	9,0	;volatile
   528  0788  2F8B               	goto	l1551
   529  0789  1C89               	btfss	9,1	;volatile
   530  078A  2FEF               	goto	l1563
   531  078B                     l1551:	
   532                           
   533                           ;main.c: 59: {
   534                           ;main.c: 60: motor(-50,-50);
   535  078B  30CE               	movlw	-50
   536  078C  00B0               	movwf	??_main
   537  078D  0830               	movf	??_main,w
   538  078E  00AA               	movwf	motor@speedRM
   539  078F  30CE               	movlw	-50
   540  0790  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   541                           
   542                           ;main.c: 61: _delay((unsigned long)((200)*(8000000/4000.0)));
   543  0795  3003               	movlw	3
   544  0796  1283               	bcf	3,5	;RP0=0, select bank0
   545  0797  1303               	bcf	3,6	;RP1=0, select bank0
   546  0798  00B2               	movwf	??_main+2
   547  0799  3008               	movlw	8
   548  079A  00B1               	movwf	??_main+1
   549  079B  3078               	movlw	120
   550  079C  00B0               	movwf	??_main
   551  079D                     u1087:	
   552  079D  0BB0               	decfsz	??_main,f
   553  079E  2F9D               	goto	u1087
   554  079F  0BB1               	decfsz	??_main+1,f
   555  07A0  2F9D               	goto	u1087
   556  07A1  0BB2               	decfsz	??_main+2,f
   557  07A2  2F9D               	goto	u1087
   558                           
   559                           ;main.c: 62: motor(0,0);
   560  07A3  1283               	bcf	3,5	;RP0=0, select bank0
   561  07A4  1303               	bcf	3,6	;RP1=0, select bank0
   562  07A5  01AA               	clrf	motor@speedRM
   563  07A6  3000               	movlw	0
   564  07A7  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   565                           
   566                           ;main.c: 63: _delay((unsigned long)((500)*(8000000/4000.0)));
   567  07AC  3006               	movlw	6
   568  07AD  1283               	bcf	3,5	;RP0=0, select bank0
   569  07AE  1303               	bcf	3,6	;RP1=0, select bank0
   570  07AF  00B2               	movwf	??_main+2
   571  07B0  3013               	movlw	19
   572  07B1  00B1               	movwf	??_main+1
   573  07B2  30B1               	movlw	177
   574  07B3  00B0               	movwf	??_main
   575  07B4                     u1097:	
   576  07B4  0BB0               	decfsz	??_main,f
   577  07B5  2FB4               	goto	u1097
   578  07B6  0BB1               	decfsz	??_main+1,f
   579  07B7  2FB4               	goto	u1097
   580  07B8  0BB2               	decfsz	??_main+2,f
   581  07B9  2FB4               	goto	u1097
   582  07BA  2FBB               	nop2
   583                           
   584                           ;main.c: 64: motor(-30,30);
   585  07BB  301E               	movlw	30
   586  07BC  1283               	bcf	3,5	;RP0=0, select bank0
   587  07BD  1303               	bcf	3,6	;RP1=0, select bank0
   588  07BE  00B0               	movwf	??_main
   589  07BF  0830               	movf	??_main,w
   590  07C0  00AA               	movwf	motor@speedRM
   591  07C1  30E2               	movlw	-30
   592  07C2  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   593                           
   594                           ;main.c: 65: _delay((unsigned long)((500)*(8000000/4000.0)));
   595  07C7  3006               	movlw	6
   596  07C8  1283               	bcf	3,5	;RP0=0, select bank0
   597  07C9  1303               	bcf	3,6	;RP1=0, select bank0
   598  07CA  00B2               	movwf	??_main+2
   599  07CB  3013               	movlw	19
   600  07CC  00B1               	movwf	??_main+1
   601  07CD  30B1               	movlw	177
   602  07CE  00B0               	movwf	??_main
   603  07CF                     u1107:	
   604  07CF  0BB0               	decfsz	??_main,f
   605  07D0  2FCF               	goto	u1107
   606  07D1  0BB1               	decfsz	??_main+1,f
   607  07D2  2FCF               	goto	u1107
   608  07D3  0BB2               	decfsz	??_main+2,f
   609  07D4  2FCF               	goto	u1107
   610  07D5  2FD6               	nop2
   611                           
   612                           ;main.c: 66: motor(0,0);
   613  07D6  1283               	bcf	3,5	;RP0=0, select bank0
   614  07D7  1303               	bcf	3,6	;RP1=0, select bank0
   615  07D8  01AA               	clrf	motor@speedRM
   616  07D9  3000               	movlw	0
   617  07DA  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   618                           
   619                           ;main.c: 67: _delay((unsigned long)((500)*(8000000/4000.0)));
   620  07DF  3006               	movlw	6
   621  07E0  1283               	bcf	3,5	;RP0=0, select bank0
   622  07E1  1303               	bcf	3,6	;RP1=0, select bank0
   623  07E2  00B2               	movwf	??_main+2
   624  07E3  3013               	movlw	19
   625  07E4  00B1               	movwf	??_main+1
   626  07E5  30B1               	movlw	177
   627  07E6  00B0               	movwf	??_main
   628  07E7                     u1117:	
   629  07E7  0BB0               	decfsz	??_main,f
   630  07E8  2FE7               	goto	u1117
   631  07E9  0BB1               	decfsz	??_main+1,f
   632  07EA  2FE7               	goto	u1117
   633  07EB  0BB2               	decfsz	??_main+2,f
   634  07EC  2FE7               	goto	u1117
   635  07ED  2FEE               	nop2
   636                           
   637                           ;main.c: 68: }
   638  07EE  2F1B               	goto	l1529
   639  07EF                     l1563:	
   640                           
   641                           ;main.c: 69: else motor(50,50);
   642  07EF  3032               	movlw	50
   643  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   644  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   645  07F2  00B0               	movwf	??_main
   646  07F3  0830               	movf	??_main,w
   647  07F4  00AA               	movwf	motor@speedRM
   648  07F5  3032               	movlw	50
   649  07F6  120A  118A  25EF   	fcall	_motor
      +       120A  118A         
   650  07FB  2F1B               	goto	l1529
   651  07FC                     __end_of_main:	
   652                           
   653                           	psect	text1
   654  043C                     __ptext1:	
   655 ;; *************** function _picInit *****************
   656 ;; Defined at:
   657 ;;		line 74 in file "main.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;		None
   660 ;; Auto vars:     Size  Location     Type
   661 ;;		None
   662 ;; Return value:  Size  Location     Type
   663 ;;		None               void
   664 ;; Registers used:
   665 ;;		wreg, status,2
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   671 ;;      Params:         0       0       0       0       0
   672 ;;      Locals:         0       0       0       0       0
   673 ;;      Temps:          0       0       0       0       0
   674 ;;      Totals:         0       0       0       0       0
   675 ;;Total ram usage:        0 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; This function calls:
   678 ;;		Nothing
   679 ;; This function is called by:
   680 ;;		_main
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           
   685                           ;psect for function _picInit
   686  043C                     _picInit:	
   687                           
   688                           ;main.c: 76: IRCF2 = 1;
   689                           
   690                           ;incstack = 0
   691                           ; Regs used in _picInit: [wreg+status,2]
   692  043C  1683               	bsf	3,5	;RP0=1, select bank1
   693  043D  1303               	bcf	3,6	;RP1=0, select bank1
   694  043E  170F               	bsf	15,6	;volatile
   695                           
   696                           ;main.c: 77: IRCF1 = 1;
   697  043F  168F               	bsf	15,5	;volatile
   698                           
   699                           ;main.c: 78: IRCF0 = 1;
   700  0440  160F               	bsf	15,4	;volatile
   701                           
   702                           ;main.c: 80: ANSEL = 0;
   703  0441  1683               	bsf	3,5	;RP0=1, select bank3
   704  0442  1703               	bsf	3,6	;RP1=1, select bank3
   705  0443  0188               	clrf	8	;volatile
   706                           
   707                           ;main.c: 81: ANSELH = 0;
   708  0444  0189               	clrf	9	;volatile
   709                           
   710                           ;main.c: 83: PORTA = 0;
   711  0445  1283               	bcf	3,5	;RP0=0, select bank0
   712  0446  1303               	bcf	3,6	;RP1=0, select bank0
   713  0447  0185               	clrf	5	;volatile
   714                           
   715                           ;main.c: 84: PORTB = 0;
   716  0448  0186               	clrf	6	;volatile
   717                           
   718                           ;main.c: 85: PORTC = 0;
   719  0449  0187               	clrf	7	;volatile
   720                           
   721                           ;main.c: 86: PORTD = 0;
   722  044A  0188               	clrf	8	;volatile
   723                           
   724                           ;main.c: 87: PORTE = 0;
   725  044B  0189               	clrf	9	;volatile
   726                           
   727                           ;main.c: 89: TRISA = 0b00111000;
   728  044C  3038               	movlw	56
   729  044D  1683               	bsf	3,5	;RP0=1, select bank1
   730  044E  1303               	bcf	3,6	;RP1=0, select bank1
   731  044F  0085               	movwf	5	;volatile
   732                           
   733                           ;main.c: 90: TRISB = 0b00000011;
   734  0450  3003               	movlw	3
   735  0451  0086               	movwf	6	;volatile
   736                           
   737                           ;main.c: 91: TRISC = 0b10000000;
   738  0452  3080               	movlw	128
   739  0453  0087               	movwf	7	;volatile
   740                           
   741                           ;main.c: 92: TRISD = 0b00000000;
   742  0454  0188               	clrf	8	;volatile
   743                           
   744                           ;main.c: 93: TRISE = 0b011;
   745  0455  3003               	movlw	3
   746  0456  0089               	movwf	9	;volatile
   747  0457  0008               	return
   748  0458                     __end_of_picInit:	
   749                           
   750                           	psect	text2
   751  05EF                     __ptext2:	
   752 ;; *************** function _motor *****************
   753 ;; Defined at:
   754 ;;		line 117 in file "main.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;  speedLM         1    wreg     char 
   757 ;;  speedRM         1   10[BANK0 ] char 
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  speedLM         1   14[BANK0 ] char 
   760 ;;  speed           1   15[BANK0 ] unsigned char 
   761 ;;  maxSpeed        1   13[BANK0 ] unsigned char 
   762 ;; Return value:  Size  Location     Type
   763 ;;		None               void
   764 ;; Registers used:
   765 ;;		wreg, status,2, status,0, pclath, cstack
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   771 ;;      Params:         0       1       0       0       0
   772 ;;      Locals:         0       3       0       0       0
   773 ;;      Temps:          0       2       0       0       0
   774 ;;      Totals:         0       6       0       0       0
   775 ;;Total ram usage:        6 bytes
   776 ;; Hardware stack levels used:    1
   777 ;; Hardware stack levels required when called:    2
   778 ;; This function calls:
   779 ;;		___bmul
   780 ;;		_setPwmRC1
   781 ;;		_setPwmRC2
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           
   788                           ;psect for function _motor
   789  05EF                     _motor:	
   790                           
   791                           ;incstack = 0
   792                           ; Regs used in _motor: [wreg+status,2+status,0+pclath+cstack]
   793                           ;motor@speedLM stored from wreg
   794  05EF  1283               	bcf	3,5	;RP0=0, select bank0
   795  05F0  1303               	bcf	3,6	;RP1=0, select bank0
   796  05F1  00AE               	movwf	motor@speedLM
   797                           
   798                           ;main.c: 119: uChar speed, maxSpeed = 80;
   799  05F2  3050               	movlw	80
   800  05F3  00AB               	movwf	??_motor
   801  05F4  082B               	movf	??_motor,w
   802  05F5  00AD               	movwf	motor@maxSpeed
   803                           
   804                           ;main.c: 121: if(speedLM < 0)
   805  05F6  1FAE               	btfss	motor@speedLM,7
   806  05F7  2E09               	goto	l1487
   807                           
   808                           ;main.c: 122: {
   809                           ;main.c: 123: RB4 = 1;
   810  05F8  1606               	bsf	6,4	;volatile
   811                           
   812                           ;main.c: 124: RB5 = 0;
   813  05F9  1286               	bcf	6,5	;volatile
   814                           
   815                           ;main.c: 125: speed = (-1) * speedLM;
   816  05FA  30FF               	movlw	255
   817  05FB  00AB               	movwf	??_motor
   818  05FC  082B               	movf	??_motor,w
   819  05FD  00F0               	movwf	___bmul@multiplicand
   820  05FE  082E               	movf	motor@speedLM,w
   821  05FF  120A  118A  242B   	fcall	___bmul
      +       120A  118A         
   822  0604  1283               	bcf	3,5	;RP0=0, select bank0
   823  0605  1303               	bcf	3,6	;RP1=0, select bank0
   824  0606  00AC               	movwf	??_motor+1
   825  0607  082C               	movf	??_motor+1,w
   826  0608  2E19               	goto	L2
   827  0609                     l1487:	
   828                           ;main.c: 126: }
   829                           
   830                           
   831                           ;main.c: 127: else if(speedLM > 0)
   832  0609  082E               	movf	motor@speedLM,w
   833  060A  3A80               	xorlw	128
   834  060B  3E7F               	addlw	-129
   835  060C  1C03               	skipc
   836  060D  2E11               	goto	l1493
   837                           
   838                           ;main.c: 128: {
   839                           ;main.c: 129: RB4 = 0;
   840  060E  1206               	bcf	6,4	;volatile
   841                           
   842                           ;main.c: 130: RB5 = 1;
   843  060F  1686               	bsf	6,5	;volatile
   844  0610  2E16               	goto	L5
   845  0611                     l1493:	
   846                           ;main.c: 132: }
   847                           
   848                           ;main.c: 131: speed = speedLM;
   849                           
   850                           
   851                           ;main.c: 133: else if(!speedLM)
   852  0611  08AE               	movf	motor@speedLM,f
   853  0612  1D03               	skipz
   854  0613  2E1A               	goto	l179
   855                           
   856                           ;main.c: 134: {
   857                           ;main.c: 135: RB4 = 0;
   858  0614  1206               	bcf	6,4	;volatile
   859                           
   860                           ;main.c: 136: RB5 = 0;
   861  0615  1286               	bcf	6,5	;volatile
   862  0616                     L5:	
   863                           
   864                           ;main.c: 137: speed = speedLM;
   865  0616  082E               	movf	motor@speedLM,w
   866  0617  00AB               	movwf	??_motor
   867  0618  082B               	movf	??_motor,w
   868  0619                     L2:	
   869  0619  00AF               	movwf	motor@speed
   870  061A                     l179:	
   871                           
   872                           ;main.c: 138: }
   873                           ;main.c: 139: if(speed > maxSpeed) speed = maxSpeed;
   874  061A  082F               	movf	motor@speed,w
   875  061B  022D               	subwf	motor@maxSpeed,w
   876  061C  1803               	skipnc
   877  061D  2E22               	goto	l1501
   878  061E  082D               	movf	motor@maxSpeed,w
   879  061F  00AB               	movwf	??_motor
   880  0620  082B               	movf	??_motor,w
   881  0621  00AF               	movwf	motor@speed
   882  0622                     l1501:	
   883                           
   884                           ;main.c: 140: setPwmRC1(1000, speed);
   885  0622  30E8               	movlw	232
   886  0623  00A6               	movwf	setPwmRC1@freq
   887  0624  3003               	movlw	3
   888  0625  00A7               	movwf	setPwmRC1@freq+1
   889  0626  082F               	movf	motor@speed,w
   890  0627  00AB               	movwf	??_motor
   891  0628  01AC               	clrf	??_motor+1
   892  0629  082B               	movf	??_motor,w
   893  062A  00A8               	movwf	setPwmRC1@duty
   894  062B  082C               	movf	??_motor+1,w
   895  062C  00A9               	movwf	setPwmRC1@duty+1
   896  062D  120A  118A  2519   	fcall	_setPwmRC1
      +       120A  118A         
   897                           
   898                           ;main.c: 142: if(speedRM < 0)
   899  0632  1283               	bcf	3,5	;RP0=0, select bank0
   900  0633  1303               	bcf	3,6	;RP1=0, select bank0
   901  0634  1FAA               	btfss	motor@speedRM,7
   902  0635  2E47               	goto	l1509
   903                           
   904                           ;main.c: 143: {
   905                           ;main.c: 144: RB2 = 1;
   906  0636  1506               	bsf	6,2	;volatile
   907                           
   908                           ;main.c: 145: RB3 = 0;
   909  0637  1186               	bcf	6,3	;volatile
   910                           
   911                           ;main.c: 146: speed = (-1) * speedRM;
   912  0638  30FF               	movlw	255
   913  0639  00AB               	movwf	??_motor
   914  063A  082B               	movf	??_motor,w
   915  063B  00F0               	movwf	___bmul@multiplicand
   916  063C  082A               	movf	motor@speedRM,w
   917  063D  120A  118A  242B   	fcall	___bmul
      +       120A  118A         
   918  0642  1283               	bcf	3,5	;RP0=0, select bank0
   919  0643  1303               	bcf	3,6	;RP1=0, select bank0
   920  0644  00AC               	movwf	??_motor+1
   921  0645  082C               	movf	??_motor+1,w
   922  0646  2E57               	goto	L4
   923  0647                     l1509:	
   924                           ;main.c: 147: }
   925                           
   926                           
   927                           ;main.c: 148: else if(speedRM > 0)
   928  0647  082A               	movf	motor@speedRM,w
   929  0648  3A80               	xorlw	128
   930  0649  3E7F               	addlw	-129
   931  064A  1C03               	skipc
   932  064B  2E4F               	goto	l1515
   933                           
   934                           ;main.c: 149: {
   935                           ;main.c: 150: RB2 = 0;
   936  064C  1106               	bcf	6,2	;volatile
   937                           
   938                           ;main.c: 151: RB3 = 1;
   939  064D  1586               	bsf	6,3	;volatile
   940  064E  2E54               	goto	L6
   941  064F                     l1515:	
   942                           ;main.c: 153: }
   943                           
   944                           ;main.c: 152: speed = speedRM;
   945                           
   946                           
   947                           ;main.c: 154: else if(!speedRM)
   948  064F  08AA               	movf	motor@speedRM,f
   949  0650  1D03               	skipz
   950  0651  2E58               	goto	l185
   951                           
   952                           ;main.c: 155: {
   953                           ;main.c: 156: RB2 = 0;
   954  0652  1106               	bcf	6,2	;volatile
   955                           
   956                           ;main.c: 157: RB3 = 0;
   957  0653  1186               	bcf	6,3	;volatile
   958  0654                     L6:	
   959                           
   960                           ;main.c: 158: speed = speedRM;
   961  0654  082A               	movf	motor@speedRM,w
   962  0655  00AB               	movwf	??_motor
   963  0656  082B               	movf	??_motor,w
   964  0657                     L4:	
   965  0657  00AF               	movwf	motor@speed
   966  0658                     l185:	
   967                           
   968                           ;main.c: 159: }
   969                           ;main.c: 160: if(speed > maxSpeed) speed = maxSpeed;
   970  0658  082F               	movf	motor@speed,w
   971  0659  022D               	subwf	motor@maxSpeed,w
   972  065A  1803               	skipnc
   973  065B  2E60               	goto	l1523
   974  065C  082D               	movf	motor@maxSpeed,w
   975  065D  00AB               	movwf	??_motor
   976  065E  082B               	movf	??_motor,w
   977  065F  00AF               	movwf	motor@speed
   978  0660                     l1523:	
   979                           
   980                           ;main.c: 161: setPwmRC2(1000, speed);
   981  0660  30E8               	movlw	232
   982  0661  00A6               	movwf	setPwmRC2@freq
   983  0662  3003               	movlw	3
   984  0663  00A7               	movwf	setPwmRC2@freq+1
   985  0664  082F               	movf	motor@speed,w
   986  0665  00AB               	movwf	??_motor
   987  0666  01AC               	clrf	??_motor+1
   988  0667  082B               	movf	??_motor,w
   989  0668  00A8               	movwf	setPwmRC2@duty
   990  0669  082C               	movf	??_motor+1,w
   991  066A  00A9               	movwf	setPwmRC2@duty+1
   992  066B  120A  118A  2584   	fcall	_setPwmRC2
   993  066E  0008               	return
   994  066F                     __end_of_motor:	
   995                           
   996                           	psect	text3
   997  0584                     __ptext3:	
   998 ;; *************** function _setPwmRC2 *****************
   999 ;; Defined at:
  1000 ;;		line 20 in file "pwm.h"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  freq            2    6[BANK0 ] int 
  1003 ;;  duty            2    8[BANK0 ] int 
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  a               2   12[COMMON] int 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;		None               void
  1008 ;; Registers used:
  1009 ;;		wreg, status,2, status,0, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1015 ;;      Params:         0       4       0       0       0
  1016 ;;      Locals:         2       0       0       0       0
  1017 ;;      Temps:          1       0       0       0       0
  1018 ;;      Totals:         3       4       0       0       0
  1019 ;;Total ram usage:        7 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:    1
  1022 ;; This function calls:
  1023 ;;		___aldiv
  1024 ;;		___awdiv
  1025 ;;		___wmul
  1026 ;; This function is called by:
  1027 ;;		_motor
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           
  1032                           ;psect for function _setPwmRC2
  1033  0584                     _setPwmRC2:	
  1034                           
  1035                           ;pwm.h: 22: int a;
  1036                           ;pwm.h: 23: T2CON = 0b00000111;
  1037                           
  1038                           ;incstack = 0
  1039                           ; Regs used in _setPwmRC2: [wreg+status,2+status,0+pclath+cstack]
  1040  0584  3007               	movlw	7
  1041  0585  1283               	bcf	3,5	;RP0=0, select bank0
  1042  0586  1303               	bcf	3,6	;RP1=0, select bank0
  1043  0587  0092               	movwf	18	;volatile
  1044                           
  1045                           ;pwm.h: 24: CCP1CON = 0b00001100;
  1046  0588  300C               	movlw	12
  1047  0589  0097               	movwf	23	;volatile
  1048                           
  1049                           ;pwm.h: 25: PR2 = (8000000/(4*16))/(freq)-1;
  1050  058A  0826               	movf	setPwmRC2@freq,w
  1051  058B  00F0               	movwf	___aldiv@divisor
  1052  058C  0827               	movf	setPwmRC2@freq+1,w
  1053  058D  00F1               	movwf	___aldiv@divisor+1
  1054  058E  3000               	movlw	0
  1055  058F  1BF1               	btfsc	___aldiv@divisor+1,7
  1056  0590  30FF               	movlw	255
  1057  0591  00F2               	movwf	___aldiv@divisor+2
  1058  0592  00F3               	movwf	___aldiv@divisor+3
  1059  0593  3000               	movlw	0
  1060  0594  00F7               	movwf	___aldiv@dividend+3
  1061  0595  3001               	movlw	1
  1062  0596  00F6               	movwf	___aldiv@dividend+2
  1063  0597  30E8               	movlw	232
  1064  0598  00F5               	movwf	___aldiv@dividend+1
  1065  0599  3048               	movlw	72
  1066  059A  00F4               	movwf	___aldiv@dividend
  1067  059B  120A  118A  266F   	fcall	___aldiv
      +       120A  118A         
  1068  05A0  0870               	movf	?___aldiv,w
  1069  05A1  3EFF               	addlw	255
  1070  05A2  1683               	bsf	3,5	;RP0=1, select bank1
  1071  05A3  1303               	bcf	3,6	;RP1=0, select bank1
  1072  05A4  0092               	movwf	18	;volatile
  1073                           
  1074                           ;pwm.h: 26: a = (PR2+1)*duty/25;
  1075  05A5  3019               	movlw	25
  1076  05A6  00F6               	movwf	___awdiv@divisor
  1077  05A7  3000               	movlw	0
  1078  05A8  00F7               	movwf	___awdiv@divisor+1
  1079  05A9  0812               	movf	18,w	;volatile
  1080  05AA  3E01               	addlw	1
  1081  05AB  00F0               	movwf	___wmul@multiplier
  1082  05AC  3000               	movlw	0
  1083  05AD  1803               	skipnc
  1084  05AE  3001               	movlw	1
  1085  05AF  00F1               	movwf	___wmul@multiplier+1
  1086  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  1087  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  1088  05B2  0829               	movf	setPwmRC2@duty+1,w
  1089  05B3  01F3               	clrf	___wmul@multiplicand+1
  1090  05B4  07F3               	addwf	___wmul@multiplicand+1,f
  1091  05B5  0828               	movf	setPwmRC2@duty,w
  1092  05B6  01F2               	clrf	___wmul@multiplicand
  1093  05B7  07F2               	addwf	___wmul@multiplicand,f
  1094  05B8  120A  118A  2458   	fcall	___wmul
      +       120A  118A         
  1095  05BD  0871               	movf	?___wmul+1,w
  1096  05BE  01F9               	clrf	___awdiv@dividend+1
  1097  05BF  07F9               	addwf	___awdiv@dividend+1,f
  1098  05C0  0870               	movf	?___wmul,w
  1099  05C1  01F8               	clrf	___awdiv@dividend
  1100  05C2  07F8               	addwf	___awdiv@dividend,f
  1101  05C3  120A  118A  24BC   	fcall	___awdiv
      +       120A  118A         
  1102  05C8  0877               	movf	?___awdiv+1,w
  1103  05C9  01FD               	clrf	setPwmRC2@a+1
  1104  05CA  07FD               	addwf	setPwmRC2@a+1,f
  1105  05CB  0876               	movf	?___awdiv,w
  1106  05CC  01FC               	clrf	setPwmRC2@a
  1107  05CD  07FC               	addwf	setPwmRC2@a,f
  1108                           
  1109                           ;pwm.h: 27: CCPR1L = a/4;
  1110  05CE  3004               	movlw	4
  1111  05CF  00F6               	movwf	___awdiv@divisor
  1112  05D0  3000               	movlw	0
  1113  05D1  00F7               	movwf	___awdiv@divisor+1
  1114  05D2  087D               	movf	setPwmRC2@a+1,w
  1115  05D3  01F9               	clrf	___awdiv@dividend+1
  1116  05D4  07F9               	addwf	___awdiv@dividend+1,f
  1117  05D5  087C               	movf	setPwmRC2@a,w
  1118  05D6  01F8               	clrf	___awdiv@dividend
  1119  05D7  07F8               	addwf	___awdiv@dividend,f
  1120  05D8  120A  118A  24BC   	fcall	___awdiv
      +       120A  118A         
  1121  05DD  0876               	movf	?___awdiv,w
  1122  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1123  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1124  05E0  0095               	movwf	21	;volatile
  1125                           
  1126                           ;pwm.h: 28: CCP1CON = (CCP1CON&0b11001111)|((a%4)<<4);
  1127  05E1  087C               	movf	setPwmRC2@a,w
  1128  05E2  3903               	andlw	3
  1129  05E3  00FB               	movwf	??_setPwmRC2
  1130  05E4  3004               	movlw	4
  1131  05E5                     u885:	
  1132  05E5  1003               	clrc
  1133  05E6  0DFB               	rlf	??_setPwmRC2,f
  1134  05E7  3EFF               	addlw	-1
  1135  05E8  1D03               	skipz
  1136  05E9  2DE5               	goto	u885
  1137  05EA  0817               	movf	23,w	;volatile
  1138  05EB  39CF               	andlw	207
  1139  05EC  047B               	iorwf	??_setPwmRC2,w
  1140  05ED  0097               	movwf	23	;volatile
  1141  05EE  0008               	return
  1142  05EF                     __end_of_setPwmRC2:	
  1143                           
  1144                           	psect	text4
  1145  0519                     __ptext4:	
  1146 ;; *************** function _setPwmRC1 *****************
  1147 ;; Defined at:
  1148 ;;		line 9 in file "pwm.h"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  freq            2    6[BANK0 ] int 
  1151 ;;  duty            2    8[BANK0 ] int 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  a               2   12[COMMON] int 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;		None               void
  1156 ;; Registers used:
  1157 ;;		wreg, status,2, status,0, pclath, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1163 ;;      Params:         0       4       0       0       0
  1164 ;;      Locals:         2       0       0       0       0
  1165 ;;      Temps:          1       0       0       0       0
  1166 ;;      Totals:         3       4       0       0       0
  1167 ;;Total ram usage:        7 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    1
  1170 ;; This function calls:
  1171 ;;		___aldiv
  1172 ;;		___awdiv
  1173 ;;		___wmul
  1174 ;; This function is called by:
  1175 ;;		_motor
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           
  1180                           ;psect for function _setPwmRC1
  1181  0519                     _setPwmRC1:	
  1182                           
  1183                           ;pwm.h: 11: int a;
  1184                           ;pwm.h: 12: T2CON = 0b00000111;
  1185                           
  1186                           ;incstack = 0
  1187                           ; Regs used in _setPwmRC1: [wreg+status,2+status,0+pclath+cstack]
  1188  0519  3007               	movlw	7
  1189  051A  1283               	bcf	3,5	;RP0=0, select bank0
  1190  051B  1303               	bcf	3,6	;RP1=0, select bank0
  1191  051C  0092               	movwf	18	;volatile
  1192                           
  1193                           ;pwm.h: 13: CCP2CON = 0b00001100;
  1194  051D  300C               	movlw	12
  1195  051E  009D               	movwf	29	;volatile
  1196                           
  1197                           ;pwm.h: 14: PR2 = (8000000/(4*16))/(freq)-1;
  1198  051F  0826               	movf	setPwmRC1@freq,w
  1199  0520  00F0               	movwf	___aldiv@divisor
  1200  0521  0827               	movf	setPwmRC1@freq+1,w
  1201  0522  00F1               	movwf	___aldiv@divisor+1
  1202  0523  3000               	movlw	0
  1203  0524  1BF1               	btfsc	___aldiv@divisor+1,7
  1204  0525  30FF               	movlw	255
  1205  0526  00F2               	movwf	___aldiv@divisor+2
  1206  0527  00F3               	movwf	___aldiv@divisor+3
  1207  0528  3000               	movlw	0
  1208  0529  00F7               	movwf	___aldiv@dividend+3
  1209  052A  3001               	movlw	1
  1210  052B  00F6               	movwf	___aldiv@dividend+2
  1211  052C  30E8               	movlw	232
  1212  052D  00F5               	movwf	___aldiv@dividend+1
  1213  052E  3048               	movlw	72
  1214  052F  00F4               	movwf	___aldiv@dividend
  1215  0530  120A  118A  266F   	fcall	___aldiv
      +       120A  118A         
  1216  0535  0870               	movf	?___aldiv,w
  1217  0536  3EFF               	addlw	255
  1218  0537  1683               	bsf	3,5	;RP0=1, select bank1
  1219  0538  1303               	bcf	3,6	;RP1=0, select bank1
  1220  0539  0092               	movwf	18	;volatile
  1221                           
  1222                           ;pwm.h: 15: a = (PR2+1)*duty/25;
  1223  053A  3019               	movlw	25
  1224  053B  00F6               	movwf	___awdiv@divisor
  1225  053C  3000               	movlw	0
  1226  053D  00F7               	movwf	___awdiv@divisor+1
  1227  053E  0812               	movf	18,w	;volatile
  1228  053F  3E01               	addlw	1
  1229  0540  00F0               	movwf	___wmul@multiplier
  1230  0541  3000               	movlw	0
  1231  0542  1803               	skipnc
  1232  0543  3001               	movlw	1
  1233  0544  00F1               	movwf	___wmul@multiplier+1
  1234  0545  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0546  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0547  0829               	movf	setPwmRC1@duty+1,w
  1237  0548  01F3               	clrf	___wmul@multiplicand+1
  1238  0549  07F3               	addwf	___wmul@multiplicand+1,f
  1239  054A  0828               	movf	setPwmRC1@duty,w
  1240  054B  01F2               	clrf	___wmul@multiplicand
  1241  054C  07F2               	addwf	___wmul@multiplicand,f
  1242  054D  120A  118A  2458   	fcall	___wmul
      +       120A  118A         
  1243  0552  0871               	movf	?___wmul+1,w
  1244  0553  01F9               	clrf	___awdiv@dividend+1
  1245  0554  07F9               	addwf	___awdiv@dividend+1,f
  1246  0555  0870               	movf	?___wmul,w
  1247  0556  01F8               	clrf	___awdiv@dividend
  1248  0557  07F8               	addwf	___awdiv@dividend,f
  1249  0558  120A  118A  24BC   	fcall	___awdiv
      +       120A  118A         
  1250  055D  0877               	movf	?___awdiv+1,w
  1251  055E  01FD               	clrf	setPwmRC1@a+1
  1252  055F  07FD               	addwf	setPwmRC1@a+1,f
  1253  0560  0876               	movf	?___awdiv,w
  1254  0561  01FC               	clrf	setPwmRC1@a
  1255  0562  07FC               	addwf	setPwmRC1@a,f
  1256                           
  1257                           ;pwm.h: 16: CCPR2L = a/4;
  1258  0563  3004               	movlw	4
  1259  0564  00F6               	movwf	___awdiv@divisor
  1260  0565  3000               	movlw	0
  1261  0566  00F7               	movwf	___awdiv@divisor+1
  1262  0567  087D               	movf	setPwmRC1@a+1,w
  1263  0568  01F9               	clrf	___awdiv@dividend+1
  1264  0569  07F9               	addwf	___awdiv@dividend+1,f
  1265  056A  087C               	movf	setPwmRC1@a,w
  1266  056B  01F8               	clrf	___awdiv@dividend
  1267  056C  07F8               	addwf	___awdiv@dividend,f
  1268  056D  120A  118A  24BC   	fcall	___awdiv
      +       120A  118A         
  1269  0572  0876               	movf	?___awdiv,w
  1270  0573  1283               	bcf	3,5	;RP0=0, select bank0
  1271  0574  1303               	bcf	3,6	;RP1=0, select bank0
  1272  0575  009B               	movwf	27	;volatile
  1273                           
  1274                           ;pwm.h: 17: CCP2CON = (CCP2CON&0b11001111)|((a%4)<<4);
  1275  0576  087C               	movf	setPwmRC1@a,w
  1276  0577  3903               	andlw	3
  1277  0578  00FB               	movwf	??_setPwmRC1
  1278  0579  3004               	movlw	4
  1279  057A                     u875:	
  1280  057A  1003               	clrc
  1281  057B  0DFB               	rlf	??_setPwmRC1,f
  1282  057C  3EFF               	addlw	-1
  1283  057D  1D03               	skipz
  1284  057E  2D7A               	goto	u875
  1285  057F  081D               	movf	29,w	;volatile
  1286  0580  39CF               	andlw	207
  1287  0581  047B               	iorwf	??_setPwmRC1,w
  1288  0582  009D               	movwf	29	;volatile
  1289  0583  0008               	return
  1290  0584                     __end_of_setPwmRC1:	
  1291                           
  1292                           	psect	text5
  1293  0458                     __ptext5:	
  1294 ;; *************** function ___wmul *****************
  1295 ;; Defined at:
  1296 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.30\sources\common\wmul.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  multiplier      2    0[COMMON] unsigned int 
  1299 ;;  multiplicand    2    2[COMMON] unsigned int 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  product         2    4[COMMON] unsigned int 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  2    0[COMMON] unsigned int 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1311 ;;      Params:         4       0       0       0       0
  1312 ;;      Locals:         2       0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0
  1314 ;;      Totals:         6       0       0       0       0
  1315 ;;Total ram usage:        6 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; This function calls:
  1318 ;;		Nothing
  1319 ;; This function is called by:
  1320 ;;		_setPwmRC1
  1321 ;;		_setPwmRC2
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           
  1326                           ;psect for function ___wmul
  1327  0458                     ___wmul:	
  1328                           
  1329                           ;incstack = 0
  1330                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1331  0458  01F4               	clrf	___wmul@product
  1332  0459  01F5               	clrf	___wmul@product+1
  1333  045A                     l1405:	
  1334  045A  1C70               	btfss	___wmul@multiplier,0
  1335  045B  2C62               	goto	l623
  1336  045C  0872               	movf	___wmul@multiplicand,w
  1337  045D  07F4               	addwf	___wmul@product,f
  1338  045E  1803               	skipnc
  1339  045F  0AF5               	incf	___wmul@product+1,f
  1340  0460  0873               	movf	___wmul@multiplicand+1,w
  1341  0461  07F5               	addwf	___wmul@product+1,f
  1342  0462                     l623:	
  1343  0462  3001               	movlw	1
  1344  0463                     u745:	
  1345  0463  1003               	clrc
  1346  0464  0DF2               	rlf	___wmul@multiplicand,f
  1347  0465  0DF3               	rlf	___wmul@multiplicand+1,f
  1348  0466  3EFF               	addlw	-1
  1349  0467  1D03               	skipz
  1350  0468  2C63               	goto	u745
  1351  0469  3001               	movlw	1
  1352  046A                     u755:	
  1353  046A  1003               	clrc
  1354  046B  0CF1               	rrf	___wmul@multiplier+1,f
  1355  046C  0CF0               	rrf	___wmul@multiplier,f
  1356  046D  3EFF               	addlw	-1
  1357  046E  1D03               	skipz
  1358  046F  2C6A               	goto	u755
  1359  0470  0871               	movf	___wmul@multiplier+1,w
  1360  0471  0470               	iorwf	___wmul@multiplier,w
  1361  0472  1D03               	skipz
  1362  0473  2C5A               	goto	l1405
  1363  0474  0875               	movf	___wmul@product+1,w
  1364  0475  01F1               	clrf	?___wmul+1
  1365  0476  07F1               	addwf	?___wmul+1,f
  1366  0477  0874               	movf	___wmul@product,w
  1367  0478  01F0               	clrf	?___wmul
  1368  0479  07F0               	addwf	?___wmul,f
  1369  047A  0008               	return
  1370  047B                     __end_of___wmul:	
  1371                           
  1372                           	psect	text6
  1373  04BC                     __ptext6:	
  1374 ;; *************** function ___awdiv *****************
  1375 ;; Defined at:
  1376 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.30\sources\common\awdiv.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  divisor         2    6[COMMON] int 
  1379 ;;  dividend        2    8[COMMON] int 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  quotient        2    2[BANK0 ] int 
  1382 ;;  sign            1    1[BANK0 ] unsigned char 
  1383 ;;  counter         1    0[BANK0 ] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  2    6[COMMON] int 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1393 ;;      Params:         4       0       0       0       0
  1394 ;;      Locals:         0       4       0       0       0
  1395 ;;      Temps:          1       0       0       0       0
  1396 ;;      Totals:         5       4       0       0       0
  1397 ;;Total ram usage:        9 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; This function calls:
  1400 ;;		Nothing
  1401 ;; This function is called by:
  1402 ;;		_setPwmRC1
  1403 ;;		_setPwmRC2
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           
  1408                           ;psect for function ___awdiv
  1409  04BC                     ___awdiv:	
  1410                           
  1411                           ;incstack = 0
  1412                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1413  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1414  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1415  04BE  01A1               	clrf	___awdiv@sign
  1416  04BF  1FF7               	btfss	___awdiv@divisor+1,7
  1417  04C0  2CC8               	goto	l1423
  1418  04C1  09F6               	comf	___awdiv@divisor,f
  1419  04C2  09F7               	comf	___awdiv@divisor+1,f
  1420  04C3  0AF6               	incf	___awdiv@divisor,f
  1421  04C4  1903               	skipnz
  1422  04C5  0AF7               	incf	___awdiv@divisor+1,f
  1423  04C6  01A1               	clrf	___awdiv@sign
  1424  04C7  0AA1               	incf	___awdiv@sign,f
  1425  04C8                     l1423:	
  1426  04C8  1FF9               	btfss	___awdiv@dividend+1,7
  1427  04C9  2CD3               	goto	l1429
  1428  04CA  09F8               	comf	___awdiv@dividend,f
  1429  04CB  09F9               	comf	___awdiv@dividend+1,f
  1430  04CC  0AF8               	incf	___awdiv@dividend,f
  1431  04CD  1903               	skipnz
  1432  04CE  0AF9               	incf	___awdiv@dividend+1,f
  1433  04CF  3001               	movlw	1
  1434  04D0  00FA               	movwf	??___awdiv
  1435  04D1  087A               	movf	??___awdiv,w
  1436  04D2  06A1               	xorwf	___awdiv@sign,f
  1437  04D3                     l1429:	
  1438  04D3  01A2               	clrf	___awdiv@quotient
  1439  04D4  01A3               	clrf	___awdiv@quotient+1
  1440  04D5  0877               	movf	___awdiv@divisor+1,w
  1441  04D6  0476               	iorwf	___awdiv@divisor,w
  1442  04D7  1903               	skipnz
  1443  04D8  2D0A               	goto	l1451
  1444  04D9  01A0               	clrf	___awdiv@counter
  1445  04DA  0AA0               	incf	___awdiv@counter,f
  1446  04DB                     l1439:	
  1447  04DB  1BF7               	btfsc	___awdiv@divisor+1,7
  1448  04DC  2CE9               	goto	l1441
  1449  04DD  3001               	movlw	1
  1450  04DE                     u805:	
  1451  04DE  1003               	clrc
  1452  04DF  0DF6               	rlf	___awdiv@divisor,f
  1453  04E0  0DF7               	rlf	___awdiv@divisor+1,f
  1454  04E1  3EFF               	addlw	-1
  1455  04E2  1D03               	skipz
  1456  04E3  2CDE               	goto	u805
  1457  04E4  3001               	movlw	1
  1458  04E5  00FA               	movwf	??___awdiv
  1459  04E6  087A               	movf	??___awdiv,w
  1460  04E7  07A0               	addwf	___awdiv@counter,f
  1461  04E8  2CDB               	goto	l1439
  1462  04E9                     l1441:	
  1463  04E9  3001               	movlw	1
  1464  04EA                     u825:	
  1465  04EA  1003               	clrc
  1466  04EB  0DA2               	rlf	___awdiv@quotient,f
  1467  04EC  0DA3               	rlf	___awdiv@quotient+1,f
  1468  04ED  3EFF               	addlw	-1
  1469  04EE  1D03               	skipz
  1470  04EF  2CEA               	goto	u825
  1471  04F0  0877               	movf	___awdiv@divisor+1,w
  1472  04F1  0279               	subwf	___awdiv@dividend+1,w
  1473  04F2  1D03               	skipz
  1474  04F3  2CF6               	goto	u835
  1475  04F4  0876               	movf	___awdiv@divisor,w
  1476  04F5  0278               	subwf	___awdiv@dividend,w
  1477  04F6                     u835:	
  1478  04F6  1C03               	skipc
  1479  04F7  2CFF               	goto	l1447
  1480  04F8  0876               	movf	___awdiv@divisor,w
  1481  04F9  02F8               	subwf	___awdiv@dividend,f
  1482  04FA  0877               	movf	___awdiv@divisor+1,w
  1483  04FB  1C03               	skipc
  1484  04FC  03F9               	decf	___awdiv@dividend+1,f
  1485  04FD  02F9               	subwf	___awdiv@dividend+1,f
  1486  04FE  1422               	bsf	___awdiv@quotient,0
  1487  04FF                     l1447:	
  1488  04FF  3001               	movlw	1
  1489  0500                     u845:	
  1490  0500  1003               	clrc
  1491  0501  0CF7               	rrf	___awdiv@divisor+1,f
  1492  0502  0CF6               	rrf	___awdiv@divisor,f
  1493  0503  3EFF               	addlw	-1
  1494  0504  1D03               	skipz
  1495  0505  2D00               	goto	u845
  1496  0506  3001               	movlw	1
  1497  0507  02A0               	subwf	___awdiv@counter,f
  1498  0508  1D03               	btfss	3,2
  1499  0509  2CE9               	goto	l1441
  1500  050A                     l1451:	
  1501  050A  0821               	movf	___awdiv@sign,w
  1502  050B  1903               	btfsc	3,2
  1503  050C  2D12               	goto	l1455
  1504  050D  09A2               	comf	___awdiv@quotient,f
  1505  050E  09A3               	comf	___awdiv@quotient+1,f
  1506  050F  0AA2               	incf	___awdiv@quotient,f
  1507  0510  1903               	skipnz
  1508  0511  0AA3               	incf	___awdiv@quotient+1,f
  1509  0512                     l1455:	
  1510  0512  0823               	movf	___awdiv@quotient+1,w
  1511  0513  01F7               	clrf	?___awdiv+1
  1512  0514  07F7               	addwf	?___awdiv+1,f
  1513  0515  0822               	movf	___awdiv@quotient,w
  1514  0516  01F6               	clrf	?___awdiv
  1515  0517  07F6               	addwf	?___awdiv,f
  1516  0518  0008               	return
  1517  0519                     __end_of___awdiv:	
  1518                           
  1519                           	psect	text7
  1520  066F                     __ptext7:	
  1521 ;; *************** function ___aldiv *****************
  1522 ;; Defined at:
  1523 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.30\sources\common\aldiv.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  divisor         4    0[COMMON] long 
  1526 ;;  dividend        4    4[COMMON] long 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  quotient        4    2[BANK0 ] long 
  1529 ;;  sign            1    1[BANK0 ] unsigned char 
  1530 ;;  counter         1    0[BANK0 ] unsigned char 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  4    0[COMMON] long 
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1540 ;;      Params:         8       0       0       0       0
  1541 ;;      Locals:         0       6       0       0       0
  1542 ;;      Temps:          1       0       0       0       0
  1543 ;;      Totals:         9       6       0       0       0
  1544 ;;Total ram usage:       15 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; This function calls:
  1547 ;;		Nothing
  1548 ;; This function is called by:
  1549 ;;		_setPwmRC1
  1550 ;;		_setPwmRC2
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           
  1555                           ;psect for function ___aldiv
  1556  066F                     ___aldiv:	
  1557                           
  1558                           ;incstack = 0
  1559                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1560  066F  1283               	bcf	3,5	;RP0=0, select bank0
  1561  0670  1303               	bcf	3,6	;RP1=0, select bank0
  1562  0671  01A1               	clrf	___aldiv@sign
  1563  0672  1FF3               	btfss	___aldiv@divisor+3,7
  1564  0673  2E81               	goto	l305
  1565  0674  09F0               	comf	___aldiv@divisor,f
  1566  0675  09F1               	comf	___aldiv@divisor+1,f
  1567  0676  09F2               	comf	___aldiv@divisor+2,f
  1568  0677  09F3               	comf	___aldiv@divisor+3,f
  1569  0678  0AF0               	incf	___aldiv@divisor,f
  1570  0679  1903               	skipnz
  1571  067A  0AF1               	incf	___aldiv@divisor+1,f
  1572  067B  1903               	skipnz
  1573  067C  0AF2               	incf	___aldiv@divisor+2,f
  1574  067D  1903               	skipnz
  1575  067E  0AF3               	incf	___aldiv@divisor+3,f
  1576  067F  01A1               	clrf	___aldiv@sign
  1577  0680  0AA1               	incf	___aldiv@sign,f
  1578  0681                     l305:	
  1579  0681  1FF7               	btfss	___aldiv@dividend+3,7
  1580  0682  2E92               	goto	l1357
  1581  0683  09F4               	comf	___aldiv@dividend,f
  1582  0684  09F5               	comf	___aldiv@dividend+1,f
  1583  0685  09F6               	comf	___aldiv@dividend+2,f
  1584  0686  09F7               	comf	___aldiv@dividend+3,f
  1585  0687  0AF4               	incf	___aldiv@dividend,f
  1586  0688  1903               	skipnz
  1587  0689  0AF5               	incf	___aldiv@dividend+1,f
  1588  068A  1903               	skipnz
  1589  068B  0AF6               	incf	___aldiv@dividend+2,f
  1590  068C  1903               	skipnz
  1591  068D  0AF7               	incf	___aldiv@dividend+3,f
  1592  068E  3001               	movlw	1
  1593  068F  00F8               	movwf	??___aldiv
  1594  0690  0878               	movf	??___aldiv,w
  1595  0691  06A1               	xorwf	___aldiv@sign,f
  1596  0692                     l1357:	
  1597  0692  3000               	movlw	0
  1598  0693  00A5               	movwf	___aldiv@quotient+3
  1599  0694  3000               	movlw	0
  1600  0695  00A4               	movwf	___aldiv@quotient+2
  1601  0696  3000               	movlw	0
  1602  0697  00A3               	movwf	___aldiv@quotient+1
  1603  0698  3000               	movlw	0
  1604  0699  00A2               	movwf	___aldiv@quotient
  1605  069A  0873               	movf	___aldiv@divisor+3,w
  1606  069B  0472               	iorwf	___aldiv@divisor+2,w
  1607  069C  0471               	iorwf	___aldiv@divisor+1,w
  1608  069D  0470               	iorwf	___aldiv@divisor,w
  1609  069E  1903               	skipnz
  1610  069F  2EE7               	goto	l1379
  1611  06A0  01A0               	clrf	___aldiv@counter
  1612  06A1  0AA0               	incf	___aldiv@counter,f
  1613  06A2                     l1365:	
  1614  06A2  1BF3               	btfsc	___aldiv@divisor+3,7
  1615  06A3  2EB2               	goto	l1367
  1616  06A4  3001               	movlw	1
  1617  06A5  00F8               	movwf	??___aldiv
  1618  06A6                     u645:	
  1619  06A6  1003               	clrc
  1620  06A7  0DF0               	rlf	___aldiv@divisor,f
  1621  06A8  0DF1               	rlf	___aldiv@divisor+1,f
  1622  06A9  0DF2               	rlf	___aldiv@divisor+2,f
  1623  06AA  0DF3               	rlf	___aldiv@divisor+3,f
  1624  06AB  0BF8               	decfsz	??___aldiv,f
  1625  06AC  2EA6               	goto	u645
  1626  06AD  3001               	movlw	1
  1627  06AE  00F8               	movwf	??___aldiv
  1628  06AF  0878               	movf	??___aldiv,w
  1629  06B0  07A0               	addwf	___aldiv@counter,f
  1630  06B1  2EA2               	goto	l1365
  1631  06B2                     l1367:	
  1632  06B2  3001               	movlw	1
  1633  06B3  00F8               	movwf	??___aldiv
  1634  06B4                     u665:	
  1635  06B4  1003               	clrc
  1636  06B5  0DA2               	rlf	___aldiv@quotient,f
  1637  06B6  0DA3               	rlf	___aldiv@quotient+1,f
  1638  06B7  0DA4               	rlf	___aldiv@quotient+2,f
  1639  06B8  0DA5               	rlf	___aldiv@quotient+3,f
  1640  06B9  0BF8               	decfsz	??___aldiv,f
  1641  06BA  2EB4               	goto	u665
  1642  06BB  0873               	movf	___aldiv@divisor+3,w
  1643  06BC  0277               	subwf	___aldiv@dividend+3,w
  1644  06BD  1D03               	skipz
  1645  06BE  2EC9               	goto	u675
  1646  06BF  0872               	movf	___aldiv@divisor+2,w
  1647  06C0  0276               	subwf	___aldiv@dividend+2,w
  1648  06C1  1D03               	skipz
  1649  06C2  2EC9               	goto	u675
  1650  06C3  0871               	movf	___aldiv@divisor+1,w
  1651  06C4  0275               	subwf	___aldiv@dividend+1,w
  1652  06C5  1D03               	skipz
  1653  06C6  2EC9               	goto	u675
  1654  06C7  0870               	movf	___aldiv@divisor,w
  1655  06C8  0274               	subwf	___aldiv@dividend,w
  1656  06C9                     u675:	
  1657  06C9  1C03               	skipc
  1658  06CA  2EDA               	goto	l1375
  1659  06CB  0870               	movf	___aldiv@divisor,w
  1660  06CC  02F4               	subwf	___aldiv@dividend,f
  1661  06CD  0871               	movf	___aldiv@divisor+1,w
  1662  06CE  1C03               	skipc
  1663  06CF  0F71               	incfsz	___aldiv@divisor+1,w
  1664  06D0  02F5               	subwf	___aldiv@dividend+1,f
  1665  06D1  0872               	movf	___aldiv@divisor+2,w
  1666  06D2  1C03               	skipc
  1667  06D3  0F72               	incfsz	___aldiv@divisor+2,w
  1668  06D4  02F6               	subwf	___aldiv@dividend+2,f
  1669  06D5  0873               	movf	___aldiv@divisor+3,w
  1670  06D6  1C03               	skipc
  1671  06D7  0F73               	incfsz	___aldiv@divisor+3,w
  1672  06D8  02F7               	subwf	___aldiv@dividend+3,f
  1673  06D9  1422               	bsf	___aldiv@quotient,0
  1674  06DA                     l1375:	
  1675  06DA  3001               	movlw	1
  1676  06DB                     u685:	
  1677  06DB  1003               	clrc
  1678  06DC  0CF3               	rrf	___aldiv@divisor+3,f
  1679  06DD  0CF2               	rrf	___aldiv@divisor+2,f
  1680  06DE  0CF1               	rrf	___aldiv@divisor+1,f
  1681  06DF  0CF0               	rrf	___aldiv@divisor,f
  1682  06E0  3EFF               	addlw	-1
  1683  06E1  1D03               	skipz
  1684  06E2  2EDB               	goto	u685
  1685  06E3  3001               	movlw	1
  1686  06E4  02A0               	subwf	___aldiv@counter,f
  1687  06E5  1D03               	btfss	3,2
  1688  06E6  2EB2               	goto	l1367
  1689  06E7                     l1379:	
  1690  06E7  0821               	movf	___aldiv@sign,w
  1691  06E8  1903               	btfsc	3,2
  1692  06E9  2EF5               	goto	l1383
  1693  06EA  09A2               	comf	___aldiv@quotient,f
  1694  06EB  09A3               	comf	___aldiv@quotient+1,f
  1695  06EC  09A4               	comf	___aldiv@quotient+2,f
  1696  06ED  09A5               	comf	___aldiv@quotient+3,f
  1697  06EE  0AA2               	incf	___aldiv@quotient,f
  1698  06EF  1903               	skipnz
  1699  06F0  0AA3               	incf	___aldiv@quotient+1,f
  1700  06F1  1903               	skipnz
  1701  06F2  0AA4               	incf	___aldiv@quotient+2,f
  1702  06F3  1903               	skipnz
  1703  06F4  0AA5               	incf	___aldiv@quotient+3,f
  1704  06F5                     l1383:	
  1705  06F5  0825               	movf	___aldiv@quotient+3,w
  1706  06F6  00F3               	movwf	?___aldiv+3
  1707  06F7  0824               	movf	___aldiv@quotient+2,w
  1708  06F8  00F2               	movwf	?___aldiv+2
  1709  06F9  0823               	movf	___aldiv@quotient+1,w
  1710  06FA  00F1               	movwf	?___aldiv+1
  1711  06FB  0822               	movf	___aldiv@quotient,w
  1712  06FC  00F0               	movwf	?___aldiv
  1713  06FD  0008               	return
  1714  06FE                     __end_of___aldiv:	
  1715                           
  1716                           	psect	text8
  1717  042B                     __ptext8:	
  1718 ;; *************** function ___bmul *****************
  1719 ;; Defined at:
  1720 ;;		line 2 in file "D:\Program Files\Microchip\xc8\v1.30\sources\common\bmul.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;  multiplier      1    wreg     unsigned char 
  1723 ;;  multiplicand    1    0[COMMON] unsigned char 
  1724 ;; Auto vars:     Size  Location     Type
  1725 ;;  multiplier      1    3[COMMON] unsigned char 
  1726 ;;  product         1    2[COMMON] unsigned char 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  1    wreg      unsigned char 
  1729 ;; Registers used:
  1730 ;;		wreg, status,2, status,0
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1736 ;;      Params:         1       0       0       0       0
  1737 ;;      Locals:         2       0       0       0       0
  1738 ;;      Temps:          1       0       0       0       0
  1739 ;;      Totals:         4       0       0       0       0
  1740 ;;Total ram usage:        4 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; This function calls:
  1743 ;;		Nothing
  1744 ;; This function is called by:
  1745 ;;		_motor
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           
  1750                           ;psect for function ___bmul
  1751  042B                     ___bmul:	
  1752                           
  1753                           ;incstack = 0
  1754                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1755                           ;___bmul@multiplier stored from wreg
  1756  042B  00F3               	movwf	___bmul@multiplier
  1757  042C  01F2               	clrf	___bmul@product
  1758  042D                     l1389:	
  1759  042D  1C73               	btfss	___bmul@multiplier,0
  1760  042E  2C33               	goto	l1393
  1761  042F  0870               	movf	___bmul@multiplicand,w
  1762  0430  00F1               	movwf	??___bmul
  1763  0431  0871               	movf	??___bmul,w
  1764  0432  07F2               	addwf	___bmul@product,f
  1765  0433                     l1393:	
  1766  0433  1003               	clrc
  1767  0434  0DF0               	rlf	___bmul@multiplicand,f
  1768  0435  1003               	clrc
  1769  0436  0CF3               	rrf	___bmul@multiplier,f
  1770  0437  08F3               	movf	___bmul@multiplier,f
  1771  0438  1D03               	skipz
  1772  0439  2C2D               	goto	l1389
  1773  043A  0872               	movf	___bmul@product,w
  1774  043B  0008               	return
  1775  043C                     __end_of___bmul:	
  1776                           
  1777                           	psect	text9
  1778  047B                     __ptext9:	
  1779 ;; *************** function _beep *****************
  1780 ;; Defined at:
  1781 ;;		line 96 in file "main.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;  times           1    wreg     unsigned char 
  1784 ;;  delayMs         2    0[COMMON] unsigned int 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  times           1    4[COMMON] unsigned char 
  1787 ;;  loop            2    5[COMMON] unsigned int 
  1788 ;; Return value:  Size  Location     Type
  1789 ;;		None               void
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1797 ;;      Params:         2       0       0       0       0
  1798 ;;      Locals:         3       0       0       0       0
  1799 ;;      Temps:          2       0       0       0       0
  1800 ;;      Totals:         7       0       0       0       0
  1801 ;;Total ram usage:        7 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; This function calls:
  1804 ;;		Nothing
  1805 ;; This function is called by:
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           
  1811                           ;psect for function _beep
  1812  047B                     _beep:	
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _beep: [wreg+status,2+status,0]
  1816                           ;beep@times stored from wreg
  1817  047B  00F4               	movwf	beep@times
  1818  047C                     L7:	
  1819                           
  1820                           ;main.c: 98: uInt loop;
  1821                           ;main.c: 99: for(; times > 0; times--)
  1822  047C  08F4               	movf	beep@times,f
  1823  047D  1903               	btfsc	3,2
  1824  047E  0008               	return
  1825                           
  1826                           ;main.c: 100: {
  1827                           ;main.c: 101: RB7 = 1;
  1828  047F  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0480  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0481  1786               	bsf	6,7	;volatile
  1831                           
  1832                           ;main.c: 102: for(loop = 0; loop < delayMs; loop++) _delay((unsigned long)((1)*(8000000/
      +                          4000.0)));
  1833  0482  01F5               	clrf	beep@loop
  1834  0483  01F6               	clrf	beep@loop+1
  1835  0484                     l163:	
  1836  0484  0871               	movf	beep@delayMs+1,w
  1837  0485  0276               	subwf	beep@loop+1,w
  1838  0486  1D03               	skipz
  1839  0487  2C8A               	goto	u315
  1840  0488  0870               	movf	beep@delayMs,w
  1841  0489  0275               	subwf	beep@loop,w
  1842  048A                     u315:	
  1843  048A  1803               	btfsc	3,0
  1844  048B  2C9C               	goto	l165
  1845  048C  3003               	movlw	3
  1846  048D  00F3               	movwf	??_beep+1
  1847  048E  3097               	movlw	151
  1848  048F  00F2               	movwf	??_beep
  1849  0490                     u1127:	
  1850  0490  0BF2               	decfsz	??_beep,f
  1851  0491  2C90               	goto	u1127
  1852  0492  0BF3               	decfsz	??_beep+1,f
  1853  0493  2C90               	goto	u1127
  1854  0494  2C95               	nop2
  1855  0495  3001               	movlw	1
  1856  0496  07F5               	addwf	beep@loop,f
  1857  0497  1803               	skipnc
  1858  0498  0AF6               	incf	beep@loop+1,f
  1859  0499  3000               	movlw	0
  1860  049A  07F6               	addwf	beep@loop+1,f
  1861  049B  2C84               	goto	l163
  1862  049C                     l165:	
  1863                           
  1864                           ;main.c: 103: RB7 = 0;
  1865  049C  1283               	bcf	3,5	;RP0=0, select bank0
  1866  049D  1303               	bcf	3,6	;RP1=0, select bank0
  1867  049E  1386               	bcf	6,7	;volatile
  1868                           
  1869                           ;main.c: 104: for(loop = 0; loop < delayMs; loop++) _delay((unsigned long)((1)*(8000000/
      +                          4000.0)));
  1870  049F  01F5               	clrf	beep@loop
  1871  04A0  01F6               	clrf	beep@loop+1
  1872  04A1                     l166:	
  1873  04A1  0871               	movf	beep@delayMs+1,w
  1874  04A2  0276               	subwf	beep@loop+1,w
  1875  04A3  1D03               	skipz
  1876  04A4  2CA7               	goto	u325
  1877  04A5  0870               	movf	beep@delayMs,w
  1878  04A6  0275               	subwf	beep@loop,w
  1879  04A7                     u325:	
  1880  04A7  1803               	btfsc	3,0
  1881  04A8  2CB9               	goto	l1173
  1882  04A9  3003               	movlw	3
  1883  04AA  00F3               	movwf	??_beep+1
  1884  04AB  3097               	movlw	151
  1885  04AC  00F2               	movwf	??_beep
  1886  04AD                     u1137:	
  1887  04AD  0BF2               	decfsz	??_beep,f
  1888  04AE  2CAD               	goto	u1137
  1889  04AF  0BF3               	decfsz	??_beep+1,f
  1890  04B0  2CAD               	goto	u1137
  1891  04B1  2CB2               	nop2
  1892  04B2  3001               	movlw	1
  1893  04B3  07F5               	addwf	beep@loop,f
  1894  04B4  1803               	skipnc
  1895  04B5  0AF6               	incf	beep@loop+1,f
  1896  04B6  3000               	movlw	0
  1897  04B7  07F6               	addwf	beep@loop+1,f
  1898  04B8  2CA1               	goto	l166
  1899  04B9                     l1173:	
  1900  04B9  3001               	movlw	1
  1901  04BA  02F4               	subwf	beep@times,f
  1902  04BB  2C7C               	goto	L7
  1903  04BC                     __end_of_beep:	
  1904  007E                     btemp	set	126	;btemp
  1905  007E                     wtemp	set	126
  1906  007E                     wtemp0	set	126
  1907  0080                     wtemp1	set	128
  1908  0082                     wtemp2	set	130
  1909  0084                     wtemp3	set	132
  1910  0086                     wtemp4	set	134
  1911  0088                     wtemp5	set	136
  1912  007F                     wtemp6	set	127
  1913  007E                     ttemp	set	126
  1914  007E                     ttemp0	set	126
  1915  0081                     ttemp1	set	129
  1916  0084                     ttemp2	set	132
  1917  0087                     ttemp3	set	135
  1918  007F                     ttemp4	set	127
  1919  007E                     ltemp	set	126
  1920  007E                     ltemp0	set	126
  1921  0082                     ltemp1	set	130
  1922  0086                     ltemp2	set	134
  1923  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     19      19
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _motor->_setPwmRC1
    _motor->_setPwmRC2
    _setPwmRC2->___awdiv
    _setPwmRC1->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_motor
    _motor->_setPwmRC1
    _motor->_setPwmRC2
    _setPwmRC2->___aldiv
    _setPwmRC1->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4770
                                             16 BANK0      3     3      0
                               _beep
                              _motor
                            _picInit
 ---------------------------------------------------------------------------------
 (1) _picInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motor                                                6     5      1    4594
                                             10 BANK0      6     5      1
                             ___bmul
                          _setPwmRC1
                          _setPwmRC2
 ---------------------------------------------------------------------------------
 (2) _setPwmRC2                                            7     3      4    1735
                                             11 COMMON     3     3      0
                                              6 BANK0      4     0      4
                            ___aldiv
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _setPwmRC1                                            7     3      4    1735
                                             11 COMMON     3     3      0
                                              6 BANK0      4     0      4
                            ___aldiv
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     724
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     198
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _beep                                                 7     5      2     176
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _motor
     ___bmul
     _setPwmRC1
       ___aldiv
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _setPwmRC2
       ___aldiv
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _picInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     13      13       5       23.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Fri Feb 14 21:05:00 2014

          ___bmul@product 0072               __CFG_CP$OFF 0000              ___awdiv@sign 0021  
     ___wmul@multiplicand 0072                       l141 070D                       l305 0681  
                     l145 0786                       l163 0484                       l165 049C  
                     l166 04A1                       l185 0658                       l179 061A  
                     l623 0462                       _RB0 0030                       _RA3 002B  
                     _RB2 0032                       _RA4 002C                       _RB3 0033  
                     _RA5 002D                       _RB4 0034                       _RB5 0035  
                     _RE0 0048                       _RE1 0049                       _RB7 0037  
                     u315 048A                       u325 04A7                       _PR2 0092  
            __CFG_CPD$OFF 0000                       u645 06A6                       u805 04DE  
                     u665 06B4                       u825 04EA                       u745 0463  
                     u675 06C9                       u835 04F6                       u755 046A  
                     u685 06DB                       u845 0500                       _RX9 00C6  
                     u875 057A                       u885 05E5                       _TX9 04C6  
            __CFG_LVP$OFF 0000                      l1173 04B9                      l1405 045A  
                    l1501 0622                      l1423 04C8                      l1441 04E9  
                    l1451 050A                      l1523 0660                      l1515 064F  
                    l1365 06A2                      l1357 0692                      l1429 04D3  
                    l1509 0647                      l1383 06F5                      l1375 06DA  
                    l1367 06B2                      l1455 0512                      l1447 04FF  
                    l1439 04DB                      l1551 078B                      l1535 0722  
                    l1393 0433                      l1529 071B                      l1379 06E7  
                    l1563 07EF                      l1389 042D                      l1493 0611  
                    l1487 0609                      _BRGH 04C2                      _CREN 00C4  
                    u1107 07CF                      u1117 07E7                      u1127 0490  
                    u1047 0734                      u1137 04AD                      u1057 074B  
                    u1067 0766                      u1077 077E                      u1087 079D  
                    u1097 07B4                      _RCIF 0065                      _OERR 00C1  
                    _SPEN 00C7                      _TXEN 04C5                      _TXIF 0064  
                    _beep 047B                      _main 06FE                      btemp 007E  
                    ltemp 007E                      start 0000                      ttemp 007E  
                    wtemp 007E             __CFG_IESO$OFF 0000         ___bmul@multiplier 0073  
           __CFG_MCLRE$ON 0000                     ?_beep 0070           __end_of___aldiv 06FE  
                   ?_main 0070           __end_of___awdiv 0519             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188           ___awdiv@divisor 0076                     _T2CON 0012  
                   _IRCF0 047C                     _IRCF1 047D                     _IRCF2 047E  
         ___awdiv@counter 0020                     _RCREG 001A                     _SPBRG 0099  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _PORTD 0008                     _PORTE 0009                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _TRISE 0089                     _TXREG 0019             __CFG_PWRTE$ON 0000  
          __CFG_FCMEN$OFF 0000           __end_of_picInit 0458                     _motor 05EF  
          __CFG_BOREN$OFF 0000                     ltemp0 007E                     ltemp1 0082  
                   ltemp2 0086                     ltemp3 0080                     ttemp0 007E  
                   ttemp1 0081                     ttemp2 0084                     ttemp3 0087  
                   ttemp4 007F                     status 0003                     wtemp0 007E  
                   wtemp1 0080                     wtemp2 0082                     wtemp3 0084  
                   wtemp4 0086                     wtemp5 0088                     wtemp6 007F  
         __initialization 07FC              __end_of_beep 04BC              __end_of_main 07FC  
                  ??_beep 0072                    ??_main 0030                    _CCPR1L 0015  
                  _CCPR2L 001B          ___awdiv@dividend 0078                    ?_motor 002A  
                  _ANSELH 0189                    ___bmul 042B                 ??___aldiv 0078  
                  ___wmul 0458                 ??___awdiv 007A          ___awdiv@quotient 0022  
               ??_picInit 0070   __end_of__initialization 07FC       ___bmul@multiplicand 0070  
          __pcstackCOMMON 0070             __end_of_motor 066F                   ??_motor 002B  
              __pmaintext 06FE                   ?___bmul 0070                   ?___wmul 0070  
      __size_of_setPwmRC1 006B        __size_of_setPwmRC2 006B                   _CCP1CON 0017  
                 _CCP2CON 001D                   ___aldiv 066F           __size_of___bmul 0011  
                 ___awdiv 04BC           __size_of___wmul 0023                   __ptext0 0000  
                 __ptext1 043C                   __ptext2 05EF                   __ptext3 0584  
                 __ptext4 0519                   __ptext5 0458                   __ptext6 04BC  
                 __ptext7 066F                   __ptext8 042B                   __ptext9 047B  
                 _picInit 043C          ___aldiv@dividend 0074      end_of_initialization 07FC  
       __end_of_setPwmRC1 0584         __end_of_setPwmRC2 05EF          ___aldiv@quotient 0022  
           setPwmRC1@freq 0026             setPwmRC2@freq 0026             setPwmRC1@duty 0028  
           setPwmRC2@duty 0028            __end_of___bmul 043C            __end_of___wmul 047B  
     start_initialization 07FC  __CFG_FOSC$INTRC_NOCLKOUT 0000                  ??___bmul 0071  
                ??___wmul 0074                 ___latbits 0002             __pcstackBANK0 0020  
                ?___aldiv 0070                  ?___awdiv 0076                 beep@times 0074  
              setPwmRC1@a 007C                setPwmRC2@a 007C                  ?_picInit 0070  
             beep@delayMs 0070            __size_of_motor 0080           ___aldiv@divisor 0070  
         ___aldiv@counter 0020            ___wmul@product 0074                motor@speed 002F  
               _setPwmRC1 0519                 _setPwmRC2 0584         ___wmul@multiplier 0070  
           motor@maxSpeed 002D                ?_setPwmRC1 0026                ?_setPwmRC2 0026  
        __size_of___aldiv 008F          __size_of___awdiv 005D          __size_of_picInit 001C  
                beep@loop 0075             __size_of_beep 0041             __size_of_main 00FE  
            motor@speedLM 002E              motor@speedRM 002A               ??_setPwmRC1 007B  
             ??_setPwmRC2 007B              ___aldiv@sign 0021  
